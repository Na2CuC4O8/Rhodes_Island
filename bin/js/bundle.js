var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Struc;
(function (Struc) {
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this.list = [];
            this.pointer = 0;
            source.forEach(function (ele) {
                _this.list.push(ele);
            });
        }
        PointerList.prototype.read = function () {
            return this.list[this.pointer];
        };
        PointerList.prototype.step = function () {
            this.pointer += 1;
            return this;
        };
        PointerList.prototype.to = function (place) {
            this.pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this.list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this.list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            return this.list[this.pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this.list.length;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameField_1 = require("./SceneScript/GameField");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/GameField.ts", GameField_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1400;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/GameField":6,"./SceneScript/Loading":7}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataStructure_1 = require("../DataStructure");
var gameSet_URL = "./Database/GameSet.json", enemyDatabase_URL = "./Database/EnemyDatabase.json", operatorDatabase_URL = "./Database/OperatorDatabase.json";
var Database = /** @class */ (function () {
    function Database() {
        this.enemyData = Laya.loader.getRes(enemyDatabase_URL);
        this.operatorData = Laya.loader.getRes(operatorDatabase_URL);
        this.gameSet = Laya.loader.getRes(gameSet_URL);
        this.initTimeTable();
        console.log(this);
    }
    Database.prototype.initTimeTable = function () {
        var _this = this;
        this.timeTable = new DataStructure_1.Struc.PointerList();
        this.gameSet["timetableBref"].forEach(function (element) {
            var time = element["time"];
            var type = _this.enemyData[element["type"]];
            var path = _this.gameSet["paths"][element.path];
            _this.timeTable.push({ time: time, type: type, path: path });
        });
    };
    return Database;
}());
exports.default = Database;
},{"../DataStructure":1}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Grids = /** @class */ (function () {
    function Grids(father, upperPath, database) {
        this.Map = [];
        this.RecMap = [];
        this.database = database;
        // this.father = father
        // this.upperPath = upperPath
        // this.data = data
        // let cols = data["ground"]["width"],
        // raws = data["ground"]["height"]
        // for (let n = 0; n < raws; n += 1) {
        //     this.Map[n] = []
        //     this.RecMap[n] = []
        //     for (let m = 0; m < cols; m += 1) {
        //         this.initElement(n,m)
        //     }
        // }
        // console.log(this.RecMap)
    }
    Grids.prototype.initElement = function (raw, count) {
        var current = Laya.Sprite.fromImage("Basic/Rec.png"); //载入图片
        current.pos(Grids.size * count, Grids.size * raw)
            .size(Grids.size, Grids.size); //依据static size属性改变大小、依据编号改变位置
        current.name = "grid" + raw + "-" + count; //重命名为 grid行数-列数
        this.Map[raw][count] = current;
        this.RecMap[raw][count] = new Laya.Rectangle(current.x, current.y, Grids.size, Grids.size);
        // current.on(Laya.Event.CLICK, this.upperPath, this.upperPath.addOperator, [this.getPlace(count,raw)])//设定鼠标点击事件
        //向GameField中添加Operator实例
        this.father.addChild(current);
    };
    Grids.prototype.getPlace = function (count, raw) {
        //raw:第几行
        //count:第几个
        return [
            this.RecMap[raw][count].x,
            this.RecMap[raw][count].y
        ];
    };
    Grids.size = 90;
    return Grids;
}());
exports.Grids = Grids;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":2}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Grids_1 = require("../GameObj/Grids");
var Database_1 = require("../GameObj/Database");
var log = console.log;
var GameField = /** @class */ (function (_super) {
    __extends(GameField, _super);
    function GameField() {
        var _this = _super.call(this) || this;
        _this.database = new Database_1.default();
        _this.grids = new Grids_1.Grids(_this.UISet, _this, _this.database);
        return _this;
    }
    return GameField;
}(layaMaxUI_1.ui.GameFieldSceneUI));
exports.default = GameField;
// export default class GameField extends ui.GameFieldSceneUI{
//     /**
//      * sb
//      */
//     public grids:Grids
//     public doctor:Doctor
//     public operators:Array<Operator> = []
//     public enemies:Array<Enemy> = []
//     private onKeydown:Function
//     public GameSet:JSON
//     public EnemyDatabase:JSON
//     public TimeTable:Struc.PointerList<timeNode>
//     private time:number
//     // public frameLoop:Laya.timer
//     constructor(){
//         super()
//         this
//         Laya.loader.load([gameSet_json, enemyDatabase], Laya.Handler.create(this, this.onLoaded),null,Laya.Loader.JSON)
//         //加载敌人数据库
//         //加载地图  
//     }
//     private onLoaded(){//加载完成后执行此函数
//         this.GameSet = Laya.loader.getRes(gameSet_json)//获取已加载的地图
//         this.EnemyDatabase = Laya.loader.getRes(enemyDatabase)//获取已加载的敌人数据
//         this.initTimeTable()//从地图数据中加载时间表
//         this.time = 0//将时间设为0;时间单位为帧
//         this.grids = new Grids(this.UISet,this,this.GameSet)//依据已加载的地图数据，设置地图
//         this.doctor = new Doctor()//初始化刀客他对象
//         this.keyBoardEventSetup()//初始化键盘事件
//         /**测试代码 */
//         // this.enemies.push(new Enemy(this.UISet, this, "bug0", []))
//         /**测试代码End */
//         Laya.timer.loop(20,this,this.frameLoop)//开启游戏帧循环
//     }
//     private initTimeTable(){
//         this.TimeTable = new Struc.PointerList<timeNode>()
//         const rawTable:Array<any> = this.GameSet["timetable"]
//         rawTable.forEach((ele)=>{
//             this.TimeTable.push({
//                 time:ele.time,
//                 type:this.EnemyDatabase[ele.type],
//                 path:this.GameSet["paths"][ele.path]
//             })
//         })
//         log(this.TimeTable)
//     }
//     private keyBoardEventSetup(){
//         this.onKeydown = (e:Laya.Event) => {
//             /**测试代码 */
//             if (e.keyCode === Laya.Keyboard.E) {
//                 console.log(this.enemies)
//             }
//             if (e.keyCode === Laya.Keyboard.F) {
//                 console.log(this.enemies[0])
//             }
//             /**测试代码End */
//         }
//         Laya.stage.on(Laya.Event.KEY_DOWN,this,this.onKeydown)
//     }
//     public frameLoop(){//每帧都会执行的代码块
//         if (this.TimeTable.read() && this.time === this.TimeTable.read().time) {
//             this.enemies.push(new Enemy(this.UISet,this,
//                 this.TimeTable.read().type,
//                 this.TimeTable.read().path))
//             this.TimeTable.step()
//         }
//         this.operators.forEach((ele)=>{//执行所有干员对象的update方法
//             ele.update()
//         })
//         this.enemies.forEach((ele)=>{//执行所有敌人对象的update方法
//             ele.update()
//         })
//         this.time ++
//     }
//     addOperator(place:number[]){//在地图上添加干员
//         //此方法被作为回调函数提供给this.grids对象，在点击地图空格时执行
//         this.operators.push(new Operator(this,place))
//     }
// }
},{"../GameObj/Database":3,"../GameObj/Grids":4,"../ui/layaMaxUI":8}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
        Laya.Scene.open("GameFieldScene.scene");
        // console.log(Laya.loader)
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../ui/layaMaxUI":8}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameFieldSceneUI = /** @class */ (function (_super) {
        __extends(GameFieldSceneUI, _super);
        function GameFieldSceneUI() {
            return _super.call(this) || this;
        }
        GameFieldSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameFieldScene");
        };
        return GameFieldSceneUI;
    }(Scene));
    ui.GameFieldSceneUI = GameFieldSceneUI;
    REG("ui.GameFieldSceneUI", GameFieldSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
