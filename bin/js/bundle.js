var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Struc;
(function (Struc) {
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this.list = [];
            this.pointer = 0;
            source.forEach(function (ele) {
                _this.list.push(ele);
            });
        }
        PointerList.prototype.read = function () {
            return this.list[this.pointer];
        };
        PointerList.prototype.step = function () {
            this.pointer += 1;
            return this;
        };
        PointerList.prototype.to = function (place) {
            this.pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this.list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this.list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            return this.list[this.pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this.list.length;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var MainField_1 = require("./SceneScript/MainField");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/MainField.ts", MainField_1.default);
    };
    GameConfig.width = 1400;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "MainField.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/MainField":9}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    function Enemy(father, upperPath, data, path) {
        var _this = _super.call(this) || this;
        _this.state.init(data, path);
        _this.present.init(father, "Basic/There-2.png", 0, 0);
        // this.state.speed = 5
        // this.state.setAxisSpeed()
        _this.update = function () {
            // this.state.updatePosition()
            // this.present.setPosition(this.state.position)
            // this.state.isArrived() && this.state.nextAim()
        };
        Laya.timer.once(2000, _this, console.log, [_this]);
        return _this;
    }
    return Enemy;
}(People_1.basic.People));
exports.default = Enemy;
/*
export default class Enemy extends basic.People{
    public speed:number = 0.4       //速度
    public CentreShift:number = 35  //与Ground.Grids.size的一半保持一致，稍后改为变量
    private hitDoctor:number = 1    //进门之后打刀客他多少血
    // public path:number[][] = [
    //     [0,0],
    //     [100,100],
    //     [0,0]
    // ]
    
    public path:number[][] = []     //路径对象
    public father:Laya.Sprite       //原点坐标对象
    private place:Grids             //地图方格对象
    private upperPath:GameField     //含有此实例的实例

    constructor(father:Laya.Sprite, place:Grids, upperPath:GameField){
        super()
        // alert(1)
        this.upperPath = upperPath
        this.father = father
        this.place = place
        this.state.ele = Laya.Sprite.fromImage("Basic/There.png")
        // alert(2)

        // const start:number[] = this.path.shift()
        this.state.ele.pos(0,0).size(30,30)
        father.addChild(this.state.ele)

        this.SetPath()
        this.move()
    }

    private SetPath(){
        const points:number[][] = [
            [0,0],
            [0,5],
            [5,5],
            [5,3],
            [3,3],
            [3,0],
            [5,0],
            [5,9]
        ]
        points.forEach((ele)=>{
            // console.log(this.upperPath)
            const rec:Laya.Rectangle = this.upperPath.grids.RecMap[ele[0]][ele[1]]
            const current:number[] = [
                rec.x,
                rec.y
            ]
            this.path.push(current)
        })
    }

    private move(){
        const target:number[] = this.path.shift()
        if (target === undefined){
            this.goal()
            return
        }
        const {x,y} = this.state.ele
        const hypotenuse:number = Math.sqrt(Math.pow(x-target[0],2)+Math.pow(y-target[1],2))
        const time:number = Math.floor(hypotenuse/this.speed)
        const tween:Laya.Tween = Laya.Tween.to(this.state.ele, {x:target[0],y:target[1]}, time, null,
            Laya.Handler.create(this,this.move),100)

    }
    

    private goal(){
        this.upperPath.doctor.damaged(this.hitDoctor)
    }
}
*/ 
},{"./People":5}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var Operator = /** @class */ (function (_super) {
    __extends(Operator, _super);
    function Operator(upperPath, position) {
        var _this = _super.call(this) || this;
        _this.init();
        // this.state.init()
        _this.present.init(upperPath.UISet, "Basic/OperatorSample_A.png", position[0], position[1]);
        console.log(_this);
        return _this;
    }
    Operator.prototype.init = function () {
    };
    return Operator;
}(People_1.basic.People));
exports.default = Operator;
},{"./People":5}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var basic;
(function (basic) {
    var Present = /** @class */ (function () {
        function Present() {
        }
        Present.prototype.init = function (father, url, x, y) {
            if (url === void 0) { url = "Basic/OperatorSample_A.png"; }
            this.father = father;
            this.ImageURL = url;
            this.ele = Laya.Sprite.fromImage(this.ImageURL);
            this.ele.size(Present.size, Present.size);
            this.father.addChild(this.ele);
            this.setPosition([x, y]);
        };
        Present.prototype.setPosition = function (newPosition) {
            this.ele.pos(newPosition[0], newPosition[1]);
        };
        Present.size = 90;
        return Present;
    }());
    basic.Present = Present;
    var State = /** @class */ (function () {
        // public hitBox:Laya.Rectangle
        function State() {
            this._x = 0;
            this._y = 0;
            this._speed = 0;
            this._xSpeed = 0;
            this._ySpeed = 0;
            this._path = [];
            this.aimPointer = -1;
        }
        State.prototype.init = function (data, path) {
            this.name = data["name"];
            this._speed = data["speed"];
            this.initPath(path);
        };
        State.prototype.initPath = function (getpath) {
            var _this = this;
            getpath.forEach(function (ele, index) {
                _this._path[index] = [];
                _this._path[index][0] = ele[0];
                _this._path[index][1] = ele[1];
            });
        };
        State.prototype.getAim = function () {
            return this._path[this.aimPointer];
        };
        State.prototype.updatePosition = function () {
            var aim = this.getAim();
            this._x = this.moveTo(this._x, this._xSpeed, aim[0]);
            this._y = this.moveTo(this._y, this._ySpeed, aim[1]);
            // console.log({x:this.x,y:this.y})
        };
        State.prototype.moveTo = function (front, shift, end) {
            if (shift === 0) {
                return front;
            }
            return shift > 0 ?
                ((front + shift) > end ? end : front + shift) :
                ((front + shift) < end ? end : front + shift);
        };
        State.prototype.isArrived = function () {
            var aim = this.getAim();
            return this._x === aim[0] && this._y === aim[1];
        };
        // private static size:number = 90//待修改
        State.hitSize = 80;
        return State;
    }());
    basic.State = State;
    var People = /** @class */ (function () {
        function People() {
            this.state = new State();
            this.present = new Present();
        }
        People.prototype.sethitBox = function (size, position) {
        };
        People.prototype.update = function () {
        };
        return People;
    }());
    basic.People = People;
})(basic = exports.basic || (exports.basic = {}));
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":2}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Doctor = /** @class */ (function () {
    function Doctor() {
        this.HP = 2;
    }
    Doctor.prototype.damaged = function (hit) {
        this.HP -= hit;
        if (this.HP === 0) {
            this.dead();
        }
        return this;
    };
    Doctor.prototype.dead = function () {
        alert("你的脑子被吃掉了");
    };
    return Doctor;
}());
exports.default = Doctor;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Grids = /** @class */ (function () {
    function Grids(father, upperPath, data) {
        this.Map = [];
        this.RecMap = [];
        this.father = father;
        this.upperPath = upperPath;
        this.data = data;
        var cols = data["ground"]["width"], raws = data["ground"]["height"];
        for (var n = 0; n < raws; n += 1) {
            this.Map[n] = [];
            this.RecMap[n] = [];
            for (var m = 0; m < cols; m += 1) {
                this.initElement(n, m);
            }
        }
        console.log(this.RecMap);
    }
    Grids.prototype.initElement = function (raw, count) {
        var current = Laya.Sprite.fromImage("Basic/Rec.png"); //载入图片
        current.pos(Grids.size * count, Grids.size * raw)
            .size(Grids.size, Grids.size); //依据static size属性改变大小、依据编号改变位置
        current.name = "grid" + raw + "-" + count; //重命名为 grid行数-列数
        this.Map[raw][count] = current;
        this.RecMap[raw][count] = new Laya.Rectangle(current.x, current.y, Grids.size, Grids.size);
        current.on(Laya.Event.CLICK, this.upperPath, this.upperPath.addOperator, [this.getPlace(count, raw)]); //设定鼠标点击事件
        //向GameField中添加Operator实例
        this.father.addChild(current);
    };
    Grids.prototype.getPlace = function (count, raw) {
        //raw:第几行
        //count:第几个
        return [
            this.RecMap[raw][count].x,
            this.RecMap[raw][count].y
        ];
    };
    Grids.size = 90;
    return Grids;
}());
exports.Grids = Grids;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Enemy_1 = require("../GameObj/Enemy");
var Ground_1 = require("./Ground");
var Doctor_1 = require("./Doctor");
var Operator_1 = require("../GameObj/Operator");
var DataStructure_1 = require("../DataStructure");
var log = console.log;
var gameSet_json = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json";
var GameField = /** @class */ (function (_super) {
    __extends(GameField, _super);
    // public frameLoop:Laya.timer
    function GameField() {
        var _this = _super.call(this) || this;
        _this.operators = [];
        _this.enemies = [];
        _this;
        Laya.loader.load([gameSet_json, enemyDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
        //加载敌人数据库
        //加载地图  
    }
    GameField.prototype.onLoaded = function () {
        this.GameSet = Laya.loader.getRes(gameSet_json); //获取已加载的地图
        this.EnemyDatabase = Laya.loader.getRes(enemyDatabase); //获取已加载的敌人数据
        this.initTimeTable(); //从地图数据中加载时间表
        this.time = 0; //将时间设为0;时间单位为帧
        this.grids = new Ground_1.Grids(this.UISet, this, this.GameSet); //依据已加载的地图数据，设置地图
        this.doctor = new Doctor_1.default(); //初始化刀客他对象
        this.keyBoardEventSetup(); //初始化键盘事件
        /**测试代码 */
        // this.enemies.push(new Enemy(this.UISet, this, "bug0", []))
        /**测试代码End */
        Laya.timer.loop(20, this, this.frameLoop); //开启游戏帧循环
    };
    GameField.prototype.initTimeTable = function () {
        var _this = this;
        this.TimeTable = new DataStructure_1.Struc.PointerList();
        var rawTable = this.GameSet["timetable"];
        rawTable.forEach(function (ele) {
            _this.TimeTable.push({
                time: ele.time,
                type: _this.EnemyDatabase[ele.type],
                path: _this.GameSet["paths"][ele.path]
            });
        });
        log(this.TimeTable);
    };
    GameField.prototype.keyBoardEventSetup = function () {
        var _this = this;
        this.onKeydown = function (e) {
            /**测试代码 */
            if (e.keyCode === Laya.Keyboard.E) {
                console.log(_this.enemies);
            }
            if (e.keyCode === Laya.Keyboard.F) {
                console.log(_this.enemies[0]);
            }
            /**测试代码End */
        };
        Laya.stage.on(Laya.Event.KEY_DOWN, this, this.onKeydown);
    };
    GameField.prototype.frameLoop = function () {
        if (this.TimeTable.read() && this.time === this.TimeTable.read().time) {
            this.enemies.push(new Enemy_1.default(this.UISet, this, this.TimeTable.read().type, this.TimeTable.read().path));
            this.TimeTable.step();
        }
        this.operators.forEach(function (ele) {
            ele.update();
        });
        this.enemies.forEach(function (ele) {
            ele.update();
        });
        this.time++;
    };
    GameField.prototype.addOperator = function (place) {
        //此方法被作为回调函数提供给this.grids对象，在点击地图空格时执行
        this.operators.push(new Operator_1.default(this, place));
    };
    return GameField;
}(layaMaxUI_1.ui.MainFieldUI));
exports.default = GameField;
},{"../DataStructure":1,"../GameObj/Enemy":3,"../GameObj/Operator":4,"../ui/layaMaxUI":10,"./Doctor":7,"./Ground":8}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var MainFieldUI = /** @class */ (function (_super) {
        __extends(MainFieldUI, _super);
        function MainFieldUI() {
            return _super.call(this) || this;
        }
        MainFieldUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("MainField");
        };
        return MainFieldUI;
    }(Scene));
    ui.MainFieldUI = MainFieldUI;
    REG("ui.MainFieldUI", MainFieldUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[6])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xheWEvTGF5YUFpcklERS9yZXNvdXJjZXMvYXBwL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvRGF0YVN0cnVjdHVyZS50cyIsInNyYy9HYW1lQ29uZmlnLnRzIiwic3JjL0dhbWVPYmovRW5lbXkudHMiLCJzcmMvR2FtZU9iai9PcGVyYXRvci50cyIsInNyYy9HYW1lT2JqL1Blb3BsZS50cyIsInNyYy9NYWluLnRzIiwic3JjL1NjZW5lU2NyaXB0L0RvY3Rvci50cyIsInNyYy9TY2VuZVNjcmlwdC9Hcm91bmQudHMiLCJzcmMvU2NlbmVTY3JpcHQvTWFpbkZpZWxkLnRzIiwic3JjL3VpL2xheWFNYXhVSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNUQSxJQUFjLEtBQUssQ0EyQ2xCO0FBM0NELFdBQWMsS0FBSztJQUdmO1FBR0kscUJBQVksTUFBb0IsRUFBRSxTQUFvQjtZQUExQyx1QkFBQSxFQUFBLFdBQW9CO1lBQUUsMEJBQUEsRUFBQSxhQUFvQjtZQUF0RCxpQkFJQztZQU5PLFNBQUksR0FBWSxFQUFFLENBQUE7WUFDbEIsWUFBTyxHQUFVLENBQUMsQ0FBQTtZQUV0QixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRztnQkFDZixLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUN2QixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7UUFDRCwwQkFBSSxHQUFKO1lBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNsQyxDQUFDO1FBRUQsMEJBQUksR0FBSjtZQUNJLElBQUksQ0FBQyxPQUFPLElBQUUsQ0FBQyxDQUFBO1lBQ2YsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBRUQsd0JBQUUsR0FBRixVQUFH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QUFGLFVBQUUsUUFVZiIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJcclxuZXhwb3J0IG1vZHVsZSBTdHJ1Y3tcclxuICAgIFxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb2ludGVyTGlzdDxFPntcclxuICAgICAgICBwcml2YXRlIGxpc3Q6QXJyYXk8RT4gPSBbXVxyXG4gICAgICAgIHByaXZhdGUgcG9pbnRlcjpudW1iZXIgPSAwXHJcbiAgICAgICAgY29uc3RydWN0b3Ioc291cmNlOkFycmF5PEU+ID0gW10sIGluaXRQb2ludDpudW1iZXIgPSAwKXtcclxuICAgICAgICAgICAgc291cmNlLmZvckVhY2goKGVsZSk9PntcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKGVsZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVhZCgpOkV7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RbdGhpcy5wb2ludGVyXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RlcCgpOlBvaW50ZXJMaXN0PEU+e1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50ZXIrPTFcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRvKHBsYWNlOm51bWJlcik6UG9pbnRlckxpc3Q8RT57XHJcbiAgICAgICAgICAgIHRoaXMucG9pbnRlciA9IHBsYWNlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdXNoKGRhdGE6RSk6UG9pbnRlckxpc3Q8RT57XHJcbiAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKGRhdGEpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXQoaW5kZXg6bnVtYmVyLGRhdGE6RSk6UG9pbnRlckxpc3Q8RT57XHJcbiAgICAgICAgICAgIHRoaXMubGlzdFtpbmRleF0gPSBkYXRhXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIG5leHQoc2hpZnQ6bnVtYmVyID0gMSk6RXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdFt0aGlzLnBvaW50ZXIrc2hpZnRdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXQgbGVuZ3RoKCk6bnVtYmVye1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0Lmxlbmd0aFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qKlRoaXMgY2xhc3MgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgTGF5YUFpcklERSwgcGxlYXNlIGRvIG5vdCBtYWtlIGFueSBtb2RpZmljYXRpb25zLiAqL1xyXG5pbXBvcnQgTWFpbkZpZWxkIGZyb20gXCIuL1NjZW5lU2NyaXB0L01haW5GaWVsZFwiXHJcbi8qXHJcbiog5ri45oiP5Yid5aeL5YyW6YWN572uO1xyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIHdpZHRoOm51bWJlcj0xNDAwO1xyXG4gICAgc3RhdGljIGhlaWdodDpudW1iZXI9OTAwO1xyXG4gICAgc3RhdGljIHNjYWxlTW9kZTpzdHJpbmc9XCJub3NjYWxlXCI7XHJcbiAgICBzdGF0aWMgc2NyZWVuTW9kZTpzdHJpbmc9XCJub25lXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25WOnN0cmluZz1cInRvcFwiO1xyXG4gICAgc3RhdGljIGFsaWduSDpzdHJpbmc9XCJsZWZ0XCI7XHJcbiAgICBzdGF0aWMgc3RhcnRTY2VuZTphbnk9XCJNYWluRmllbGQuc2NlbmVcIjtcclxuICAgIHN0YXRpYyBzY2VuZVJvb3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBzdGF0aWMgZGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0OmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgcGh5c2ljc0RlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgZXhwb3J0U2NlbmVUb0pzb246Ym9vbGVhbj10cnVlO1xyXG4gICAgY29uc3RydWN0b3IoKXt9XHJcbiAgICBzdGF0aWMgaW5pdCgpe1xyXG4gICAgICAgIHZhciByZWc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xyXG4gICAgICAgIHJlZyhcIlNjZW5lU2NyaXB0L01haW5GaWVsZC50c1wiLE1haW5GaWVsZCk7XHJcbiAgICB9XHJcbn1cclxuR2FtZUNvbmZpZy5pbml0KCk7IiwiaW1wb3J0IHtiYXNpY30gZnJvbSBcIi4vUGVvcGxlXCJcclxuaW1wb3J0IHtHcmlkc30gZnJvbSBcIi4uL1NjZW5lU2NyaXB0L0dyb3VuZFwiXHJcbmltcG9ydCBHYW1lRmllbGQgZnJvbSBcIi4uL1NjZW5lU2NyaXB0L01haW5GaWVsZFwiXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZW15IGV4dGVuZHMgYmFzaWMuUGVvcGxle1xyXG4gICAgY29uc3RydWN0b3IoZmF0aGVyOkxheWEuU3ByaXRlLHVwcGVyUGF0aDpHYW1lRmllbGQsZGF0YTphbnkscGF0aDpudW1iZXJbXVtdKXtcclxuICAgICAgICBzdXBlcigpXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5pbml0KGRhdGEscGF0aClcclxuICAgICAgICB0aGlzLnByZXNlbnQuaW5pdChmYXRoZXIsIFwiQmFzaWMvVGhlcmUtMi5wbmdcIiwgMCwwKVxyXG5cclxuICAgICAgICAvLyB0aGlzLnN0YXRlLnNwZWVkID0gNVxyXG4gICAgICAgIC8vIHRoaXMuc3RhdGUuc2V0QXhpc1NwZWVkKClcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLnVwZGF0ZSA9ICgpPT57XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc3RhdGUudXBkYXRlUG9zaXRpb24oKVxyXG4gICAgICAgICAgICAvLyB0aGlzLnByZXNlbnQuc2V0UG9zaXRpb24odGhpcy5zdGF0ZS5wb3NpdGlvbilcclxuICAgICAgICAgICAgLy8gdGhpcy5zdGF0ZS5pc0Fycml2ZWQoKSAmJiB0aGlzLnN0YXRlLm5leHRBaW0oKVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBMYXlhLnRpbWVyLm9uY2UoMjAwMCx0aGlzLGNvbnNvbGUubG9nLFt0aGlzXSlcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZW15IGV4dGVuZHMgYmFzaWMuUGVvcGxle1xyXG4gICAgcHVibGljIHNwZWVkOm51bWJlciA9IDAuNCAgICAgICAvL+mAn+W6plxyXG4gICAgcHVibGljIENlbnRyZVNoaWZ0Om51bWJlciA9IDM1ICAvL+S4jkdyb3VuZC5Hcmlkcy5zaXpl55qE5LiA5Y2K5L+d5oyB5LiA6Ie077yM56iN5ZCO5pS55Li65Y+Y6YePXHJcbiAgICBwcml2YXRlIGhpdERvY3RvcjpudW1iZXIgPSAxICAgIC8v6L+b6Zeo5LmL5ZCO5omT5YiA5a6i5LuW5aSa5bCR6KGAXHJcbiAgICAvLyBwdWJsaWMgcGF0aDpudW1iZXJbXVtdID0gW1xyXG4gICAgLy8gICAgIFswLDBdLFxyXG4gICAgLy8gICAgIFsxMDAsMTAwXSxcclxuICAgIC8vICAgICBbMCwwXVxyXG4gICAgLy8gXVxyXG4gICAgXHJcbiAgICBwdWJsaWMgcGF0aDpudW1iZXJbXVtdID0gW10gICAgIC8v6Lev5b6E5a+56LGhXHJcbiAgICBwdWJsaWMgZmF0aGVyOkxheWEuU3ByaXRlICAgICAgIC8v5Y6f54K55Z2Q5qCH5a+56LGhXHJcbiAgICBwcml2YXRlIHBsYWNlOkdyaWRzICAgICAgICAgICAgIC8v5Zyw5Zu+5pa55qC85a+56LGhXHJcbiAgICBwcml2YXRlIHVwcGVyUGF0aDpHYW1lRmllbGQgICAgIC8v5ZCr5pyJ5q2k5a6e5L6L55qE5a6e5L6LXHJcblxyXG4gICAgY29uc3RydWN0b3IoZmF0aGVyOkxheWEuU3ByaXRlLCBwbGFjZTpHcmlkcywgdXBwZXJQYXRoOkdhbWVGaWVsZCl7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIC8vIGFsZXJ0KDEpXHJcbiAgICAgICAgdGhpcy51cHBlclBhdGggPSB1cHBlclBhdGhcclxuICAgICAgICB0aGlzLmZhdGhlciA9IGZhdGhlclxyXG4gICAgICAgIHRoaXMucGxhY2UgPSBwbGFjZVxyXG4gICAgICAgIHRoaXMuc3RhdGUuZWxlID0gTGF5YS5TcHJpdGUuZnJvbUltYWdlKFwiQmFzaWMvVGhlcmUucG5nXCIpXHJcbiAgICAgICAgLy8gYWxlcnQoMilcclxuXHJcbiAgICAgICAgLy8gY29uc3Qgc3RhcnQ6bnVtYmVyW10gPSB0aGlzLnBhdGguc2hpZnQoKVxyXG4gICAgICAgIHRoaXMuc3RhdGUuZWxlLnBvcygwLDApLnNpemUoMzAsMzApXHJcbiAgICAgICAgZmF0aGVyLmFkZENoaWxkKHRoaXMuc3RhdGUuZWxlKVxyXG5cclxuICAgICAgICB0aGlzLlNldFBhdGgoKVxyXG4gICAgICAgIHRoaXMubW92ZSgpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBTZXRQYXRoKCl7XHJcbiAgICAgICAgY29uc3QgcG9pbnRzOm51bWJlcltdW10gPSBbXHJcbiAgICAgICAgICAgIFswLDBdLFxyXG4gICAgICAgICAgICBbMCw1XSxcclxuICAgICAgICAgICAgWzUsNV0sXHJcbiAgICAgICAgICAgIFs1LDNdLFxyXG4gICAgICAgICAgICBbMywzXSxcclxuICAgICAgICAgICAgWzMsMF0sXHJcbiAgICAgICAgICAgIFs1LDBdLFxyXG4gICAgICAgICAgICBbNSw5XVxyXG4gICAgICAgIF1cclxuICAgICAgICBwb2ludHMuZm9yRWFjaCgoZWxlKT0+e1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnVwcGVyUGF0aClcclxuICAgICAgICAgICAgY29uc3QgcmVjOkxheWEuUmVjdGFuZ2xlID0gdGhpcy51cHBlclBhdGguZ3JpZHMuUmVjTWFwW2VsZVswXV1bZWxlWzFdXVxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Om51bWJlcltdID0gW1xyXG4gICAgICAgICAgICAgICAgcmVjLngsXHJcbiAgICAgICAgICAgICAgICByZWMueVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIHRoaXMucGF0aC5wdXNoKGN1cnJlbnQpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1vdmUoKXtcclxuICAgICAgICBjb25zdCB0YXJnZXQ6bnVtYmVyW10gPSB0aGlzLnBhdGguc2hpZnQoKVxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHRoaXMuZ29hbCgpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7eCx5fSA9IHRoaXMuc3RhdGUuZWxlXHJcbiAgICAgICAgY29uc3QgaHlwb3RlbnVzZTpudW1iZXIgPSBNYXRoLnNxcnQoTWF0aC5wb3coeC10YXJnZXRbMF0sMikrTWF0aC5wb3coeS10YXJnZXRbMV0sMikpXHJcbiAgICAgICAgY29uc3QgdGltZTpudW1iZXIgPSBNYXRoLmZsb29yKGh5cG90ZW51c2UvdGhpcy5zcGVlZClcclxuICAgICAgICBjb25zdCB0d2VlbjpMYXlhLlR3ZWVuID0gTGF5YS5Ud2Vlbi50byh0aGlzLnN0YXRlLmVsZSwge3g6dGFyZ2V0WzBdLHk6dGFyZ2V0WzFdfSwgdGltZSwgbnVsbCxcclxuICAgICAgICAgICAgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLHRoaXMubW92ZSksMTAwKVxyXG5cclxuICAgIH1cclxuICAgIFxyXG5cclxuICAgIHByaXZhdGUgZ29hbCgpe1xyXG4gICAgICAgIHRoaXMudXBwZXJQYXRoLmRvY3Rvci5kYW1hZ2VkKHRoaXMuaGl0RG9jdG9yKVxyXG4gICAgfVxyXG59XHJcbiovIiwiaW1wb3J0IEdhbWVGaWVsZCBmcm9tIFwiLi4vU2NlbmVTY3JpcHQvTWFpbkZpZWxkXCJcclxuaW1wb3J0IHtiYXNpY30gZnJvbSBcIi4vUGVvcGxlXCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wZXJhdG9yIGV4dGVuZHMgYmFzaWMuUGVvcGxle1xyXG4gICAgY29uc3RydWN0b3IodXBwZXJQYXRoOkdhbWVGaWVsZCwgcG9zaXRpb246bnVtYmVyW10pe1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICB0aGlzLmluaXQoKVxyXG4gICAgICAgIC8vIHRoaXMuc3RhdGUuaW5pdCgpXHJcbiAgICAgICAgdGhpcy5wcmVzZW50LmluaXQodXBwZXJQYXRoLlVJU2V0LCBcIkJhc2ljL09wZXJhdG9yU2FtcGxlX0EucG5nXCIsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSlcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzKVxyXG4gICAgfVxyXG4gICAgaW5pdCgpe1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiIsIlxyXG4gICAgXHJcbiAgICBcclxuZXhwb3J0IG1vZHVsZSBiYXNpY3tcclxuICAgIGV4cG9ydCBjbGFzcyBQcmVzZW50e1xyXG4gICAgICAgIHByaXZhdGUgSW1hZ2VVUkw6c3RyaW5nXHJcbiAgICAgICAgcHJpdmF0ZSBmYXRoZXI6TGF5YS5TcHJpdGVcclxuICAgICAgICBwcml2YXRlIGVsZTpMYXlhLlNwcml0ZVxyXG4gICAgICAgIHByaXZhdGUgc3RhdGljIHNpemU6bnVtYmVyID0gOTBcclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdChmYXRoZXI6TGF5YS5TcHJpdGUsdXJsOnN0cmluZyA9IFwiQmFzaWMvT3BlcmF0b3JTYW1wbGVfQS5wbmdcIix4Om51bWJlcix5Om51bWJlcil7XHJcbiAgICAgICAgICAgIHRoaXMuZmF0aGVyID0gZmF0aGVyXHJcbiAgICAgICAgICAgIHRoaXMuSW1hZ2VVUkwgPSB1cmxcclxuICAgICAgICAgICAgdGhpcy5lbGUgPSBMYXlhLlNwcml0ZS5mcm9tSW1hZ2UodGhpcy5JbWFnZVVSTClcclxuICAgICAgICAgICAgdGhpcy5lbGUuc2l6ZShQcmVzZW50LnNpemUsUHJlc2VudC5zaXplKVxyXG4gICAgICAgICAgICB0aGlzLmZhdGhlci5hZGRDaGlsZCh0aGlzLmVsZSlcclxuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbihbeCx5XSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFBvc2l0aW9uKG5ld1Bvc2l0aW9uOm51bWJlcltdKXtcclxuICAgICAgICAgICAgdGhpcy5lbGUucG9zKG5ld1Bvc2l0aW9uWzBdLG5ld1Bvc2l0aW9uWzFdKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTdGF0ZXtcclxuICAgICAgICAvLyBwcml2YXRlIHN0YXRpYyBzaXplOm51bWJlciA9IDkwLy/lvoXkv67mlLlcclxuICAgICAgICBwcml2YXRlIHN0YXRpYyBoaXRTaXplOm51bWJlciA9IDgwXHJcblxyXG4gICAgICAgIHByaXZhdGUgbmFtZTpzdHJpbmdcclxuICAgICAgICBwcml2YXRlIEhQOm51bWJlclxyXG4gICAgICAgIHByaXZhdGUgTVA6bnVtYmVyXHJcblxyXG4gICAgICAgIHByaXZhdGUgX3g6bnVtYmVyID0gMFxyXG4gICAgICAgIHByaXZhdGUgX3k6bnVtYmVyID0gMFxyXG4gICAgICAgIHByaXZhdGUgX3NwZWVkOm51bWJlciA9IDBcclxuICAgICAgICBwcml2YXRlIF94U3BlZWQ6bnVtYmVyID0gMFxyXG4gICAgICAgIHByaXZhdGUgX3lTcGVlZDpudW1iZXIgPSAwXHJcbiAgICAgICAgcHJpdmF0ZSBfcGF0aDpudW1iZXJbXVtdID0gW11cclxuICAgICAgICBwcml2YXRlIGFpbVBvaW50ZXIgPSAtMVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHB1YmxpYyBoaXRCb3g6TGF5YS5SZWN0YW5nbGVcclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXQoZGF0YTphbnkscGF0aDpudW1iZXJbXVtdKXtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gZGF0YVtcIm5hbWVcIl1cclxuICAgICAgICAgICAgdGhpcy5fc3BlZWQgPSBkYXRhW1wic3BlZWRcIl1cclxuICAgICAgICAgICAgdGhpcy5pbml0UGF0aChwYXRoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBpbml0UGF0aChnZXRwYXRoOm51bWJlcltdW10pe1xyXG4gICAgICAgICAgICBnZXRwYXRoLmZvckVhY2goKGVsZSxpbmRleCk9PntcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhbaW5kZXhdID0gW11cclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhbaW5kZXhdWzBdID0gZWxlWzBdXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoW2luZGV4XVsxXSA9IGVsZVsxXVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRBaW0oKTpudW1iZXJbXXtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhdGhbdGhpcy5haW1Qb2ludGVyXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVwZGF0ZVBvc2l0aW9uKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IGFpbTpudW1iZXJbXSA9IHRoaXMuZ2V0QWltKClcclxuICAgICAgICAgICAgdGhpcy5feCA9IHRoaXMubW92ZVRvKHRoaXMuX3gsdGhpcy5feFNwZWVkLGFpbVswXSlcclxuICAgICAgICAgICAgdGhpcy5feSA9IHRoaXMubW92ZVRvKHRoaXMuX3ksdGhpcy5feVNwZWVkLGFpbVsxXSlcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coe3g6dGhpcy54LHk6dGhpcy55fSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgbW92ZVRvKGZyb250Om51bWJlciwgc2hpZnQ6bnVtYmVyLCBlbmQ6bnVtYmVyKTpudW1iZXIge1xyXG4gICAgICAgICAgICBpZihzaGlmdD09PTApe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyb250XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNoaWZ0PjA/XHJcbiAgICAgICAgICAgICAgICAoKGZyb250K3NoaWZ0KT5lbmQ/ZW5kOmZyb250K3NoaWZ0KTpcclxuICAgICAgICAgICAgICAgICgoZnJvbnQrc2hpZnQpPGVuZD9lbmQ6ZnJvbnQrc2hpZnQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaXNBcnJpdmVkKCk6Ym9vbGVhbntcclxuICAgICAgICAgICAgY29uc3QgYWltOm51bWJlcltdID0gdGhpcy5nZXRBaW0oKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5feCA9PT0gYWltWzBdICYmIHRoaXMuX3kgPT09IGFpbVsxXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gcHVibGljIGdldENlbnRyZSgpOm51bWJlcltde1xyXG4gICAgICAgIC8vICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgLy8gICAgIF1cclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQZW9wbGV7XHJcbiAgICAgICAgcHVibGljIHN0YXRlOlN0YXRlXHJcbiAgICAgICAgcHVibGljIHByZXNlbnQ6UHJlc2VudFxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBuZXcgU3RhdGUoKVxyXG4gICAgICAgICAgICB0aGlzLnByZXNlbnQgPSBuZXcgUHJlc2VudCgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRoaXRCb3goc2l6ZTpudW1iZXIscG9zaXRpb246bnVtYmVyW10pe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVwZGF0ZSgpe1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgR2FtZUNvbmZpZyBmcm9tIFwiLi9HYW1lQ29uZmlnXCI7XHJcbmNsYXNzIE1haW4ge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Ly/moLnmja5JREXorr7nva7liJ3lp4vljJblvJXmk45cdFx0XHJcblx0XHRpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XHJcblx0XHRlbHNlIExheWEuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCwgTGF5YVtcIldlYkdMXCJdKTtcclxuXHRcdExheWFbXCJQaHlzaWNzXCJdICYmIExheWFbXCJQaHlzaWNzXCJdLmVuYWJsZSgpO1xyXG5cdFx0TGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhLnN0YWdlLnNjYWxlTW9kZSA9IEdhbWVDb25maWcuc2NhbGVNb2RlO1xyXG5cdFx0TGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gR2FtZUNvbmZpZy5zY3JlZW5Nb2RlO1xyXG5cdFx0Ly/lhbzlrrnlvq7kv6HkuI3mlK/mjIHliqDovb1zY2VuZeWQjue8gOWcuuaZr1xyXG5cdFx0TGF5YS5VUkwuZXhwb3J0U2NlbmVUb0pzb24gPSBHYW1lQ29uZmlnLmV4cG9ydFNjZW5lVG9Kc29uO1xyXG5cclxuXHRcdC8v5omT5byA6LCD6K+V6Z2i5p2/77yI6YCa6L+HSURF6K6+572u6LCD6K+V5qih5byP77yM5oiW6ICFdXJs5Zyw5Z2A5aKe5YqgZGVidWc9dHJ1ZeWPguaVsO+8jOWdh+WPr+aJk+W8gOiwg+ivlemdouadv++8iVxyXG5cdFx0aWYgKEdhbWVDb25maWcuZGVidWcgfHwgTGF5YS5VdGlscy5nZXRRdWVyeVN0cmluZyhcImRlYnVnXCIpID09IFwidHJ1ZVwiKSBMYXlhLmVuYWJsZURlYnVnUGFuZWwoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXSkgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0uZW5hYmxlKCk7XHJcblx0XHRpZiAoR2FtZUNvbmZpZy5zdGF0KSBMYXlhLlN0YXQuc2hvdygpO1xyXG5cdFx0TGF5YS5hbGVydEdsb2JhbEVycm9yID0gdHJ1ZTtcclxuXHJcblx0XHQvL+a/gOa0u+i1hOa6kOeJiOacrOaOp+WItu+8jHZlcnNpb24uanNvbueUsUlEReWPkeW4g+WKn+iDveiHquWKqOeUn+aIkO+8jOWmguaenOayoeacieS5n+S4jeW9seWTjeWQjue7rea1geeoi1xyXG5cdFx0TGF5YS5SZXNvdXJjZVZlcnNpb24uZW5hYmxlKFwidmVyc2lvbi5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vblZlcnNpb25Mb2FkZWQpLCBMYXlhLlJlc291cmNlVmVyc2lvbi5GSUxFTkFNRV9WRVJTSU9OKTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XHJcblx0XHRMYXlhLkF0bGFzSW5mb01hbmFnZXIuZW5hYmxlKFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkNvbmZpZ0xvYWRlZCkpO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+WKoOi9vUlEReaMh+WumueahOWcuuaZr1xyXG5cdFx0R2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBEb2N0b3J7XHJcbiAgICBwcml2YXRlIEhQOm51bWJlclxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuSFAgPSAyXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRhbWFnZWQoaGl0Om51bWJlcik6RG9jdG9ye1xyXG4gICAgICAgIHRoaXMuSFAgLT0gaGl0XHJcbiAgICAgICAgaWYgKHRoaXMuSFAgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5kZWFkKClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRlYWQoKTp2b2lke1xyXG4gICAgICAgIGFsZXJ0KFwi5L2g55qE6ISR5a2Q6KKr5ZCD5o6J5LqGXCIpXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgR2FtZUZpZWxkIGZyb20gXCIuL01haW5GaWVsZFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRze1xyXG4gICAgcHVibGljIE1hcDpBcnJheTxBcnJheTxMYXlhLlNwcml0ZT4+ID0gW11cclxuICAgIHB1YmxpYyBSZWNNYXA6QXJyYXk8QXJyYXk8TGF5YS5SZWN0YW5nbGU+PiA9IFtdXHJcbiAgICBwcml2YXRlIHN0YXRpYyBzaXplOm51bWJlciA9IDkwXHJcbiAgICBwcml2YXRlIGZhdGhlcjpMYXlhLlNwcml0ZVxyXG4gICAgcHJpdmF0ZSB1cHBlclBhdGg6R2FtZUZpZWxkXHJcbiAgICBwcml2YXRlIGRhdGE6SlNPTlxyXG4gICAgY29uc3RydWN0b3IoZmF0aGVyOkxheWEuU3ByaXRlLCB1cHBlclBhdGg6R2FtZUZpZWxkLCBkYXRhOkpTT04pe1xyXG4gICAgICAgIHRoaXMuZmF0aGVyID0gZmF0aGVyXHJcbiAgICAgICAgdGhpcy51cHBlclBhdGggPSB1cHBlclBhdGhcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhXHJcbiAgICAgICAgbGV0IGNvbHMgPSBkYXRhW1wiZ3JvdW5kXCJdW1wid2lkdGhcIl0sXHJcbiAgICAgICAgcmF3cyA9IGRhdGFbXCJncm91bmRcIl1bXCJoZWlnaHRcIl1cclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHJhd3M7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLk1hcFtuXSA9IFtdXHJcbiAgICAgICAgICAgIHRoaXMuUmVjTWFwW25dID0gW11cclxuICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBjb2xzOyBtICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdEVsZW1lbnQobixtKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuUmVjTWFwKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpbml0RWxlbWVudChyYXc6bnVtYmVyLGNvdW50Om51bWJlcil7XHJcbiAgICAgICAgY29uc3QgY3VycmVudDpMYXlhLlNwcml0ZSA9IExheWEuU3ByaXRlLmZyb21JbWFnZShcIkJhc2ljL1JlYy5wbmdcIik7Ly/ovb3lhaXlm77niYdcclxuICAgICAgICBjdXJyZW50LnBvcyhHcmlkcy5zaXplKmNvdW50LCBHcmlkcy5zaXplKnJhdylcclxuICAgICAgICAgICAgLnNpemUoR3JpZHMuc2l6ZSxHcmlkcy5zaXplKS8v5L6d5o2uc3RhdGljIHNpemXlsZ7mgKfmlLnlj5jlpKflsI/jgIHkvp3mja7nvJblj7fmlLnlj5jkvY3nva5cclxuICAgICAgICBjdXJyZW50Lm5hbWUgPSBgZ3JpZCR7cmF3fS0ke2NvdW50fWAvL+mHjeWRveWQjeS4uiBncmlk6KGM5pWwLeWIl+aVsFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuTWFwW3Jhd11bY291bnRdID0gY3VycmVudFxyXG4gICAgICAgIHRoaXMuUmVjTWFwW3Jhd11bY291bnRdID0gbmV3IExheWEuUmVjdGFuZ2xlKGN1cnJlbnQueCxjdXJyZW50LnksR3JpZHMuc2l6ZSxHcmlkcy5zaXplKVxyXG4gICAgICAgIGN1cnJlbnQub24oTGF5YS5FdmVudC5DTElDSywgdGhpcy51cHBlclBhdGgsIHRoaXMudXBwZXJQYXRoLmFkZE9wZXJhdG9yLCBbdGhpcy5nZXRQbGFjZShjb3VudCxyYXcpXSkvL+iuvuWumum8oOagh+eCueWHu+S6i+S7tlxyXG4gICAgICAgIC8v5ZCRR2FtZUZpZWxk5Lit5re75YqgT3BlcmF0b3Llrp7kvotcclxuICAgICAgICB0aGlzLmZhdGhlci5hZGRDaGlsZChjdXJyZW50KVxyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYWNlKGNvdW50Om51bWJlcixyYXc6bnVtYmVyKTpudW1iZXJbXXtcclxuICAgICAgICAvL3JhdzrnrKzlh6DooYxcclxuICAgICAgICAvL2NvdW50OuesrOWHoOS4qlxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHRoaXMuUmVjTWFwW3Jhd11bY291bnRdLngsXHJcbiAgICAgICAgICAgIHRoaXMuUmVjTWFwW3Jhd11bY291bnRdLnlcclxuICAgICAgICBdXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCB7dWl9IGZyb20gXCIuLi91aS9sYXlhTWF4VUlcIlxyXG5pbXBvcnQgRW5lbXkgZnJvbSBcIi4uL0dhbWVPYmovRW5lbXlcIlxyXG5pbXBvcnQge0dyaWRzfSBmcm9tIFwiLi9Hcm91bmRcIlxyXG5pbXBvcnQgRG9jdG9yIGZyb20gXCIuL0RvY3RvclwiXHJcbmltcG9ydCBPcGVyYXRvciBmcm9tIFwiLi4vR2FtZU9iai9PcGVyYXRvclwiO1xyXG5pbXBvcnQge1N0cnVjfSBmcm9tIFwiLi4vRGF0YVN0cnVjdHVyZVwiXHJcbmNvbnN0IHtsb2d9ID0gY29uc29sZTtcclxuY29uc3QgZ2FtZVNldF9qc29uOnN0cmluZyA9IFwiLi9EYXRhYmFzZS9HYW1lU2V0Lmpzb25cIiwgZW5lbXlEYXRhYmFzZTpzdHJpbmcgPSBcIi4vRGF0YWJhc2UvRW5lbXlEYXRhYmFzZS5qc29uXCJcclxudHlwZSB0aW1lTm9kZSA9IHt0aW1lOm51bWJlciwgdHlwZTphbnksIHBhdGg6bnVtYmVyW11bXX1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lRmllbGQgZXh0ZW5kcyB1aS5NYWluRmllbGRVSXtcclxuICAgIC8qKlxyXG4gICAgICogc2JcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdyaWRzOkdyaWRzXHJcbiAgICBwdWJsaWMgZG9jdG9yOkRvY3RvclxyXG4gICAgcHVibGljIG9wZXJhdG9yczpBcnJheTxPcGVyYXRvcj4gPSBbXVxyXG4gICAgcHVibGljIGVuZW1pZXM6QXJyYXk8RW5lbXk+ID0gW11cclxuICAgIHByaXZhdGUgb25LZXlkb3duOkZ1bmN0aW9uXHJcblxyXG4gICAgcHVibGljIEdhbWVTZXQ6SlNPTlxyXG4gICAgcHVibGljIEVuZW15RGF0YWJhc2U6SlNPTlxyXG4gICAgcHVibGljIFRpbWVUYWJsZTpTdHJ1Yy5Qb2ludGVyTGlzdDx0aW1lTm9kZT5cclxuXHJcbiAgICBwcml2YXRlIHRpbWU6bnVtYmVyXHJcblxyXG5cclxuXHJcbiAgICAvLyBwdWJsaWMgZnJhbWVMb29wOkxheWEudGltZXJcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXNcclxuICAgICAgICBMYXlhLmxvYWRlci5sb2FkKFtnYW1lU2V0X2pzb24sIGVuZW15RGF0YWJhc2VdLCBMYXlhLkhhbmRsZXIuY3JlYXRlKHRoaXMsIHRoaXMub25Mb2FkZWQpLG51bGwsTGF5YS5Mb2FkZXIuSlNPTilcclxuICAgICAgICAvL+WKoOi9veaVjOS6uuaVsOaNruW6k1xyXG4gICAgICAgIC8v5Yqg6L295Zyw5Zu+ICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uTG9hZGVkKCl7Ly/liqDovb3lrozmiJDlkI7miafooYzmraTlh73mlbBcclxuXHJcbiAgICAgICAgdGhpcy5HYW1lU2V0ID0gTGF5YS5sb2FkZXIuZ2V0UmVzKGdhbWVTZXRfanNvbikvL+iOt+WPluW3suWKoOi9veeahOWcsOWbvlxyXG4gICAgICAgIHRoaXMuRW5lbXlEYXRhYmFzZSA9IExheWEubG9hZGVyLmdldFJlcyhlbmVteURhdGFiYXNlKS8v6I635Y+W5bey5Yqg6L2955qE5pWM5Lq65pWw5o2uXHJcbiAgICAgICAgdGhpcy5pbml0VGltZVRhYmxlKCkvL+S7juWcsOWbvuaVsOaNruS4reWKoOi9veaXtumXtOihqFxyXG4gICAgICAgIHRoaXMudGltZSA9IDAvL+WwhuaXtumXtOiuvuS4ujA75pe26Ze05Y2V5L2N5Li65binXHJcbiAgICAgICAgdGhpcy5ncmlkcyA9IG5ldyBHcmlkcyh0aGlzLlVJU2V0LHRoaXMsdGhpcy5HYW1lU2V0KS8v5L6d5o2u5bey5Yqg6L2955qE5Zyw5Zu+5pWw5o2u77yM6K6+572u5Zyw5Zu+XHJcbiAgICAgICAgdGhpcy5kb2N0b3IgPSBuZXcgRG9jdG9yKCkvL+WIneWni+WMluWIgOWuouS7luWvueixoVxyXG4gICAgICAgIHRoaXMua2V5Qm9hcmRFdmVudFNldHVwKCkvL+WIneWni+WMlumUruebmOS6i+S7tlxyXG4gICAgICAgIC8qKua1i+ivleS7o+eggSAqL1xyXG4gICAgICAgIC8vIHRoaXMuZW5lbWllcy5wdXNoKG5ldyBFbmVteSh0aGlzLlVJU2V0LCB0aGlzLCBcImJ1ZzBcIiwgW10pKVxyXG4gICAgICAgIC8qKua1i+ivleS7o+eggUVuZCAqL1xyXG5cclxuICAgICAgICBMYXlhLnRpbWVyLmxvb3AoMjAsdGhpcyx0aGlzLmZyYW1lTG9vcCkvL+W8gOWQr+a4uOaIj+W4p+W+queOr1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdFRpbWVUYWJsZSgpe1xyXG4gICAgICAgIHRoaXMuVGltZVRhYmxlID0gbmV3IFN0cnVjLlBvaW50ZXJMaXN0PHRpbWVOb2RlPigpXHJcbiAgICAgICAgY29uc3QgcmF3VGFibGU6QXJyYXk8YW55PiA9IHRoaXMuR2FtZVNldFtcInRpbWV0YWJsZVwiXVxyXG4gICAgICAgIHJhd1RhYmxlLmZvckVhY2goKGVsZSk9PntcclxuICAgICAgICAgICAgdGhpcy5UaW1lVGFibGUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0aW1lOmVsZS50aW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZTp0aGlzLkVuZW15RGF0YWJhc2VbZWxlLnR5cGVdLFxyXG4gICAgICAgICAgICAgICAgcGF0aDp0aGlzLkdhbWVTZXRbXCJwYXRoc1wiXVtlbGUucGF0aF1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIGxvZyh0aGlzLlRpbWVUYWJsZSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGtleUJvYXJkRXZlbnRTZXR1cCgpe1xyXG4gICAgICAgIHRoaXMub25LZXlkb3duID0gKGU6TGF5YS5FdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAvKirmtYvor5Xku6PnoIEgKi9cclxuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gTGF5YS5LZXlib2FyZC5FKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmVuZW1pZXMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gTGF5YS5LZXlib2FyZC5GKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmVuZW1pZXNbMF0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyoq5rWL6K+V5Luj56CBRW5kICovXHJcbiAgICAgICAgfVxyXG4gICAgICAgIExheWEuc3RhZ2Uub24oTGF5YS5FdmVudC5LRVlfRE9XTix0aGlzLHRoaXMub25LZXlkb3duKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgZnJhbWVMb29wKCl7Ly/mr4/luKfpg73kvJrmiafooYznmoTku6PnoIHlnZdcclxuICAgICAgICBpZiAodGhpcy5UaW1lVGFibGUucmVhZCgpICYmIHRoaXMudGltZSA9PT0gdGhpcy5UaW1lVGFibGUucmVhZCgpLnRpbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmVtaWVzLnB1c2gobmV3IEVuZW15KHRoaXMuVUlTZXQsdGhpcyxcclxuICAgICAgICAgICAgICAgIHRoaXMuVGltZVRhYmxlLnJlYWQoKS50eXBlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5UaW1lVGFibGUucmVhZCgpLnBhdGgpKVxyXG4gICAgICAgICAgICB0aGlzLlRpbWVUYWJsZS5zdGVwKClcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0aGlzLm9wZXJhdG9ycy5mb3JFYWNoKChlbGUpPT57Ly/miafooYzmiYDmnInlubLlkZjlr7nosaHnmoR1cGRhdGXmlrnms5VcclxuICAgICAgICAgICAgZWxlLnVwZGF0ZSgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5lbmVtaWVzLmZvckVhY2goKGVsZSk9PnsvL+aJp+ihjOaJgOacieaVjOS6uuWvueixoeeahHVwZGF0ZeaWueazlVxyXG4gICAgICAgICAgICBlbGUudXBkYXRlKClcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMudGltZSArK1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgYWRkT3BlcmF0b3IocGxhY2U6bnVtYmVyW10pey8v5Zyo5Zyw5Zu+5LiK5re75Yqg5bmy5ZGYXHJcbiAgICAgICAgLy/mraTmlrnms5XooqvkvZzkuLrlm57osIPlh73mlbDmj5Dkvpvnu5l0aGlzLmdyaWRz5a+56LGh77yM5Zyo54K55Ye75Zyw5Zu+56m65qC85pe25omn6KGMXHJcblxyXG4gICAgICAgIHRoaXMub3BlcmF0b3JzLnB1c2gobmV3IE9wZXJhdG9yKHRoaXMscGxhY2UpKVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxufSIsIi8qKlRoaXMgY2xhc3MgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgTGF5YUFpcklERSwgcGxlYXNlIGRvIG5vdCBtYWtlIGFueSBtb2RpZmljYXRpb25zLiAqL1xuaW1wb3J0IFZpZXc9TGF5YS5WaWV3O1xyXG5pbXBvcnQgRGlhbG9nPUxheWEuRGlhbG9nO1xyXG5pbXBvcnQgU2NlbmU9TGF5YS5TY2VuZTtcbnZhciBSRUc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xuZXhwb3J0IG1vZHVsZSB1aSB7XHJcbiAgICBleHBvcnQgY2xhc3MgTWFpbkZpZWxkVUkgZXh0ZW5kcyBTY2VuZSB7XHJcblx0XHRwdWJsaWMgVUlTZXQ6TGF5YS5TcHJpdGU7XG4gICAgICAgIGNvbnN0cnVjdG9yKCl7IHN1cGVyKCl9XHJcbiAgICAgICAgY3JlYXRlQ2hpbGRyZW4oKTp2b2lkIHtcclxuICAgICAgICAgICAgc3VwZXIuY3JlYXRlQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkU2NlbmUoXCJNYWluRmllbGRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUkVHKFwidWkuTWFpbkZpZWxkVUlcIixNYWluRmllbGRVSSk7XHJcbn1cciJdfQ==
