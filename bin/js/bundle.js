var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Game_1 = require("./SceneScript/Game");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/Game.ts", Game_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1400;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/Game":4,"./SceneScript/Loading":11}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var SceneManager_1 = require("./SceneManager");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        new SceneManager_1.default();
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./SceneManager":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventCentre_1 = require("./Toybox/EventCentre");
var Database_1 = require("./Toybox/Database");
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        var _this = this;
        this.loadingScene = "LoadingScene.scene";
        this.gameScene = "GameScene.scene";
        EventCentre_1.default.init();
        Database_1.default.init();
        Laya.Scene.open(this.loadingScene);
        EventCentre_1.default.inst.once("Init", "Regular", this, function () {
            Laya.Scene.open(_this.gameScene);
        });
    }
    return SceneManager;
}());
exports.default = SceneManager;
},{"./Toybox/Database":13,"./Toybox/EventCentre":14}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var GameFieldUI_1 = require("./GameObj/GameFieldUI");
var EnemyCentre_1 = require("./GameObj/EnemyCentre");
var MassEffect_1 = require("../Toybox/MassEffect");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super.call(this) || this;
        _this._time = 0;
        GameFieldUI_1.default.init(_this.scene); //ui初始化
        EnemyCentre_1.default.init(); //敌人管理类初始化
        MassEffect_1.default.init(_this); //物理类初始化
        MassEffect_1.default.i.test(); //物理类进行测试 可移除
        Laya.timer.loop(17, _this, _this.frameWork); //开始帧循环
        return _this;
    }
    //这个变量代表游戏从开始到现在运行了多少帧
    Game.prototype.frameWork = function () {
        EnemyCentre_1.default.i.frameWork(this._time);
        GameFieldUI_1.default.i.frameWork();
        MassEffect_1.default.i.frameWork();
        this._time += 1;
    };
    return Game;
}(layaMaxUI_1.ui.GameSceneUI));
exports.default = Game;
},{"../Toybox/MassEffect":15,"../ui/layaMaxUI":17,"./GameObj/EnemyCentre":5,"./GameObj/GameFieldUI":6}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Enemy_1 = require("./People_stuff/Enemy");
var DataStructure_1 = require("../../Toybox/DataStructure");
var Database_1 = require("../../Toybox/Database");
var EnemyCentre = /** @class */ (function () {
    function EnemyCentre() {
        this._enemyGroup = [];
        //Start
        //初始化时间轴
        var timeData = Database_1.default.inst.getTimetable();
        this._timetable = new DataStructure_1.Struc.PointerList(timeData);
        //初始化时间轴
        //End
    }
    EnemyCentre.init = function () {
        this.i = new EnemyCentre();
        this.init = function () { };
    };
    EnemyCentre.prototype.frameWork = function (time) {
        /*
        这个函数是EnemyCentre类每帧所做的事情
        time是此次游戏自游戏开始至这个函数运行之时已经经过的帧数
        在预期中，这个数值会从0开始，每帧+1
        */
        if (!this._timetable.exceeding && time == this._timetable.read()["time"]) {
            //空值检查 && 当前时间与时间表上的时间一致
            var data = this._timetable.read();
            this.createEnemy(data["type"], data["path"]);
            this._timetable.step();
        }
        this._enemyGroup.forEach(function (enemy) {
            enemy.frameWork();
        });
    };
    EnemyCentre.prototype.createEnemy = function (enemyID, pathID) {
        var enemy = new Enemy_1.default(enemyID, pathID);
        this._enemyGroup.push(enemy);
    };
    return EnemyCentre;
}());
exports.default = EnemyCentre;
},{"../../Toybox/DataStructure":12,"../../Toybox/Database":13,"./People_stuff/Enemy":7}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Database_1 = require("../../Toybox/Database");
var SideField = /** @class */ (function () {
    function SideField(scene) {
    }
    return SideField;
}());
var CentreField = /** @class */ (function () {
    function CentreField(scene) {
        var data = Database_1.default.inst.getGround();
        var _a = [data["width"], data["height"], data["size"]], width = _a[0], height = _a[1], size = _a[2];
        this._size = size;
        this._width = width;
        this._height = height;
        this._scene = scene;
        //Start
        //创建地图方格
        this._blocks = [];
        for (var x = 0; x < width; x += 1) {
            this._blocks[x] = [];
            for (var y = 0; y < height; y += 1) {
                var block = Laya.Sprite.fromImage("Basic/Rec.png");
                scene.getChildByName("UISet").addChild(block);
                block.size(size, size).pos(x * size, y * size);
                this._blocks[x][y] = block;
            }
        }
        //创建地图方格
        //End
    }
    CentreField.prototype.CreateEnemy = function (imgURL, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        var sprite = Laya.Sprite.fromImage(imgURL); //创建sprite
        this._scene.getChildByName("UISet").addChild(sprite); //插入中心区域
        sprite.size(Database_1.default.inst.UnitSize, Database_1.default.inst.UnitSize); //根据数据库提供的常量设置大小
        sprite.pos(x, y); //确定位置
        return sprite;
    };
    CentreField.prototype.frameWork = function () {
    };
    return CentreField;
}());
var GameFieldUI = /** @class */ (function () {
    function GameFieldUI(scene) {
        this._side = new SideField(scene);
        this._centre = new CentreField(scene);
        this._scene = scene;
    }
    GameFieldUI.init = function (scene) {
        this.i = new GameFieldUI(scene);
        this.init = function () { };
    };
    Object.defineProperty(GameFieldUI.prototype, "Centre", {
        get: function () {
            return this._centre;
        },
        enumerable: true,
        configurable: true
    });
    GameFieldUI.prototype.frameWork = function () {
        this._centre.frameWork();
    };
    return GameFieldUI;
}());
exports.default = GameFieldUI;
},{"../../Toybox/Database":13}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var Database_1 = require("../../../Toybox/Database");
var DataStructure_1 = require("../../../Toybox/DataStructure");
var Present_1 = require("./Present");
var State_1 = require("./State");
var myMath_1 = require("../../../Toybox/myMath");
/**
 * 敌人的表现类
 */
var EnemyPst = /** @class */ (function (_super) {
    __extends(EnemyPst, _super);
    function EnemyPst(url) {
        return _super.call(this, url) || this;
    }
    EnemyPst.prototype.perform = function (state) {
        this._sprite.pos(state.x, state.y);
    };
    return EnemyPst;
}(Present_1.default));
/**
 * 敌人的状态类
 */
var EnemyStt = /** @class */ (function (_super) {
    __extends(EnemyStt, _super);
    function EnemyStt(data, pathID) {
        var _this = _super.call(this, data) || this;
        _this.out = false;
        //初始化路径
        _this._path = new DataStructure_1.Struc.PointerList();
        var rawPath = Database_1.default.inst.getPath(pathID);
        rawPath.forEach(function (ele, index) {
            _this._path.push({ x: ele[0], y: ele[1] });
        });
        //初始化位置
        _this._x = _this._path.first.x;
        _this._y = _this._path.first.y;
        //初始化速度
        _this._speed = data["speed"];
        //初始化轴速度
        _this._resetAxisSpeed();
        return _this;
    }
    EnemyStt.prototype._resetAxisSpeed = function () {
        if (this._path.atEnd) {
            console.log("Can't reset speed");
            return;
        }
        var next = this._path.next();
        var _a = [next.x - this._x, next.y - this._y], x_dis = _a[0], y_dis = _a[1];
        var distance = Math.sqrt(Math.pow(x_dis, 2) + Math.pow(y_dis, 2));
        var time = distance / this._speed;
        this._xSpeed = x_dis / time;
        this._ySpeed = y_dis / time;
    };
    EnemyStt.prototype.setPosition = function (x, y) {
        this._x = x;
        this._y = y;
    };
    EnemyStt.prototype.nextTarget = function () {
        if (this._path.atEnd) {
            return;
        }
        this._path.step();
        this._resetAxisSpeed();
    };
    Object.defineProperty(EnemyStt.prototype, "isArrived", {
        get: function () {
            return (this._x === this._path.next().x) && (this._y === this._path.next().y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "xSpeed", {
        get: function () {
            return this._xSpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "ySpeed", {
        get: function () {
            return this._ySpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "target", {
        get: function () {
            return this._path.next();
        },
        enumerable: true,
        configurable: true
    });
    return EnemyStt;
}(State_1.default));
/**
 * 敌人的逻辑类
 */
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    /**
     *
     * @param id 敌人id，用于获取敌人数据
     * @param pathID 路径id，用于获取路径数据
     */
    function Enemy(id, pathID) {
        var _this = _super.call(this) || this;
        //获取数据和路径
        var data = Database_1.default.inst.getEnemy(id);
        var path = Database_1.default.inst.getPath(pathID);
        _this._data = data;
        _this._path = new DataStructure_1.Struc.PointerList(path);
        //创建表现类和数据类
        _this._present = new EnemyPst(data["img"]);
        _this._state = new EnemyStt(data, pathID);
        //创建碰撞箱
        //设置监听事件
        console.log(_this);
        return _this;
    }
    Enemy.prototype.frameWork = function () {
        if (this._state.out) {
            return;
        }
        //进行移动
        if (this._state.isArrived) {
            this._state.nextTarget();
        }
        var _a = this._state, x = _a.x, y = _a.y, xSpeed = _a.xSpeed, ySpeed = _a.ySpeed, target = _a.target;
        if (target === undefined) {
            this._state.out = true;
            return;
        }
        var newx = myMath_1.default.moveTo(x, xSpeed, target.x);
        var newy = myMath_1.default.moveTo(y, ySpeed, target.y);
        this._state.setPosition(newx, newy);
        //刷新位置
        this._present.perform(this._state);
    };
    return Enemy;
}(People_1.default));
exports.default = Enemy;
},{"../../../Toybox/DataStructure":12,"../../../Toybox/Database":13,"../../../Toybox/myMath":16,"./People":8,"./Present":9,"./State":10}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People = /** @class */ (function () {
    function People() {
    }
    return People;
}());
exports.default = People;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameFieldUI_1 = require("../GameFieldUI");
/**
 * 所有表现类的基类
 */
var Present = /** @class */ (function () {
    function Present(url) {
        this._sprite = GameFieldUI_1.default.i.Centre.CreateEnemy(url);
    }
    Object.defineProperty(Present.prototype, "sprite", {
        get: function () {
            return this._sprite;
        },
        enumerable: true,
        configurable: true
    });
    return Present;
}());
exports.default = Present;
},{"../GameFieldUI":6}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State = /** @class */ (function () {
    function State(data) {
    }
    return State;
}());
exports.default = State;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var EventCentre_1 = require("../Toybox/EventCentre");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
        EventCentre_1.default.inst.event("Init", "Regular");
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../Toybox/EventCentre":14,"../ui/layaMaxUI":17}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MapNode = /** @class */ (function () {
    function MapNode(key, value) {
        this.key = key;
        this.value = value;
    }
    return MapNode;
}());
var Node = /** @class */ (function () {
    function Node(item, next) {
        this.item = item;
        this.next = next;
    }
    return Node;
}());
var Struc;
(function (Struc) {
    var LinkList = /** @class */ (function () {
        function LinkList() {
            this._head = new Node(null, null);
            this._tail = new Node(null, null);
        }
        Object.defineProperty(LinkList.prototype, "length", {
            //基础属性
            get: function () {
                var result = 0;
                var current = this._head;
                while (current.next !== null) {
                    result += 1;
                    current = current.next;
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkList.prototype, "isEmpty", {
            get: function () {
                return this._head.next === null;
            },
            enumerable: true,
            configurable: true
        });
        //增删改查
        //增
        LinkList.prototype.push = function (item) {
            var last = new Node(item, null);
            if (this.isEmpty) {
                this._head.next = last;
                this._tail.next = last;
            }
            else {
                this._tail.next.next = last;
                this._tail.next = last;
            }
        };
        LinkList.prototype.unshift = function (item) {
            var first = new Node(item, null);
            if (this.isEmpty) {
                this._tail.next = first;
                this._head.next = first;
            }
            else {
                first.next = this._head.next.next;
                this._head.next = first;
            }
        };
        LinkList.prototype.insert = function (index, item) {
            if (index < 0 || index > this.length) { //这句不一样
                return false;
            }
            if (index === this.length) {
                this.push(item);
                return true;
            }
            var current = this._head; //这句和其他遍历是不一样的，因为要选取到选定位置的前面一格
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.next = new Node(item, current.next);
            return true;
        };
        //删
        LinkList.prototype.remove = function (index) {
            if (index < 0 || index >= this.length) {
                return null;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            var item = current.item;
            current = null;
            return current.item;
        };
        LinkList.prototype.shift = function () {
            if (this.isEmpty) {
                return null;
            }
            var item = this._head.next.item;
            this._head.next = this._head.next.next;
            if (this.isEmpty) {
                this._tail.next = null;
            }
            return item;
        };
        //改
        LinkList.prototype.write = function (index, item) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.item = item;
        };
        //查
        LinkList.prototype.read = function (index) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            return current.item;
        };
        LinkList.prototype.search = function (item) {
            var result = [];
            this.foreach(function (ele, index) {
                if (ele === item) {
                    result.push(index);
                }
            });
            return result;
        };
        //高阶函数
        LinkList.prototype.foreach = function (f) {
            var current = this._head.next;
            var num = 0;
            while (current !== null) {
                f(current.item, num, this);
                current = current.next;
                num += 1;
            }
        };
        /**
         * 请暂时不要使用这个函数，因为我也不知道它会不会爆炸
         * 除非你读过这个函数的源代码
         * @param f 判断元素优先级的回调函数
         * @param increase 是否升序，默认升序
         * @returns 返回一个排序的链表
         */
        LinkList.prototype.sortby = function (f, increase) {
            if (increase === void 0) { increase = true; }
            var priority = new LinkList();
            var sorted = new LinkList();
            priority.push(-0);
            sorted.push(null);
            var compare = increase ? function (a, b) { return a < b; } : function (a, b) { return a > b; };
            this.foreach(function (ele) {
                var currentPri = f(ele);
                var node = sorted._head.next;
                var priNode = priority._head.next;
                var foundPlace = false;
                while (node.next !== null) {
                    // if (currentPri < priNode.next.item) {
                    if (compare(currentPri, priNode.next.item)) {
                        node.next = new Node(ele, node.next);
                        priNode.next = new Node(currentPri, priNode.next);
                        foundPlace = true;
                        break;
                    }
                    node = node.next;
                    priNode = priNode.next;
                }
                if (!foundPlace) {
                    sorted.push(ele);
                    priority.push(currentPri);
                }
            });
            sorted.shift();
            return sorted;
        };
        return LinkList;
    }());
    Struc.LinkList = LinkList;
    var Map = /** @class */ (function () {
        function Map() {
            this._list = [];
        }
        Map.prototype.get = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return ele.value;
                }
            }
            return null;
        };
        Map.prototype.getKeyByVal = function (val) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.value === val) {
                    return ele.key;
                }
            }
            return null;
        };
        Map.prototype.keyExist = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return true;
                }
            }
            return false;
        };
        Map.prototype.set = function (key, value) {
            for (var n = 0; n < this._list.length; n += 1) {
                if (this._list[n].key === key) {
                    this._list[n].value = value;
                    return false;
                }
            }
            this._list.push(new MapNode(key, value));
            return true;
        };
        Map.prototype.batchSet = function (keys, values) {
            if (keys.length !== values.length) {
                return false;
            }
            for (var n = 0; n < keys.length; n += 1) {
                this.set(keys[n], values[n]);
            }
            return true;
        };
        Map.prototype.remove = function (key) {
            var count = 0;
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    this._list.splice(count, 1);
                    return true;
                }
                count += 1;
            }
            return false;
        };
        Object.defineProperty(Map.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Map.prototype.foreach = function (f) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                f(ele.key, ele.value);
            }
            return;
        };
        Map.prototype.filter = function (f) {
            var result = new Map();
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (f(ele.key, ele.value)) {
                    result.set(ele.key, ele.value);
                }
            }
            return result;
        };
        return Map;
    }());
    Struc.Map = Map;
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this._list = [];
            this._pointer = 0;
            source.forEach(function (ele) {
                _this._list.push(ele);
            });
        }
        Object.defineProperty(PointerList.prototype, "exceeding", {
            get: function () {
                return this._pointer >= this._list.length || this._pointer < 0;
            },
            enumerable: true,
            configurable: true
        });
        /*
        以下注释中，把数组看作横向排列的一系列元素
        index = 0的元素在最左侧
        */
        PointerList.prototype.read = function () {
            return this._list[this._pointer];
        };
        PointerList.prototype.step = function () {
            this._pointer += 1;
            return this.read();
        };
        PointerList.prototype.to = function (place) {
            this._pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this._list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this._list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            //读取位于当前pointer所指的元素右边若干格的元素
            //shift默认为1，即当前pointer右边相邻的元素
            //shift为负数时获取左侧的元素
            return this._list[this._pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "last", {
            get: function () {
                return this._list[this._list.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "first", {
            get: function () {
                return this._list[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "pointer", {
            get: function () {
                return this._pointer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "atEnd", {
            get: function () {
                return this._pointer === this._list.length - 1;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gameSet_URL = "./Database/GameSet.json", enemyDatabase_URL = "./Database/EnemyDatabase.json", operatorDatabase_URL = "./Database/OperatorDatabase.json";
var Database = /** @class */ (function () {
    function Database() {
        var _this = this;
        Laya.loader.load([enemyDatabase_URL, operatorDatabase_URL, gameSet_URL], Laya.Handler.create(this, function () {
            _this._enemyData = Laya.loader.getRes(enemyDatabase_URL);
            _this._operatorData = Laya.loader.getRes(operatorDatabase_URL);
            _this._gameSet = Laya.loader.getRes(gameSet_URL);
        }));
        console.log(this);
    }
    //直接public static inst:Database = new Database(),是否可以在类装载时就创建所需的单例?
    Database.init = function () {
        this.inst = new Database();
        this.init = function () { };
    };
    Database.prototype.getPath = function (pathName) {
        return this._gameSet["paths"][pathName];
    };
    Database.prototype.getEnemy = function (enemyName) {
        return this._enemyData[enemyName];
    };
    Database.prototype.getOprt = function (operatorName) {
        return this._operatorData[operatorName];
    };
    Database.prototype.getGround = function () {
        return this._gameSet["ground"];
    };
    Database.prototype.getTimetable = function () {
        return this._gameSet["timetable"];
    };
    Object.defineProperty(Database.prototype, "UnitSize", {
        get: function () {
            return this.getGround().size;
        },
        enumerable: true,
        configurable: true
    });
    return Database;
}());
exports.default = Database;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataStructure_1 = require("./DataStructure");
var FieldName = /** @class */ (function () {
    function FieldName() {
    }
    Object.defineProperty(FieldName.prototype, "Global", {
        get: function () {
            return "Global";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldName.prototype, "People", {
        get: function () {
            return "People";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldName.prototype, "CreateEnemySprite", {
        get: function () {
            return "CreateEmemySprite";
        },
        enumerable: true,
        configurable: true
    });
    return FieldName;
}());
var TypeName = /** @class */ (function () {
    function TypeName() {
    }
    Object.defineProperty(TypeName.prototype, "Any", {
        get: function () {
            return "Any";
        },
        enumerable: true,
        configurable: true
    });
    return TypeName;
}());
var EventCentre = /** @class */ (function () {
    function EventCentre() {
        this._eventFields = new DataStructure_1.Struc.Map();
    }
    EventCentre.init = function () {
        EventCentre.inst = new EventCentre();
        this.init = function () { };
    };
    ;
    EventCentre.prototype.on = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).on(type, caller, method, args);
    };
    EventCentre.prototype.event = function (field, type, args) {
        if (!this._eventFields.keyExist(field)) {
            return;
        }
        this._eventFields.get(field).event(type, args);
    };
    EventCentre.prototype.once = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).once(type, caller, method, args);
    };
    /**
     * 区分不同的事件区域
     * 一个事件区域的事件，不能被另一个事件区域的监听器得知
     */
    EventCentre.FieldName = new FieldName();
    EventCentre.TypeName = new TypeName();
    return EventCentre;
}());
exports.default = EventCentre;
},{"./DataStructure":12}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var myMath_1 = require("./myMath");
// 数据结构：ColiBox extends:Laya.Rectangle
// follow:Laya.Sprite 需要跟随的sprite对象
// deltaX:number:与跟随对象的横坐标差
// deltaY:number:与跟随对象的纵坐标差
// adjust():void修正自身的位置
// tag:string:自身所属的碰撞箱种类
// Owner:People:注册者
var ColiBox = /** @class */ (function (_super) {
    __extends(ColiBox, _super);
    /**
     * @param none 不用传参数!
     * 返回一个x,y,长宽为0的碰撞箱
     */
    function ColiBox() {
        return _super.call(this, 0, 0, 0, 0) || this;
    }
    /**
     * 就是……来一组（100个）随机的碰撞箱
     * @param xRange
     * @param yRange
     * @param widRange
     * @param higRange
     */
    ColiBox.randomBoxes = function (xRange, yRange, widRange, higRange) {
        if (xRange === void 0) { xRange = 1200; }
        if (yRange === void 0) { yRange = 800; }
        if (widRange === void 0) { widRange = 300; }
        if (higRange === void 0) { higRange = 300; }
        var rad = myMath_1.default.randomInt;
        var result = [];
        for (var i = 0; i < 50; i += 1) {
            result.push(new ColiBox());
            result[i].pos(rad(xRange), rad(yRange)).size(rad(widRange), rad(higRange));
        }
        return result;
    };
    ColiBox.prototype.pos = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    ColiBox.prototype.size = function (width, height) {
        this.width = width;
        this.height = height;
        return this;
    };
    ColiBox.prototype.intersects_X = function (rec) {
        if (this.x < rec.x) {
            return rec.intersects_X(this);
        }
        return (this.x >= rec.x && this.x <= rec.right) ||
            (this.right >= rec.x && this.right <= rec.right);
    };
    ColiBox.prototype.intersects_Y = function (rec) {
        if (this.y < rec.y) {
            return rec.intersects_Y(this);
        }
        return (this.y >= rec.y && this.y <= rec.bottom) ||
            (this.bottom >= rec.y && this.bottom <= rec.bottom);
    };
    return ColiBox;
}(Laya.Rectangle));
/*
*/
var fuck = /** @class */ (function (_super) {
    __extends(fuck, _super);
    function fuck() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    fuck.prototype.you = function () {
        return "20";
    };
    return fuck;
}(Array));
var ColiPareList = /** @class */ (function (_super) {
    __extends(ColiPareList, _super);
    function ColiPareList() {
        return _super.call(this) || this;
    }
    ColiPareList.prototype.clone = function () {
        var result = new ColiPareList;
        for (var n = 0; n < this.length; n += 1) {
            result[n] = this[n];
        }
        return result;
    };
    /**
     * 输入一个新的碰撞关系表，返回“进入”“离开”“维持碰撞”三个表
     * @param newList 新碰撞关系表
     */
    ColiPareList.prototype.findChange = function (newList) {
        var inList = new ColiPareList();
        var remainList = new ColiPareList();
        var me = this.clone(); //out list
        var found = false;
        for (var n = 0; n < newList.length; n += 1) {
            found = false;
            var current = newList[n];
            for (var k = 0; k < me.length; k += 1) { //look for duplicate element in me
                var toCheck = me[k];
                if (current[0] === toCheck[0] && current[1] === toCheck[1]) { //pair duplicate = remain
                    remainList.push(current);
                    me.splice(k, 1); //keep splicing the old array
                    found = true;
                    break;
                }
            }
            if (!found) { //pair not duplicate
                inList.push(current); //this element is new
            }
        }
        return {
            in: inList,
            out: me,
            remain: remainList //所有新表和旧表都有的元素，就是“原本就在一起，现在还在一起”的“不变”列表
        };
    };
    return ColiPareList;
}(Array));
/**
* 这个类虽然叫质量效应，但它其实是一个物理类
* 目前主营业务是碰撞检测
* 是个单例
* inst太难写了而且容易与init混淆，以后全部写成i
*/
var MassEffect = /** @class */ (function () {
    function MassEffect() {
        this.coliBoxes = []; //已注册的碰撞箱
        this.oldPares = new ColiPareList(); //上一次碰撞检测的结果
    }
    MassEffect.init = function (scene) {
        this.i = new MassEffect();
        this.i.scene = scene;
        this.i.testLayer = new Laya.Sprite;
        scene.addChild(this.i.testLayer);
        this.init = function () { };
    };
    /**
     * 每一帧中所要做的事
     * 1.更新所有碰撞箱的位置(这件事现在交给碰撞箱的创造者来做)
     * 2.进行碰撞检测
     */
    MassEffect.prototype.frameWork = function () {
        // let newList:ColiPareList = this._collisionDetect(this.coliBoxes);
        // console.log(this.oldPares.findChange(newList));
    };
    MassEffect.prototype.test = function () {
        var newList;
        var boxes = ColiBox.randomBoxes();
        newList = this._collisionDetect(boxes);
        // console.log(new fuck().you());
        console.log(this.oldPares.findChange(newList).in);
        // if (Math.random()>2) {
        //     return;
        // }
        // let boxList:ColiBox[] = ColiBox.randomBoxes();
        // boxList.forEach((ele)=>{
        //     MyMath.drawRec(this.testLayer, ele, "#555555");
        // });
        // let tempLayer = new Laya.Sprite();
        // this.testLayer.addChild(tempLayer);
        // let result = this._collisionDetect(boxList);
        // let index = 0;
        // Laya.timer.loop(400, this, ()=>{
        //     if (result.length === 0) {
        //         return;
        //     }
        //     tempLayer.graphics.clear();
        //     let pair = result[index];
        //     MyMath.drawRec(tempLayer, pair[0], "#ff0000");
        //     MyMath.drawRec(tempLayer, pair[1], "#00ff00");
        //     index += 1;
        //     if (index === result.length) {
        //         index = 0;
        //     }
        // });
    };
    /**
     * 输入一个碰撞箱列表，返回碰撞结果
     * @param list 碰撞箱列表
     * @returns 碰撞结果
     */
    MassEffect.prototype._collisionDetect = function (list) {
        myMath_1.default.bubbleSort(list, function (ele) { return ele.x; }); //以x轴坐标升序排列所有碰撞箱
        var pareList = new ColiPareList();
        for (var n = 0; n < list.length - 1; n += 1) {
            var paringBox = list[n];
            for (var p = n + 1; p < list.length; p += 1) {
                var toPare = list[p];
                if (!paringBox.intersects_X(toPare)) { //如果二者在x轴不相交，直接跳出循环
                    break;
                }
                else if (paringBox.intersects_Y(toPare)) { //如果二者在x轴相交，且在y轴相交，则它们重合了
                    pareList.push([paringBox, toPare]);
                }
                //如果二者在x轴相交，在y轴不相交，则什么都不做，继续循环
            }
        }
        return pareList;
        /*
        碰撞检测算法
        首先，所有的待检测的碰撞箱对象都事先根据x值排了序，也就是从左到右排列
        
        然后开始碰撞检测

        1.数组中的每一个元素（除了最后一个）都会从它的位置的下一个元素开始找起
        index   0   1   2   3   4   ....    l-2     l-1
                []  []  []  []  []          []      []
                                            ↑
                                        第一层循环只遍历到这里
                                        也就是倒数第二个元素
        2.如果这个元素找到了一个在x轴与其重叠的碰撞箱，那么就再查看它们的y轴碰撞关系
        0                          1   2
        [这个碰撞箱在搜寻...]       [√]  []
            *查看实例0与实例1之间的碰撞关系，如果y轴不碰撞，什么都不做。如果y轴碰撞，将二者加入碰撞集合中
        
        3.找到一个x轴重叠碰撞箱之后，继续找下一个，直到整个数组遍历完成
        0                          1    2   3   4   5   6   7    ...
        [这个碰撞箱在搜寻...]       [√]  [√] [√] [√] [√] [√] [√]   ...

        4.但是，如果找到一个与其不重叠的碰撞箱，那么剩下的碰撞箱就都不检查了
        因为所有的碰撞箱已经事先按x轴坐标升序排列，出现一个不重叠之后剩下的也都不重叠
        0                          1    2   3      4                 5   6   7    ...
        [这个碰撞箱在搜寻...]       [√]  [√] [x] [(;ﾟдﾟ)wdnmd无视我?]  []  []  []   ...
                                            ↑
                                            发现不重叠的碰撞箱
                                            剩下的全都放弃检查
        
        搜索时大概会是这种感觉
        0   1   2   3   4
        []  []  []  []  []整个数组
        []搜寻者
            []  []  []  []配对成功项目
            []搜寻者
                []  []配对成功项目
                []搜寻者
                    []  []配对成功项目
                    []搜寻者
                        []配对成功项目
        结果：
        0:1 0:2 0:3 0:4
        1:2 1:3
        2:3 2:4
        3:4
        */
    };
    MassEffect.Tags = {
        ENEMY_BODY: "ENEMYBODY"
    };
    return MassEffect;
}());
exports.default = MassEffect;
},{"./myMath":16}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyMath = /** @class */ (function () {
    function MyMath() {
    }
    //Laya模块
    /**
     * 判断两个矩形对象是否重叠
     * @param rec0 一个矩形
     * @param rec1 另一个矩形
     */
    MyMath.overlap_Rec = function (rec0, rec1) {
        return this.overlap_2d(rec0.x, rec1.x, rec0.width, rec1.width) &&
            this.overlap_2d(rec0.y, rec1.y, rec0.height, rec1.height);
    };
    /**
     * 在指定绘图节点中绘制矩形
     * @param spr 绘图节点
     * @param rec 矩形
     * @param color 颜色
     */
    MyMath.drawRec = function (spr, rec, color) {
        spr.graphics.drawRect(rec.x, rec.y, rec.width, rec.height, color, "#888888", 2);
    };
    //Laya模块
    /**
     * 判断在数轴上两条线是否重叠
     * @param point0 线段0的左侧端点
     * @param point1 线段1的左侧端点
     * @param length0 线段0的长度
     * @param length1 线段1的长度
     */
    MyMath.overlap_2d = function (point0, point1, length0, length1) {
        return MyMath.include_2d(point0, length0, point1) ||
            MyMath.include_2d(point0, length0, point1 + length1);
    };
    /**
     * 判断在数轴上一个点是否处于一条线段上
     * @param locate 线段左侧端点位置
     * @param length 线段长度
     * @param dot 点位
     */
    MyMath.include_2d = function (locate, length, dot) {
        return dot >= locate && dot <= locate + length;
    };
    /**
     * @param upLimit 上界
     * @param loLimit 下界
     * @returns 上界与下界之间的随机整数
     */
    MyMath.randomInt = function (upLimit, loLimit) {
        if (loLimit === void 0) { loLimit = 0; }
        return Math.round(Math.random() * (upLimit - loLimit) + loLimit);
    };
    /**
     *
     * @param front 原数字
     * @param shift 增加量
     * @param end 增加上限（若增加量为负，则为下限）
     *
     */
    MyMath.moveTo = function (front, shift, end) {
        var result = front + shift;
        if (shift > 0 && result > end) {
            result = end;
        }
        else if (shift < 0 && result < end) {
            result = end;
        }
        return result;
    };
    /**
     * 冒泡排序
     * 注意这个算法会直接修改原数组
     * @param source 原数组
     * @param value 优先值取值函数
     * @param increase 是否升序（默认升序）
     */
    MyMath.bubbleSort = function (source, value, increase) {
        if (increase === void 0) { increase = true; }
        // let time = 0;
        var complete = true;
        for (var n = source.length - 1; n > 0; n -= 1) {
            complete = true;
            for (var m = 0; m < n; m += 1) {
                var cur = value(source[m]);
                var next = value(source[m + 1]);
                if (increase ? (cur > next) : (cur < next)) {
                    var store = source[m];
                    source[m] = source[m + 1];
                    source[m + 1] = store;
                    complete = false;
                }
                // time += 1;
            }
            if (complete) {
                break;
            }
        }
    };
    return MyMath;
}());
exports.default = MyMath;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameSceneUI = /** @class */ (function (_super) {
        __extends(GameSceneUI, _super);
        function GameSceneUI() {
            return _super.call(this) || this;
        }
        GameSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameScene");
        };
        return GameSceneUI;
    }(Scene));
    ui.GameSceneUI = GameSceneUI;
    REG("ui.GameSceneUI", GameSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xheWEvTGF5YUFpcklERS9yZXNvdXJjZXMvYXBwL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvR2FtZUNvbmZpZy50cyIsInNyYy9NYWluLnRzIiwic3JjL1NjZW5lTWFuYWdlci50cyIsInNyYy9TY2VuZVNjcmlwdC9HYW1lLnRzIiwic3JjL1NjZW5lU2NyaXB0L0dhbWVPYmovRW5lbXlDZW50cmUudHMiLCJzcmMvU2NlbmVTY3JpcHQvR2FtZU9iai9HYW1lRmllbGRVSS50cyIsInNyYy9TY2VuZVNjcmlwdC9HYW1lT2JqL1Blb3BsZV9zdHVmZi9FbmVteS50cyIsInNyYy9TY2VuZVNjcmlwdC9HYW1lT2JqL1Blb3BsZV9zdHVmZi9QZW9wbGUudHMiLCJzcmMvU2NlbmVTY3JpcHQvR2FtZU9iai9QZW9wbGVfc3R1ZmYvUHJlc2VudC50cyIsInNyYy9TY2VuZVNjcmlwdC9HYW1lT2JqL1Blb3BsZV9zdHVmZi9TdGF0ZS50cyIsInNyYy9TY2VuZVNjcmlwdC9Mb2FkaW5nLnRzIiwic3JjL1RveWJveC9EYXRhU3RydWN0dXJlLnRzIiwic3JjL1RveWJveC9EYXRhYmFzZS50cyIsInNyYy9Ub3lib3gvRXZlbnRDZW50cmUudHMiLCJzcmMvVG95Ym94L01hc3NFZmZlY3QudHMiLCJzcmMvVG95Ym94L215TWF0aC50cyIsInNyYy91aS9sYXlhTWF4VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDVkEsZ0dBQWdHO0FBQ2hHLDJDQUFxQztBQUNyQyxpREFBMkM7QUFDM0M7O0VBRUU7QUFDRjtJQWFJO0lBQWMsQ0FBQztJQUNSLGVBQUksR0FBWDtRQUNJLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBQyxjQUFJLENBQUMsQ0FBQztRQUNoQyxHQUFHLENBQUMsd0JBQXdCLEVBQUMsaUJBQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFqQk0sZ0JBQUssR0FBUSxJQUFJLENBQUM7SUFDbEIsaUJBQU0sR0FBUSxHQUFHLENBQUM7SUFDbEIsb0JBQVMsR0FBUSxTQUFTLENBQUM7SUFDM0IscUJBQVUsR0FBUSxNQUFNLENBQUM7SUFDekIsaUJBQU0sR0FBUSxLQUFLLENBQUM7SUFDcEIsaUJBQU0sR0FBUSxNQUFNLENBQUM7SUFDckIscUJBQVUsR0FBSyxvQkFBb0IsQ0FBQztJQUNwQyxvQkFBUyxHQUFRLEVBQUUsQ0FBQztJQUNwQixnQkFBSyxHQUFTLEtBQUssQ0FBQztJQUNwQixlQUFJLEdBQVMsS0FBSyxDQUFDO0lBQ25CLHVCQUFZLEdBQVMsS0FBSyxDQUFDO0lBQzNCLDRCQUFpQixHQUFTLElBQUksQ0FBQztJQU8xQyxpQkFBQztDQW5CRCxBQW1CQyxJQUFBO2tCQW5Cb0IsVUFBVTtBQW9CL0IsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDOzs7O0FDMUJsQiwyQ0FBc0M7QUFDdEMsK0NBQTBDO0FBQzFDO0lBQ0M7UUFDQyxnQkFBZ0I7UUFDaEIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBVSxDQUFDLEtBQUssRUFBRSxvQkFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztZQUNsRSxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFVLENBQUMsS0FBSyxFQUFFLG9CQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxvQkFBVSxDQUFDLFNBQVMsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxvQkFBVSxDQUFDLFVBQVUsQ0FBQztRQUM5QyxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxvQkFBVSxDQUFDLGlCQUFpQixDQUFDO1FBRTFELG9EQUFvRDtRQUNwRCxJQUFJLG9CQUFVLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU07WUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM5RixJQUFJLG9CQUFVLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztZQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzNGLElBQUksb0JBQVUsQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBRTdCLGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDckksQ0FBQztJQUVELDhCQUFlLEdBQWY7UUFDQywrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELDZCQUFjLEdBQWQ7UUFDQyxZQUFZO1FBQ1osSUFBSSxzQkFBWSxFQUFFLENBQUE7UUFDbEIsbUVBQW1FO0lBQ3BFLENBQUM7SUFDRixXQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsSUFBQTtBQUNELE9BQU87QUFDUCxJQUFJLElBQUksRUFBRSxDQUFDOzs7O0FDcENYLG9EQUErQztBQUMvQyw4Q0FBeUM7QUFHekM7SUFHSTtRQUFBLGlCQVNDO1FBWE8saUJBQVksR0FBVSxvQkFBb0IsQ0FBQztRQUMzQyxjQUFTLEdBQVUsaUJBQWlCLENBQUM7UUFFekMscUJBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQixrQkFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWhCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVuQyxxQkFBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7WUFDM0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ25DLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0FiQSxBQWFDLElBQUE7Ozs7O0FDakJELDZDQUFtQztBQUluQyxxREFBZ0Q7QUFDaEQscURBQWdEO0FBR2hELG1EQUE4QztBQUc5QztJQUFrQyx3QkFBYztJQUM1QztRQUFBLFlBQ0ksaUJBQU8sU0FTVjtRQUVPLFdBQUssR0FBVSxDQUFDLENBQUM7UUFQckIscUJBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsT0FBTztRQUNwQyxxQkFBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUEsVUFBVTtRQUM3QixvQkFBVSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFBLFFBQVE7UUFDOUIsb0JBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQSxhQUFhO1FBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxLQUFJLEVBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUEsT0FBTzs7SUFDbkQsQ0FBQztJQUdELHNCQUFzQjtJQUVmLHdCQUFTLEdBQWhCO1FBRUkscUJBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxxQkFBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxQixvQkFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBSUwsV0FBQztBQUFELENBMUJBLEFBMEJDLENBMUJpQyxjQUFFLENBQUMsV0FBVyxHQTBCL0M7Ozs7O0FDckNELDhDQUF5QztBQUN6Qyw0REFBbUQ7QUFDbkQsa0RBQTZDO0FBRzdDO0lBTUk7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUV0QixPQUFPO1FBQ1AsUUFBUTtRQUNSLElBQUksUUFBUSxHQUFPLGtCQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxxQkFBSyxDQUFDLFdBQVcsQ0FBTSxRQUFRLENBQUMsQ0FBQztRQUN2RCxRQUFRO1FBQ1IsS0FBSztJQUNULENBQUM7SUFiYSxnQkFBSSxHQUFsQjtRQUNJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLGNBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFnQk0sK0JBQVMsR0FBaEIsVUFBaUIsSUFBVztRQUN4Qjs7OztVQUlFO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3RFLHdCQUF3QjtZQUN4QixJQUFJLElBQUksR0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDMUI7UUFHRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7WUFDMUIsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLGlDQUFXLEdBQWxCLFVBQW1CLE9BQWMsRUFBRSxNQUFhO1FBQzVDLElBQUksS0FBSyxHQUFTLElBQUksZUFBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUwsa0JBQUM7QUFBRCxDQTdDQSxBQTZDQyxJQUFBOzs7OztBQ2xERCxrREFBNkM7QUFPN0M7SUFDSSxtQkFBWSxLQUFnQjtJQUU1QixDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQVdEO0lBVUkscUJBQVksS0FBZ0I7UUFDeEIsSUFBTSxJQUFJLEdBQU8sa0JBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDckMsSUFBQSxrREFBcUUsRUFBcEUsYUFBSyxFQUFFLGNBQU0sRUFBRSxZQUFJLENBQWtEO1FBQzVFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXBCLE9BQU87UUFDUCxRQUFRO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQ3BCLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDL0IsSUFBSSxLQUFLLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQy9ELEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM5QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzlCO1NBQ0o7UUFDRCxRQUFRO1FBQ1IsS0FBSztJQUVULENBQUM7SUFJTSxpQ0FBVyxHQUFsQixVQUFtQixNQUFhLEVBQUMsQ0FBWSxFQUFDLENBQVk7UUFBekIsa0JBQUEsRUFBQSxLQUFZO1FBQUMsa0JBQUEsRUFBQSxLQUFZO1FBQ3RELElBQUksTUFBTSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUEsVUFBVTtRQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQSxRQUFRO1FBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLGtCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUEsZ0JBQWdCO1FBQzVFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsTUFBTTtRQUN0QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBSU0sK0JBQVMsR0FBaEI7SUFFQSxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQWxEQSxBQWtEQyxJQUFBO0FBRUQ7SUFhSSxxQkFBb0IsS0FBSztRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFFeEIsQ0FBQztJQVphLGdCQUFJLEdBQWxCLFVBQW1CLEtBQWdCO1FBQy9CLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBY0Qsc0JBQVcsK0JBQU07YUFBakI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFTSwrQkFBUyxHQUFoQjtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUdMLGtCQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsSUFBQTs7Ozs7QUMxR0QsbUNBQThCO0FBQzlCLHFEQUFnRDtBQUdoRCwrREFBc0Q7QUFDdEQscUNBQWdDO0FBQ2hDLGlDQUE0QjtBQUM1QixpREFBNEM7QUFHNUM7O0dBRUc7QUFDSDtJQUF1Qiw0QkFBTztJQUMxQixrQkFBWSxHQUFVO2VBQ2xCLGtCQUFNLEdBQUcsQ0FBQztJQUNkLENBQUM7SUFDTSwwQkFBTyxHQUFkLFVBQWUsS0FBYztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBQ0wsZUFBQztBQUFELENBUEEsQUFPQyxDQVBzQixpQkFBTyxHQU83QjtBQUVEOztHQUVHO0FBQ0g7SUFBdUIsNEJBQUs7SUFNeEIsa0JBQVksSUFBUSxFQUFFLE1BQWE7UUFBbkMsWUFDSSxrQkFBTSxJQUFJLENBQUMsU0FlZDtRQWpCTSxTQUFHLEdBQVcsS0FBSyxDQUFDO1FBR3ZCLE9BQU87UUFDUCxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUkscUJBQUssQ0FBQyxXQUFXLEVBQXVCLENBQUM7UUFDMUQsSUFBSSxPQUFPLEdBQWMsa0JBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUMsS0FBSztZQUN0QixLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPO1FBQ1AsS0FBSSxDQUFDLEVBQUUsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0IsS0FBSSxDQUFDLEVBQUUsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0IsT0FBTztRQUNQLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLFFBQVE7UUFDUixLQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7O0lBRTNCLENBQUM7SUFFTyxrQ0FBZSxHQUF2QjtRQUNJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2pDLE9BQU87U0FDVjtRQUVELElBQU0sSUFBSSxHQUF1QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdDLElBQUEseUNBQXFELEVBQXBELGFBQUssRUFBRSxhQUFLLENBQXlDO1FBQzVELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFNLElBQUksR0FBRyxRQUFRLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssR0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLEdBQUMsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFTSw4QkFBVyxHQUFsQixVQUFtQixDQUFRLEVBQUUsQ0FBUTtRQUNqQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFTSw2QkFBVSxHQUFqQjtRQUNJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDbEIsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELHNCQUFXLCtCQUFTO2FBQXBCO1lBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRixDQUFDOzs7T0FBQTtJQUVELHNCQUFXLHVCQUFDO2FBQVo7WUFDSSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBVyx1QkFBQzthQUFaO1lBQ0ksT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBQ0Qsc0JBQVcsNEJBQU07YUFBakI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBVyw0QkFBTTthQUFqQjtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUNELHNCQUFXLDRCQUFNO2FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLENBQUM7OztPQUFBO0lBRUwsZUFBQztBQUFELENBdkVBLEFBdUVDLENBdkVzQixlQUFLLEdBdUUzQjtBQUVEOztHQUVHO0FBQ0g7SUFBbUMseUJBQU07SUFNckM7Ozs7T0FJRztJQUNILGVBQVksRUFBUyxFQUFFLE1BQWE7UUFBcEMsWUFDSSxpQkFBTyxTQWVWO1FBZEcsU0FBUztRQUNULElBQUksSUFBSSxHQUFPLGtCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxQyxJQUFJLElBQUksR0FBTyxrQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHFCQUFLLENBQUMsV0FBVyxDQUFXLElBQUksQ0FBQyxDQUFDO1FBRW5ELFdBQVc7UUFDWCxLQUFJLENBQUMsUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLEtBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXpDLE9BQU87UUFDUCxRQUFRO1FBRVIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFJLENBQUMsQ0FBQzs7SUFDdEIsQ0FBQztJQUdNLHlCQUFTLEdBQWhCO1FBQ0ksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNqQixPQUFPO1NBQ1Y7UUFDRCxNQUFNO1FBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQzVCO1FBQ0csSUFBQSxnQkFBd0MsRUFBdkMsUUFBQyxFQUFDLFFBQUMsRUFBQyxrQkFBTSxFQUFDLGtCQUFNLEVBQUMsa0JBQU0sQ0FBZ0I7UUFFN0MsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFDO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztZQUN2QixPQUFPO1NBQ1Y7UUFHRCxJQUFJLElBQUksR0FBVSxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLElBQUksR0FBVSxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTTtRQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0wsWUFBQztBQUFELENBcERBLEFBb0RDLENBcERrQyxnQkFBTSxHQW9EeEM7Ozs7O0FDekpEO0lBQ0k7SUFFQSxDQUFDO0lBQ0wsYUFBQztBQUFELENBSkEsQUFJQyxJQUFBOzs7OztBQ0pELDhDQUF5QztBQUV6Qzs7R0FFRztBQUNIO0lBRUksaUJBQVksR0FBVTtRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELHNCQUFXLDJCQUFNO2FBQWpCO1lBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBQ0wsY0FBQztBQUFELENBVEEsQUFTQyxJQUFBOzs7OztBQ2JEO0lBR0ksZUFBWSxJQUFRO0lBRXBCLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0FOQSxBQU1DLElBQUE7Ozs7O0FDUEQsNkNBQWtDO0FBQ2xDLHFEQUFnRDtBQUVoRDtJQUFxQywyQkFBaUI7SUFDbEQ7UUFBQSxZQUNJLGlCQUFPLFNBS1Y7UUFKRyxJQUFNLE9BQU8sR0FBVSx5QkFBeUIsRUFDaEQsYUFBYSxHQUFVLCtCQUErQixFQUN0RCxnQkFBZ0IsR0FBVSxrQ0FBa0MsQ0FBQTtRQUM1RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBQyxhQUFhLEVBQUMsZ0JBQWdCLENBQUMsRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFJLEVBQUUsS0FBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLElBQUksRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBOztJQUM3SCxDQUFDO0lBRUQsMEJBQVEsR0FBUjtRQUNJLHFCQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUNMLGNBQUM7QUFBRCxDQVpBLEFBWUMsQ0Fab0MsY0FBRSxDQUFDLGNBQWMsR0FZckQ7Ozs7O0FDZEQ7SUFHSSxpQkFBWSxHQUFLLEVBQUUsS0FBTztRQUN0QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFDTCxjQUFDO0FBQUQsQ0FQQSxBQU9DLElBQUE7QUFFRDtJQUdJLGNBQVksSUFBTSxFQUFFLElBQVk7UUFDNUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQVBBLEFBT0MsSUFBQTtBQUVELElBQWMsS0FBSyxDQTJWbEI7QUEzVkQsV0FBYyxLQUFLO0lBQ2Y7UUFHSTtZQUNJLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFHRCxzQkFBVyw0QkFBTTtZQURqQixNQUFNO2lCQUNOO2dCQUNJLElBQUksTUFBTSxHQUFVLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxPQUFPLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDakMsT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtvQkFDMUIsTUFBTSxJQUFJLENBQUMsQ0FBQztvQkFDWixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztpQkFDMUI7Z0JBQ0QsT0FBTyxNQUFNLENBQUM7WUFDbEIsQ0FBQzs7O1dBQUE7UUFFRCxzQkFBVyw2QkFBTztpQkFBbEI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7WUFDcEMsQ0FBQzs7O1dBQUE7UUFFRCxNQUFNO1FBQ04sR0FBRztRQUNJLHVCQUFJLEdBQVgsVUFBWSxJQUFNO1lBQ2QsSUFBSSxJQUFJLEdBQVcsSUFBSSxJQUFJLENBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzthQUMxQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7YUFDMUI7UUFFTCxDQUFDO1FBRU0sMEJBQU8sR0FBZCxVQUFlLElBQU07WUFDakIsSUFBSSxLQUFLLEdBQVcsSUFBSSxJQUFJLENBQUksSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQzthQUMzQjtpQkFBTTtnQkFDSCxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2FBQzNCO1FBQ0wsQ0FBQztRQUVNLHlCQUFNLEdBQWIsVUFBYyxLQUFZLEVBQUUsSUFBTTtZQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQyxPQUFPO2dCQUMxQyxPQUFPLEtBQUssQ0FBQzthQUNoQjtZQUVELElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFFRCxJQUFJLE9BQU8sR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUEsOEJBQThCO1lBQy9ELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7YUFDMUI7WUFFRCxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFJLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFL0MsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVELEdBQUc7UUFDSSx5QkFBTSxHQUFiLFVBQWMsS0FBWTtZQUN0QixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFFRCxJQUFJLE9BQU8sR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO2FBQzFCO1lBRUQsSUFBSSxJQUFJLEdBQUssT0FBTyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEdBQUcsSUFBSSxDQUFDO1lBRWYsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3hCLENBQUM7UUFFTSx3QkFBSyxHQUFaO1lBQ0ksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNkLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7YUFDMUI7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO1FBRUQsR0FBRztRQUNJLHdCQUFLLEdBQVosVUFBYSxLQUFZLEVBQUUsSUFBTTtZQUM3QixJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ25DLE9BQU87YUFDVjtZQUVELElBQUksT0FBTyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ3RDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7YUFDMUI7WUFFRCxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDO1FBRUQsR0FBRztRQUNJLHVCQUFJLEdBQVgsVUFBWSxLQUFZO1lBQ3BCLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDbkMsT0FBTzthQUNWO1lBRUQsSUFBSSxPQUFPLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQzthQUMxQjtZQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztRQUN4QixDQUFDO1FBRU0seUJBQU0sR0FBYixVQUFjLElBQU07WUFDaEIsSUFBSSxNQUFNLEdBQVksRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFLLEVBQUUsS0FBWTtnQkFDN0IsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO29CQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3RCO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDO1FBRUQsTUFBTTtRQUNDLDBCQUFPLEdBQWQsVUFBZSxDQUErQztZQUMxRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUM5QixJQUFJLEdBQUcsR0FBVSxDQUFDLENBQUM7WUFDbkIsT0FBTyxPQUFPLEtBQUssSUFBSSxFQUFFO2dCQUNyQixDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUN2QixHQUFHLElBQUksQ0FBQyxDQUFDO2FBQ1o7UUFDTCxDQUFDO1FBRUQ7Ozs7OztXQU1HO1FBQ0kseUJBQU0sR0FBYixVQUFjLENBQWlCLEVBQUUsUUFBdUI7WUFBdkIseUJBQUEsRUFBQSxlQUF1QjtZQUNwRCxJQUFJLFFBQVEsR0FBb0IsSUFBSSxRQUFRLEVBQVUsQ0FBQztZQUN2RCxJQUFJLE1BQU0sR0FBZSxJQUFJLFFBQVEsRUFBSyxDQUFDO1lBQzNDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWxCLElBQUksT0FBTyxHQUFnQyxRQUFRLENBQUEsQ0FBQyxDQUFBLFVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFBLFVBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUM7WUFFakcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7Z0JBQ2IsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLElBQUksR0FBVyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDckMsSUFBSSxPQUFPLEdBQWdCLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUUvQyxJQUFJLFVBQVUsR0FBVyxLQUFLLENBQUM7Z0JBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7b0JBQ3ZCLHdDQUF3QztvQkFDeEMsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQ3hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUksR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDeEMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBUyxVQUFVLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUMxRCxVQUFVLEdBQUcsSUFBSSxDQUFDO3dCQUNsQixNQUFNO3FCQUNUO29CQUVELElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO29CQUNqQixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztpQkFDMUI7Z0JBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNqQixRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUM3QjtZQUNMLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxNQUFNLENBQUM7UUFDbEIsQ0FBQztRQU1MLGVBQUM7SUFBRCxDQW5NQSxBQW1NQyxJQUFBO0lBbk1ZLGNBQVEsV0FtTXBCLENBQUE7SUFFRDtRQUVJO1lBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDbkIsQ0FBQztRQUNNLGlCQUFHLEdBQVYsVUFBVyxHQUFLO1lBQ1osS0FBZ0IsVUFBVSxFQUFWLEtBQUEsSUFBSSxDQUFDLEtBQUssRUFBVixjQUFVLEVBQVYsSUFBVSxFQUFDO2dCQUF0QixJQUFJLEdBQUcsU0FBQTtnQkFDUixJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO29CQUNqQixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUE7aUJBQ25CO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFDTSx5QkFBVyxHQUFsQixVQUFtQixHQUFLO1lBQ3BCLEtBQWdCLFVBQVUsRUFBVixLQUFBLElBQUksQ0FBQyxLQUFLLEVBQVYsY0FBVSxFQUFWLElBQVUsRUFBRTtnQkFBdkIsSUFBSSxHQUFHLFNBQUE7Z0JBQ1IsSUFBSSxHQUFHLENBQUMsS0FBSyxLQUFLLEdBQUcsRUFBRTtvQkFDbkIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFBO2lCQUNqQjthQUNKO1lBQ0QsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ00sc0JBQVEsR0FBZixVQUFnQixHQUFLO1lBQ2pCLEtBQWdCLFVBQVUsRUFBVixLQUFBLElBQUksQ0FBQyxLQUFLLEVBQVYsY0FBVSxFQUFWLElBQVUsRUFBRTtnQkFBdkIsSUFBSSxHQUFHLFNBQUE7Z0JBQ1IsSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtvQkFDakIsT0FBTyxJQUFJLENBQUE7aUJBQ2Q7YUFDSjtZQUNELE9BQU8sS0FBSyxDQUFBO1FBQ2hCLENBQUM7UUFDTSxpQkFBRyxHQUFWLFVBQVcsR0FBSyxFQUFDLEtBQU87WUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzNDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO29CQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7b0JBQzNCLE9BQU8sS0FBSyxDQUFDO2lCQUNoQjthQUNKO1lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQU0sR0FBRyxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7WUFDNUMsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUNNLHNCQUFRLEdBQWYsVUFBZ0IsSUFBUSxFQUFFLE1BQVU7WUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQy9CLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1lBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUVoQixDQUFDO1FBQ00sb0JBQU0sR0FBYixVQUFjLEdBQUs7WUFDZixJQUFJLEtBQUssR0FBVSxDQUFDLENBQUM7WUFDckIsS0FBZ0IsVUFBVSxFQUFWLEtBQUEsSUFBSSxDQUFDLEtBQUssRUFBVixjQUFVLEVBQVYsSUFBVSxFQUFFO2dCQUF2QixJQUFJLEdBQUcsU0FBQTtnQkFDUixJQUFJLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFFO29CQUNqQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLE9BQU8sSUFBSSxDQUFBO2lCQUNkO2dCQUNELEtBQUssSUFBSSxDQUFDLENBQUM7YUFDZDtZQUNELE9BQU8sS0FBSyxDQUFBO1FBQ2hCLENBQUM7UUFDRCxzQkFBVyx1QkFBTTtpQkFBakI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQTtZQUM1QixDQUFDOzs7V0FBQTtRQUNNLHFCQUFPLEdBQWQsVUFBZSxDQUFrQjtZQUM3QixLQUFnQixVQUFVLEVBQVYsS0FBQSxJQUFJLENBQUMsS0FBSyxFQUFWLGNBQVUsRUFBVixJQUFVLEVBQUU7Z0JBQXZCLElBQUksR0FBRyxTQUFBO2dCQUNSLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QjtZQUNELE9BQU87UUFDWCxDQUFDO1FBQ00sb0JBQU0sR0FBYixVQUFjLENBQW9CO1lBQzlCLElBQUksTUFBTSxHQUFHLElBQUksR0FBRyxFQUFPLENBQUM7WUFDNUIsS0FBZ0IsVUFBVSxFQUFWLEtBQUEsSUFBSSxDQUFDLEtBQUssRUFBVixjQUFVLEVBQVYsSUFBVSxFQUFFO2dCQUF2QixJQUFJLEdBQUcsU0FBQTtnQkFDUixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQztvQkFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDbEM7YUFDSjtZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUM7UUFDTCxVQUFDO0lBQUQsQ0E5RUEsQUE4RUMsSUFBQTtJQTlFWSxTQUFHLE1BOEVmLENBQUE7SUFFRDtRQUdJLHFCQUFZLE1BQW9CLEVBQUUsU0FBb0I7WUFBMUMsdUJBQUEsRUFBQSxXQUFvQjtZQUFFLDBCQUFBLEVBQUEsYUFBb0I7WUFBdEQsaUJBSUM7WUFOTyxVQUFLLEdBQVksRUFBRSxDQUFDO1lBQ3BCLGFBQVEsR0FBVSxDQUFDLENBQUM7WUFFeEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7Z0JBQ2YsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDO1FBRUQsc0JBQUksa0NBQVM7aUJBQWI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFBO1lBQ2xFLENBQUM7OztXQUFBO1FBRUQ7OztVQUdFO1FBRUYsMEJBQUksR0FBSjtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUVELDBCQUFJLEdBQUo7WUFDSSxJQUFJLENBQUMsUUFBUSxJQUFFLENBQUMsQ0FBQztZQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixDQUFDO1FBRUQsd0JBQUUsR0FBRixVQUFHLEtBQVk7WUFDWCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQTtZQUNyQixPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFFRCwwQkFBSSxHQUFKLFVBQUssSUFBTTtZQUNQLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ3JCLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztRQUVELHlCQUFHLEdBQUgsVUFBSSxLQUFZLEVBQUMsSUFBTTtZQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQTtZQUN4QixPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFFRCwwQkFBSSxHQUFKLFVBQUssS0FBZ0I7WUFBaEIsc0JBQUEsRUFBQSxTQUFnQjtZQUNqQiw0QkFBNEI7WUFDNUIsNkJBQTZCO1lBQzdCLGtCQUFrQjtZQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMxQyxDQUFDO1FBRUQsc0JBQUksK0JBQU07aUJBQVY7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQTtZQUM1QixDQUFDOzs7V0FBQTtRQUVELHNCQUFJLDZCQUFJO2lCQUFSO2dCQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMxQyxDQUFDOzs7V0FBQTtRQUVELHNCQUFJLDhCQUFLO2lCQUFUO2dCQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixDQUFDOzs7V0FBQTtRQUVELHNCQUFJLGdDQUFPO2lCQUFYO2dCQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQTtZQUN4QixDQUFDOzs7V0FBQTtRQUVELHNCQUFJLDhCQUFLO2lCQUFUO2dCQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7WUFDbEQsQ0FBQzs7O1dBQUE7UUFDTCxrQkFBQztJQUFELENBcEVBLEFBb0VDLElBQUE7SUFwRVksaUJBQVcsY0FvRXZCLENBQUE7QUFDTCxDQUFDLEVBM1ZhLEtBQUssR0FBTCxhQUFLLEtBQUwsYUFBSyxRQTJWbEI7Ozs7QUMzV0QsSUFBTSxXQUFXLEdBQVUseUJBQXlCLEVBQ3BELGlCQUFpQixHQUFVLCtCQUErQixFQUMxRCxvQkFBb0IsR0FBVSxrQ0FBa0MsQ0FBQTtBQVdoRTtJQVNJO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFpQixFQUFDLG9CQUFvQixFQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUM3RixLQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUE7WUFDdkQsS0FBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1lBQzdELEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDbkQsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQVpELG1FQUFtRTtJQUNyRCxhQUFJLEdBQWxCO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFBO1FBQzFCLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBSyxDQUFDLENBQUE7SUFDdEIsQ0FBQztJQWdCTSwwQkFBTyxHQUFkLFVBQWUsUUFBZTtRQUMxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLDJCQUFRLEdBQWYsVUFBZ0IsU0FBZ0I7UUFDNUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTSwwQkFBTyxHQUFkLFVBQWUsWUFBbUI7UUFDOUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTSw0QkFBUyxHQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sK0JBQVksR0FBbkI7UUFDSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELHNCQUFXLDhCQUFRO2FBQW5CO1lBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ2pDLENBQUM7OztPQUFBO0lBQ0wsZUFBQztBQUFELENBL0NBLEFBK0NDLElBQUE7Ozs7O0FDL0RELGlEQUF3QztBQUV4QztJQUFBO0lBVUEsQ0FBQztJQVRHLHNCQUFXLDZCQUFNO2FBQWpCO1lBQ0ksT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBVyw2QkFBTTthQUFqQjtZQUNJLE9BQU8sUUFBUSxDQUFDO1FBQ3BCLENBQUM7OztPQUFBO0lBQ0Qsc0JBQVcsd0NBQWlCO2FBQTVCO1lBQ0ksT0FBTyxtQkFBbUIsQ0FBQztRQUMvQixDQUFDOzs7T0FBQTtJQUNMLGdCQUFDO0FBQUQsQ0FWQSxBQVVDLElBQUE7QUFFRDtJQUFBO0lBSUEsQ0FBQztJQUhHLHNCQUFXLHlCQUFHO2FBQWQ7WUFDSSxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDOzs7T0FBQTtJQUNMLGVBQUM7QUFBRCxDQUpBLEFBSUMsSUFBQTtBQUVEO0lBTUk7UUFFUSxpQkFBWSxHQUEyQyxJQUFJLHFCQUFLLENBQUMsR0FBRyxFQUFnQyxDQUFDO0lBRnZGLENBQUM7SUFKVCxnQkFBSSxHQUFsQjtRQUNJLFdBQVcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFDc0IsQ0FBQztJQVVqQix3QkFBRSxHQUFULFVBQVUsS0FBWSxFQUFFLElBQVcsRUFBRSxNQUFVLEVBQUUsTUFBZSxFQUFFLElBQVc7UUFDekUsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTSwyQkFBSyxHQUFaLFVBQWEsS0FBWSxFQUFFLElBQVcsRUFBRSxJQUFXO1FBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBQztZQUNuQyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSwwQkFBSSxHQUFYLFVBQVksS0FBWSxFQUFFLElBQVcsRUFBRSxNQUFVLEVBQUUsTUFBZSxFQUFFLElBQVc7UUFDM0UsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUExQkQ7OztPQUdHO0lBQ29CLHFCQUFTLEdBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUN0QyxvQkFBUSxHQUFZLElBQUksUUFBUSxFQUFFLENBQUM7SUFzQjlELGtCQUFDO0NBcENELEFBb0NDLElBQUE7a0JBcENvQixXQUFXOzs7O0FDbkJoQyxtQ0FBOEI7QUFHOUIsc0NBQXNDO0FBQ3RDLG1DQUFtQztBQUNuQywyQkFBMkI7QUFDM0IsMkJBQTJCO0FBRTNCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsbUJBQW1CO0FBR25CO0lBQXNCLDJCQUFjO0lBQ2hDOzs7T0FHRztJQUNIO2VBQ0ksa0JBQU0sQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDVyxtQkFBVyxHQUF6QixVQUEwQixNQUFvQixFQUFFLE1BQW1CLEVBQUUsUUFBcUIsRUFBRSxRQUFxQjtRQUF2Rix1QkFBQSxFQUFBLGFBQW9CO1FBQUUsdUJBQUEsRUFBQSxZQUFtQjtRQUFFLHlCQUFBLEVBQUEsY0FBcUI7UUFBRSx5QkFBQSxFQUFBLGNBQXFCO1FBQzdHLElBQU0sR0FBRyxHQUFZLGdCQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3RDLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUMxQixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUM5RTtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxxQkFBRyxHQUFWLFVBQVcsQ0FBUSxFQUFFLENBQVE7UUFDekIsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxzQkFBSSxHQUFYLFVBQVksS0FBWSxFQUFFLE1BQWE7UUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLDhCQUFZLEdBQW5CLFVBQW9CLEdBQVc7UUFDM0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDaEIsT0FBTyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDeEMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVNLDhCQUFZLEdBQW5CLFVBQW9CLEdBQVc7UUFDM0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUN6QyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMvRCxDQUFDO0lBQ0wsY0FBQztBQUFELENBckRBLEFBcURDLENBckRxQixJQUFJLENBQUMsU0FBUyxHQXFEbkM7QUFFRDtFQUNFO0FBQ0Y7SUFBbUIsd0JBQWE7SUFBaEM7O0lBSUEsQ0FBQztJQUhVLGtCQUFHLEdBQVY7UUFDSSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0wsV0FBQztBQUFELENBSkEsQUFJQyxDQUprQixLQUFLLEdBSXZCO0FBRUQ7SUFBMkIsZ0NBQXlCO0lBQ2hEO2VBQ0ksaUJBQU87SUFFWCxDQUFDO0lBRU0sNEJBQUssR0FBWjtRQUNJLElBQUksTUFBTSxHQUFnQixJQUFJLFlBQVksQ0FBQztRQUMzQyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaUNBQVUsR0FBakIsVUFBa0IsT0FBb0I7UUFDbEMsSUFBSSxNQUFNLEdBQWdCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDN0MsSUFBSSxVQUFVLEdBQWdCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDakQsSUFBSSxFQUFFLEdBQWdCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBLFVBQVU7UUFFN0MsSUFBSSxLQUFLLEdBQVcsS0FBSyxDQUFDO1FBQzFCLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkMsS0FBSyxHQUFHLEtBQUssQ0FBQztZQUNkLElBQUksT0FBTyxHQUFxQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFHM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLGtDQUFrQztnQkFDdEUsSUFBSSxPQUFPLEdBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyx5QkFBeUI7b0JBQ2xGLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3pCLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsNkJBQTZCO29CQUM1QyxLQUFLLEdBQUcsSUFBSSxDQUFDO29CQUNiLE1BQU07aUJBQ1Q7YUFDSjtZQUVELElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBQyxvQkFBb0I7Z0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxxQkFBcUI7YUFDN0M7U0FDSjtRQUdELE9BQU87WUFDSCxFQUFFLEVBQUMsTUFBTTtZQUNULEdBQUcsRUFBQyxFQUFFO1lBQ04sTUFBTSxFQUFDLFVBQVUsQ0FBQSx1Q0FBdUM7U0FDM0QsQ0FBQTtJQUNMLENBQUM7SUFDTCxtQkFBQztBQUFELENBbkRBLEFBbURDLENBbkQwQixLQUFLLEdBbUQvQjtBQUdBOzs7OztFQUtFO0FBQ0g7SUFDSTtRQWVRLGNBQVMsR0FBYSxFQUFFLENBQUMsQ0FBRyxTQUFTO1FBQ3JDLGFBQVEsR0FBZ0IsSUFBSSxZQUFZLEVBQUUsQ0FBQyxDQUFFLFlBQVk7SUFoQjNDLENBQUM7SUFDVCxlQUFJLEdBQWxCLFVBQW1CLEtBQWdCO1FBQy9CLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ25DLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFjRDs7OztPQUlHO0lBQ0ksOEJBQVMsR0FBaEI7UUFDSSxvRUFBb0U7UUFDcEUsa0RBQWtEO0lBQ3RELENBQUM7SUFFTSx5QkFBSSxHQUFYO1FBQ0ksSUFBSSxPQUFvQixDQUFDO1FBQ3pCLElBQUksS0FBSyxHQUFhLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QyxPQUFPLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLGlDQUFpQztRQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWxELHlCQUF5QjtRQUN6QixjQUFjO1FBQ2QsSUFBSTtRQUNKLGlEQUFpRDtRQUNqRCwyQkFBMkI7UUFDM0Isc0RBQXNEO1FBQ3RELE1BQU07UUFFTixxQ0FBcUM7UUFDckMsc0NBQXNDO1FBQ3RDLCtDQUErQztRQUUvQyxpQkFBaUI7UUFDakIsbUNBQW1DO1FBQ25DLGlDQUFpQztRQUNqQyxrQkFBa0I7UUFDbEIsUUFBUTtRQUNSLGtDQUFrQztRQUNsQyxnQ0FBZ0M7UUFDaEMscURBQXFEO1FBQ3JELHFEQUFxRDtRQUVyRCxrQkFBa0I7UUFDbEIscUNBQXFDO1FBQ3JDLHFCQUFxQjtRQUNyQixRQUFRO1FBQ1IsTUFBTTtJQUVWLENBQUM7SUFNRDs7OztPQUlHO0lBQ0sscUNBQWdCLEdBQXhCLFVBQXlCLElBQWM7UUFDbkMsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFVBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUEsZ0JBQWdCO1FBQy9ELElBQUksUUFBUSxHQUFnQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9DLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hDLElBQU0sU0FBUyxHQUFXLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDekMsSUFBSSxNQUFNLEdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLG1CQUFtQjtvQkFDckQsTUFBTTtpQkFDVDtxQkFBTSxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyx5QkFBeUI7b0JBQ2pFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDdEM7Z0JBQ0QsOEJBQThCO2FBQ2pDO1NBQ0o7UUFFRCxPQUFPLFFBQVEsQ0FBQztRQUVoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VBNkNFO0lBQ04sQ0FBQztJQXBJYSxlQUFJLEdBQUc7UUFDakIsVUFBVSxFQUFDLFdBQVc7S0FDekIsQ0FBQTtJQXdJTCxpQkFBQztDQXBKRCxBQW9KQyxJQUFBO2tCQXBKb0IsVUFBVTs7OztBQ3ZJL0I7SUFBQTtJQTBHQSxDQUFDO0lBekdHLFFBQVE7SUFDUjs7OztPQUlHO0lBQ1csa0JBQVcsR0FBekIsVUFBMEIsSUFBbUIsRUFBRSxJQUFtQjtRQUM5RCxPQUFRLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxLQUFLLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDVyxjQUFPLEdBQXJCLFVBQXNCLEdBQWUsRUFBRSxHQUFrQixFQUFFLEtBQVk7UUFDbkUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFHRCxRQUFRO0lBS1I7Ozs7OztPQU1HO0lBQ1csaUJBQVUsR0FBeEIsVUFBeUIsTUFBYSxFQUFFLE1BQWEsRUFBRSxPQUFjLEVBQUUsT0FBYztRQUNqRixPQUFRLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFDLE9BQU8sRUFBQyxNQUFNLENBQUM7WUFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUMsT0FBTyxFQUFDLE1BQU0sR0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDVyxpQkFBVSxHQUF4QixVQUF5QixNQUFhLEVBQUUsTUFBYSxFQUFFLEdBQVU7UUFDN0QsT0FBTyxHQUFHLElBQUUsTUFBTSxJQUFJLEdBQUcsSUFBRSxNQUFNLEdBQUMsTUFBTSxDQUFDO0lBQzdDLENBQUM7SUFFRDs7OztPQUlHO0lBQ1csZ0JBQVMsR0FBdkIsVUFBd0IsT0FBYyxFQUFFLE9BQWtCO1FBQWxCLHdCQUFBLEVBQUEsV0FBa0I7UUFDdEQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBQyxDQUFDLE9BQU8sR0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ1csYUFBTSxHQUFwQixVQUFxQixLQUFZLEVBQUUsS0FBWSxFQUFFLEdBQVU7UUFDdkQsSUFBSSxNQUFNLEdBQVUsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQyxJQUFJLEtBQUssR0FBQyxDQUFDLElBQUksTUFBTSxHQUFDLEdBQUcsRUFBRTtZQUN2QixNQUFNLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO2FBQU0sSUFBSSxLQUFLLEdBQUMsQ0FBQyxJQUFJLE1BQU0sR0FBQyxHQUFHLEVBQUU7WUFDOUIsTUFBTSxHQUFHLEdBQUcsQ0FBQztTQUNoQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBRWxCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDVyxpQkFBVSxHQUF4QixVQUF5QixNQUFZLEVBQUUsS0FBYyxFQUFFLFFBQXVCO1FBQXZCLHlCQUFBLEVBQUEsZUFBdUI7UUFDMUUsZ0JBQWdCO1FBQ2hCLElBQUksUUFBUSxHQUFXLElBQUksQ0FBQztRQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ2hCLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxHQUFHLEdBQVUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLElBQUksR0FBVSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxJQUFJLFFBQVEsQ0FBQSxDQUFDLENBQUEsQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxFQUFFO29CQUNoQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4QixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDdEIsUUFBUSxHQUFHLEtBQUssQ0FBQztpQkFDcEI7Z0JBQ0QsYUFBYTthQUNoQjtZQUNELElBQUksUUFBUSxFQUFFO2dCQUNWLE1BQU07YUFDVDtTQUNKO0lBQ0wsQ0FBQztJQUdMLGFBQUM7QUFBRCxDQTFHQSxBQTBHQyxJQUFBOzs7OztBQ3pHRCxJQUFPLEtBQUssR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3hCLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQzdDLElBQWMsRUFBRSxDQXNCZjtBQXRCRCxXQUFjLEVBQUU7SUFDWjtRQUFpQywrQkFBSztRQU1sQzttQkFBZSxpQkFBTztRQUFBLENBQUM7UUFDdkIsb0NBQWMsR0FBZDtZQUNJLGlCQUFNLGNBQWMsV0FBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUNMLGtCQUFDO0lBQUQsQ0FYQSxBQVdDLENBWGdDLEtBQUssR0FXckM7SUFYWSxjQUFXLGNBV3ZCLENBQUE7SUFDRCxHQUFHLENBQUMsZ0JBQWdCLEVBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEM7UUFBb0Msa0NBQUs7UUFDckM7bUJBQWUsaUJBQU87UUFBQSxDQUFDO1FBQ3ZCLHVDQUFjLEdBQWQ7WUFDSSxpQkFBTSxjQUFjLFdBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7UUFDTCxxQkFBQztJQUFELENBTkEsQUFNQyxDQU5tQyxLQUFLLEdBTXhDO0lBTlksaUJBQWMsaUJBTTFCLENBQUE7SUFDRCxHQUFHLENBQUMsbUJBQW1CLEVBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUMsQ0FBQyxFQXRCYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUFzQmYiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBHYW1lIGZyb20gXCIuL1NjZW5lU2NyaXB0L0dhbWVcIlxuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4vU2NlbmVTY3JpcHQvTG9hZGluZ1wiXHJcbi8qXHJcbiog5ri45oiP5Yid5aeL5YyW6YWN572uO1xyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIHdpZHRoOm51bWJlcj0xNDAwO1xyXG4gICAgc3RhdGljIGhlaWdodDpudW1iZXI9OTAwO1xyXG4gICAgc3RhdGljIHNjYWxlTW9kZTpzdHJpbmc9XCJub3NjYWxlXCI7XHJcbiAgICBzdGF0aWMgc2NyZWVuTW9kZTpzdHJpbmc9XCJub25lXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25WOnN0cmluZz1cInRvcFwiO1xyXG4gICAgc3RhdGljIGFsaWduSDpzdHJpbmc9XCJsZWZ0XCI7XHJcbiAgICBzdGF0aWMgc3RhcnRTY2VuZTphbnk9XCJMb2FkaW5nU2NlbmUuc2NlbmVcIjtcclxuICAgIHN0YXRpYyBzY2VuZVJvb3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBzdGF0aWMgZGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0OmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgcGh5c2ljc0RlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgZXhwb3J0U2NlbmVUb0pzb246Ym9vbGVhbj10cnVlO1xyXG4gICAgY29uc3RydWN0b3IoKXt9XHJcbiAgICBzdGF0aWMgaW5pdCgpe1xyXG4gICAgICAgIHZhciByZWc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xyXG4gICAgICAgIHJlZyhcIlNjZW5lU2NyaXB0L0dhbWUudHNcIixHYW1lKTtcbiAgICAgICAgcmVnKFwiU2NlbmVTY3JpcHQvTG9hZGluZy50c1wiLExvYWRpbmcpO1xyXG4gICAgfVxyXG59XHJcbkdhbWVDb25maWcuaW5pdCgpOyIsImltcG9ydCBHYW1lQ29uZmlnIGZyb20gXCIuL0dhbWVDb25maWdcIjtcclxuaW1wb3J0IFNjZW5lTWFuYWdlciBmcm9tIFwiLi9TY2VuZU1hbmFnZXJcIjtcclxuY2xhc3MgTWFpbiB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHQvL+agueaNrklEReiuvue9ruWIneWni+WMluW8leaTjlx0XHRcclxuXHRcdGlmICh3aW5kb3dbXCJMYXlhM0RcIl0pIExheWEzRC5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0KTtcclxuXHRcdGVsc2UgTGF5YS5pbml0KEdhbWVDb25maWcud2lkdGgsIEdhbWVDb25maWcuaGVpZ2h0LCBMYXlhW1wiV2ViR0xcIl0pO1xyXG5cdFx0TGF5YVtcIlBoeXNpY3NcIl0gJiYgTGF5YVtcIlBoeXNpY3NcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhW1wiRGVidWdQYW5lbFwiXSAmJiBMYXlhW1wiRGVidWdQYW5lbFwiXS5lbmFibGUoKTtcclxuXHRcdExheWEuc3RhZ2Uuc2NhbGVNb2RlID0gR2FtZUNvbmZpZy5zY2FsZU1vZGU7XHJcblx0XHRMYXlhLnN0YWdlLnNjcmVlbk1vZGUgPSBHYW1lQ29uZmlnLnNjcmVlbk1vZGU7XHJcblx0XHQvL+WFvOWuueW+ruS/oeS4jeaUr+aMgeWKoOi9vXNjZW5l5ZCO57yA5Zy65pmvXHJcblx0XHRMYXlhLlVSTC5leHBvcnRTY2VuZVRvSnNvbiA9IEdhbWVDb25maWcuZXhwb3J0U2NlbmVUb0pzb247XHJcblxyXG5cdFx0Ly/miZPlvIDosIPor5XpnaLmnb/vvIjpgJrov4dJREXorr7nva7osIPor5XmqKHlvI/vvIzmiJbogIV1cmzlnLDlnYDlop7liqBkZWJ1Zz10cnVl5Y+C5pWw77yM5Z2H5Y+v5omT5byA6LCD6K+V6Z2i5p2/77yJXHJcblx0XHRpZiAoR2FtZUNvbmZpZy5kZWJ1ZyB8fCBMYXlhLlV0aWxzLmdldFF1ZXJ5U3RyaW5nKFwiZGVidWdcIikgPT0gXCJ0cnVlXCIpIExheWEuZW5hYmxlRGVidWdQYW5lbCgpO1xyXG5cdFx0aWYgKEdhbWVDb25maWcucGh5c2ljc0RlYnVnICYmIExheWFbXCJQaHlzaWNzRGVidWdEcmF3XCJdKSBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXS5lbmFibGUoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnN0YXQpIExheWEuU3RhdC5zaG93KCk7XHJcblx0XHRMYXlhLmFsZXJ0R2xvYmFsRXJyb3IgPSB0cnVlO1xyXG5cclxuXHRcdC8v5r+A5rS76LWE5rqQ54mI5pys5o6n5Yi277yMdmVyc2lvbi5qc29u55SxSURF5Y+R5biD5Yqf6IO96Ieq5Yqo55Sf5oiQ77yM5aaC5p6c5rKh5pyJ5Lmf5LiN5b2x5ZON5ZCO57ut5rWB56iLXHJcblx0XHRMYXlhLlJlc291cmNlVmVyc2lvbi5lbmFibGUoXCJ2ZXJzaW9uLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uVmVyc2lvbkxvYWRlZCksIExheWEuUmVzb3VyY2VWZXJzaW9uLkZJTEVOQU1FX1ZFUlNJT04pO1xyXG5cdH1cclxuXHJcblx0b25WZXJzaW9uTG9hZGVkKCk6IHZvaWQge1xyXG5cdFx0Ly/mv4DmtLvlpKflsI/lm77mmKDlsITvvIzliqDovb3lsI/lm77nmoTml7blgJnvvIzlpoLmnpzlj5HnjrDlsI/lm77lnKjlpKflm77lkIjpm4bph4zpnaLvvIzliJnkvJjlhYjliqDovb3lpKflm77lkIjpm4bvvIzogIzkuI3mmK/lsI/lm75cclxuXHRcdExheWEuQXRsYXNJbmZvTWFuYWdlci5lbmFibGUoXCJmaWxlY29uZmlnLmpzb25cIiwgTGF5YS5IYW5kbGVyLmNyZWF0ZSh0aGlzLCB0aGlzLm9uQ29uZmlnTG9hZGVkKSk7XHJcblx0fVxyXG5cclxuXHRvbkNvbmZpZ0xvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5Yqg6L29SURF5oyH5a6a55qE5Zy65pmvXHJcblx0XHRuZXcgU2NlbmVNYW5hZ2VyKClcclxuXHRcdC8vIEdhbWVDb25maWcuc3RhcnRTY2VuZSAmJiBMYXlhLlNjZW5lLm9wZW4oR2FtZUNvbmZpZy5zdGFydFNjZW5lKTtcclxuXHR9XHJcbn1cclxuLy/mv4DmtLvlkK/liqjnsbtcclxubmV3IE1haW4oKTtcclxuIiwiaW1wb3J0IEV2ZW50Q2VudHJlIGZyb20gXCIuL1RveWJveC9FdmVudENlbnRyZVwiO1xyXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSBcIi4vVG95Ym94L0RhdGFiYXNlXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NlbmVNYW5hZ2Vye1xyXG4gICAgcHJpdmF0ZSBsb2FkaW5nU2NlbmU6c3RyaW5nID0gXCJMb2FkaW5nU2NlbmUuc2NlbmVcIjtcclxuICAgIHByaXZhdGUgZ2FtZVNjZW5lOnN0cmluZyA9IFwiR2FtZVNjZW5lLnNjZW5lXCI7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIEV2ZW50Q2VudHJlLmluaXQoKTtcclxuICAgICAgICBEYXRhYmFzZS5pbml0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgTGF5YS5TY2VuZS5vcGVuKHRoaXMubG9hZGluZ1NjZW5lKTtcclxuXHJcbiAgICAgICAgRXZlbnRDZW50cmUuaW5zdC5vbmNlKFwiSW5pdFwiLCBcIlJlZ3VsYXJcIiwgdGhpcywgKCk9PntcclxuICAgICAgICAgICAgTGF5YS5TY2VuZS5vcGVuKHRoaXMuZ2FtZVNjZW5lKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge3VpfSBmcm9tIFwiLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi4vVG95Ym94L0RhdGFiYXNlXCI7XHJcbmltcG9ydCBFdmVudENlbnRyZSBmcm9tIFwiLi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcbmltcG9ydCBHYW1lRmllbGRTY2VuZVVJIGZyb20gXCIuL0dhbWVPYmovR2FtZUZpZWxkVUlcIjtcclxuaW1wb3J0IEdhbWVGaWVsZFVJIGZyb20gXCIuL0dhbWVPYmovR2FtZUZpZWxkVUlcIjtcclxuaW1wb3J0IEVuZW15Q2VudHJlIGZyb20gXCIuL0dhbWVPYmovRW5lbXlDZW50cmVcIjtcclxuaW1wb3J0IHsgU3RydWMgfSBmcm9tIFwiLi4vVG95Ym94L0RhdGFTdHJ1Y3R1cmVcIjtcclxuaW1wb3J0IE15TWF0aCBmcm9tIFwiLi4vVG95Ym94L215TWF0aFwiO1xyXG5pbXBvcnQgTWFzc0VmZmVjdCBmcm9tIFwiLi4vVG95Ym94L01hc3NFZmZlY3RcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIGV4dGVuZHMgdWkuR2FtZVNjZW5lVUl7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgXHJcblxyXG4gICAgXHJcbiAgICAgICAgR2FtZUZpZWxkVUkuaW5pdCh0aGlzLnNjZW5lKTsvL3Vp5Yid5aeL5YyWXHJcbiAgICAgICAgRW5lbXlDZW50cmUuaW5pdCgpOy8v5pWM5Lq6566h55CG57G75Yid5aeL5YyWXHJcbiAgICAgICAgTWFzc0VmZmVjdC5pbml0KHRoaXMpOy8v54mp55CG57G75Yid5aeL5YyWXHJcbiAgICAgICAgTWFzc0VmZmVjdC5pLnRlc3QoKTsvL+eJqeeQhuexu+i/m+ihjOa1i+ivlSDlj6/np7vpmaRcclxuICAgICAgICBMYXlhLnRpbWVyLmxvb3AoMTcsdGhpcyx0aGlzLmZyYW1lV29yayk7Ly/lvIDlp4vluKflvqrnjq9cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF90aW1lOm51bWJlciA9IDA7XHJcbiAgICAvL+i/meS4quWPmOmHj+S7o+ihqOa4uOaIj+S7juW8gOWni+WIsOeOsOWcqOi/kOihjOS6huWkmuWwkeW4p1xyXG5cclxuICAgIHB1YmxpYyBmcmFtZVdvcmsoKTp2b2lke1xyXG4gICAgICAgIFxyXG4gICAgICAgIEVuZW15Q2VudHJlLmkuZnJhbWVXb3JrKHRoaXMuX3RpbWUpO1xyXG4gICAgICAgIEdhbWVGaWVsZFVJLmkuZnJhbWVXb3JrKCk7XHJcbiAgICAgICAgTWFzc0VmZmVjdC5pLmZyYW1lV29yaygpO1xyXG4gICAgICAgIHRoaXMuX3RpbWUgKz0gMTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxufVxyXG5cclxuIiwiaW1wb3J0IEVuZW15IGZyb20gXCIuL1Blb3BsZV9zdHVmZi9FbmVteVwiO1xyXG5pbXBvcnQgeyBTdHJ1YyB9IGZyb20gXCIuLi8uLi9Ub3lib3gvRGF0YVN0cnVjdHVyZVwiO1xyXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSBcIi4uLy4uL1RveWJveC9EYXRhYmFzZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZW15Q2VudHJle1xyXG4gICAgcHVibGljIHN0YXRpYyBpOkVuZW15Q2VudHJlO1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KCk6dm9pZHtcclxuICAgICAgICB0aGlzLmkgPSBuZXcgRW5lbXlDZW50cmUoKTtcclxuICAgICAgICB0aGlzLmluaXQgPSAoKT0+e307XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5fZW5lbXlHcm91cCA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vU3RhcnRcclxuICAgICAgICAvL+WIneWni+WMluaXtumXtOi9tFxyXG4gICAgICAgIGxldCB0aW1lRGF0YTphbnkgPSBEYXRhYmFzZS5pbnN0LmdldFRpbWV0YWJsZSgpO1xyXG4gICAgICAgIHRoaXMuX3RpbWV0YWJsZSA9IG5ldyBTdHJ1Yy5Qb2ludGVyTGlzdDxhbnk+KHRpbWVEYXRhKTtcclxuICAgICAgICAvL+WIneWni+WMluaXtumXtOi9tFxyXG4gICAgICAgIC8vRW5kXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZW5lbXlHcm91cDpFbmVteVtdO1xyXG4gICAgcHJpdmF0ZSBfdGltZXRhYmxlOlN0cnVjLlBvaW50ZXJMaXN0PGFueT47XHJcbiAgICBcclxuXHJcbiAgICBwdWJsaWMgZnJhbWVXb3JrKHRpbWU6bnVtYmVyKTp2b2lke1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAg6L+Z5Liq5Ye95pWw5pivRW5lbXlDZW50cmXnsbvmr4/luKfmiYDlgZrnmoTkuovmg4VcclxuICAgICAgICB0aW1l5piv5q2k5qyh5ri45oiP6Ieq5ri45oiP5byA5aeL6Iez6L+Z5Liq5Ye95pWw6L+Q6KGM5LmL5pe25bey57uP57uP6L+H55qE5bin5pWwXHJcbiAgICAgICAg5Zyo6aKE5pyf5Lit77yM6L+Z5Liq5pWw5YC85Lya5LuOMOW8gOWni++8jOavj+W4pysxXHJcbiAgICAgICAgKi9cclxuICAgICAgICBpZiAoIXRoaXMuX3RpbWV0YWJsZS5leGNlZWRpbmcgJiYgdGltZSA9PSB0aGlzLl90aW1ldGFibGUucmVhZCgpW1widGltZVwiXSkge1xyXG4gICAgICAgICAgICAvL+epuuWAvOajgOafpSAmJiDlvZPliY3ml7bpl7TkuI7ml7bpl7TooajkuIrnmoTml7bpl7TkuIDoh7RcclxuICAgICAgICAgICAgbGV0IGRhdGE6YW55ID0gdGhpcy5fdGltZXRhYmxlLnJlYWQoKTtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVFbmVteShkYXRhW1widHlwZVwiXSwgZGF0YVtcInBhdGhcIl0pO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1ldGFibGUuc3RlcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9lbmVteUdyb3VwLmZvckVhY2goZW5lbXk9PnsvL+avj+S4qkVuZW155oyo5Liq5YGa5LqLXHJcbiAgICAgICAgICAgIGVuZW15LmZyYW1lV29yaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVFbmVteShlbmVteUlEOnN0cmluZywgcGF0aElEOnN0cmluZyk6dm9pZHtcclxuICAgICAgICBsZXQgZW5lbXk6RW5lbXkgPSBuZXcgRW5lbXkoZW5lbXlJRCwgcGF0aElEKTtcclxuICAgICAgICB0aGlzLl9lbmVteUdyb3VwLnB1c2goZW5lbXkpO1xyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi4vLi4vVG95Ym94L0RhdGFiYXNlXCI7XHJcbmltcG9ydCBFdmVudENlbnRyZSBmcm9tIFwiLi4vLi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcbmltcG9ydCB7IFN0cnVjIH0gZnJvbSBcIi4uLy4uL1RveWJveC9EYXRhU3RydWN0dXJlXCI7XHJcbmltcG9ydCBNeU1hdGggZnJvbSBcIi4uLy4uL1RveWJveC9teU1hdGhcIjtcclxuXHJcblxyXG5cclxuY2xhc3MgU2lkZUZpZWxke1xyXG4gICAgY29uc3RydWN0b3Ioc2NlbmU6TGF5YS5TY2VuZSl7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuXHJcbnR5cGUgbW92ZW1lbnQgPSB7XHJcbiAgICB4X3NwZWVkOm51bWJlcixcclxuICAgIHlfc3BlZWQ6bnVtYmVyLFxyXG4gICAgeF9lbmQ6bnVtYmVyLFxyXG4gICAgeV9lbmQ6bnVtYmVyLFxyXG4gICAgY2FsbGJhY2s6RnVuY3Rpb25cclxuICAgIFxyXG59XHJcblxyXG5jbGFzcyBDZW50cmVGaWVsZHtcclxuICAgIHByaXZhdGUgX2Jsb2NrczpMYXlhLlNwcml0ZVtdW107XHJcbiAgICAvKlxyXG4gICAgYmxvY2tz5piv5ri45oiP55WM6Z2i5YyF5ZCr55qE5qC85a2Qc3ByaXRl6ZuG5ZCIXHJcbiAgICDmr4/kuKpzcHJpdGXnmoTniLbnuqdzcHJpdGXpg73mmK9zY2VuZeS4i+eahFVJU2V0XHJcbiAgICDlnKjlj5bnlKhibG9ja+aXtu+8jOesrOS4gOWxguaVsOe7hOeahGluZGV45YC85Li65qiq5Z2Q5qCH77yM56ys5LqM5bGC5pWw57uE55qEaW5kZXjlgLzkuLrnurXlnZDmoIdcclxuICAgICovXHJcbiAgICBwcml2YXRlIF9zaXplOm51bWJlcjtcclxuICAgIHByaXZhdGUgX3dpZHRoOm51bWJlcjtcclxuICAgIHByaXZhdGUgX2hlaWdodDpudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihzY2VuZTpMYXlhLlNjZW5lKXtcclxuICAgICAgICBjb25zdCBkYXRhOmFueSA9IERhdGFiYXNlLmluc3QuZ2V0R3JvdW5kKCk7XHJcbiAgICAgICAgY29uc3QgW3dpZHRoLCBoZWlnaHQsIHNpemVdID0gW2RhdGFbXCJ3aWR0aFwiXSwgZGF0YVtcImhlaWdodFwiXSwgZGF0YVtcInNpemVcIl1dO1xyXG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX3NjZW5lID0gc2NlbmU7XHJcblxyXG4gICAgICAgIC8vU3RhcnRcclxuICAgICAgICAvL+WIm+W7uuWcsOWbvuaWueagvFxyXG4gICAgICAgIHRoaXMuX2Jsb2NrcyA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Jsb2Nrc1t4XSA9IFtdXHJcbiAgICAgICAgICAgIGZvcihsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJsb2NrOkxheWEuU3ByaXRlID0gTGF5YS5TcHJpdGUuZnJvbUltYWdlKFwiQmFzaWMvUmVjLnBuZ1wiKTtcclxuICAgICAgICAgICAgICAgIHNjZW5lLmdldENoaWxkQnlOYW1lKFwiVUlTZXRcIikuYWRkQ2hpbGQoYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgYmxvY2suc2l6ZShzaXplLHNpemUpLnBvcyh4KnNpemUseSpzaXplKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Jsb2Nrc1t4XVt5XSA9IGJsb2NrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5Yib5bu65Zyw5Zu+5pa55qC8XHJcbiAgICAgICAgLy9FbmRcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2NlbmU6TGF5YS5TY2VuZTtcclxuXHJcbiAgICBwdWJsaWMgQ3JlYXRlRW5lbXkoaW1nVVJMOnN0cmluZyx4Om51bWJlciA9IDAseTpudW1iZXIgPSAwKTpMYXlhLlNwcml0ZXtcclxuICAgICAgICBsZXQgc3ByaXRlOkxheWEuU3ByaXRlID0gTGF5YS5TcHJpdGUuZnJvbUltYWdlKGltZ1VSTCk7Ly/liJvlu7pzcHJpdGVcclxuICAgICAgICB0aGlzLl9zY2VuZS5nZXRDaGlsZEJ5TmFtZShcIlVJU2V0XCIpLmFkZENoaWxkKHNwcml0ZSk7Ly/mj5LlhaXkuK3lv4PljLrln59cclxuICAgICAgICBzcHJpdGUuc2l6ZShEYXRhYmFzZS5pbnN0LlVuaXRTaXplLCBEYXRhYmFzZS5pbnN0LlVuaXRTaXplKTsvL+agueaNruaVsOaNruW6k+aPkOS+m+eahOW4uOmHj+iuvue9ruWkp+Wwj1xyXG4gICAgICAgIHNwcml0ZS5wb3MoeCx5KTsvL+ehruWumuS9jee9rlxyXG4gICAgICAgIHJldHVybiBzcHJpdGU7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgcHVibGljIGZyYW1lV29yaygpOnZvaWR7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0gICAgXHJcbiAgICBcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUZpZWxkVUl7XHJcbiAgICAvKlxyXG4gICAg5o6n5Yi25pW05LiqR2FtZeWcuuaZr+S4reWPr+inhuWFg+e0oOeahOexu1xyXG4gICAg5q2k57G75piv5Y2V5L6LXHJcbiAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpOkdhbWVGaWVsZFVJO1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KHNjZW5lOkxheWEuU2NlbmUpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5pID0gbmV3IEdhbWVGaWVsZFVJKHNjZW5lKTtcclxuICAgICAgICB0aGlzLmluaXQgPSAoKT0+e307XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihzY2VuZSl7XHJcbiAgICAgICAgdGhpcy5fc2lkZSA9IG5ldyBTaWRlRmllbGQoc2NlbmUpO1xyXG4gICAgICAgIHRoaXMuX2NlbnRyZSA9IG5ldyBDZW50cmVGaWVsZChzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUgPSBzY2VuZTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zY2VuZTpMYXlhLlNjZW5lO1xyXG4gICAgcHJpdmF0ZSBfc2lkZTpTaWRlRmllbGQ7ICAgICAgICAvL+WcuuaZr+WPs+S+p+eahOW5suWRmOmAieahhlxyXG4gICAgcHJpdmF0ZSBfY2VudHJlOkNlbnRyZUZpZWxkOyAgICAvL+WcuuaZr+S4remXtOeahOa4uOaIj+WcsOWbvlxyXG4gICAgcHVibGljIGdldCBDZW50cmUoKTpDZW50cmVGaWVsZHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2VudHJlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmcmFtZVdvcmsoKTp2b2lke1xyXG4gICAgICAgIHRoaXMuX2NlbnRyZS5mcmFtZVdvcmsoKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxufSIsImltcG9ydCBQZW9wbGUgZnJvbSBcIi4vUGVvcGxlXCI7XHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L0RhdGFiYXNlXCI7XHJcbmltcG9ydCBFdmVudENlbnRyZSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcbmltcG9ydCBHYW1lRmllbGRVSSBmcm9tIFwiLi4vR2FtZUZpZWxkVUlcIjtcclxuaW1wb3J0IHsgU3RydWMgfSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L0RhdGFTdHJ1Y3R1cmVcIjtcclxuaW1wb3J0IFByZXNlbnQgZnJvbSBcIi4vUHJlc2VudFwiO1xyXG5pbXBvcnQgU3RhdGUgZnJvbSBcIi4vU3RhdGVcIjtcclxuaW1wb3J0IE15TWF0aCBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L215TWF0aFwiO1xyXG5pbXBvcnQgTWFzc0VmZmVjdCBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L01hc3NFZmZlY3RcIjtcclxuXHJcbi8qKlxyXG4gKiDmlYzkurrnmoTooajnjrDnsbtcclxuICovXHJcbmNsYXNzIEVuZW15UHN0IGV4dGVuZHMgUHJlc2VudHtcclxuICAgIGNvbnN0cnVjdG9yKHVybDpzdHJpbmcpe1xyXG4gICAgICAgIHN1cGVyKHVybCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcGVyZm9ybShzdGF0ZTpFbmVteVN0dCk6dm9pZHtcclxuICAgICAgICB0aGlzLl9zcHJpdGUucG9zKHN0YXRlLngsc3RhdGUueSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmlYzkurrnmoTnirbmgIHnsbtcclxuICovXHJcbmNsYXNzIEVuZW15U3R0IGV4dGVuZHMgU3RhdGV7XHJcbiAgICBwcml2YXRlIF9wYXRoOlN0cnVjLlBvaW50ZXJMaXN0PHt4Om51bWJlcix5Om51bWJlcn0+O1xyXG4gICAgcHJpdmF0ZSBfeFNwZWVkOm51bWJlcjtcclxuICAgIHByaXZhdGUgX3lTcGVlZDpudW1iZXI7XHJcbiAgICBwcml2YXRlIF9zcGVlZDpudW1iZXI7XHJcbiAgICBwdWJsaWMgb3V0OmJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6YW55LCBwYXRoSUQ6c3RyaW5nKXtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICAvL+WIneWni+WMlui3r+W+hFxyXG4gICAgICAgIHRoaXMuX3BhdGggPSBuZXcgU3RydWMuUG9pbnRlckxpc3Q8e3g6bnVtYmVyLHk6bnVtYmVyfT4oKTtcclxuICAgICAgICBsZXQgcmF3UGF0aDpudW1iZXJbXVtdID0gRGF0YWJhc2UuaW5zdC5nZXRQYXRoKHBhdGhJRCk7XHJcbiAgICAgICAgcmF3UGF0aC5mb3JFYWNoKChlbGUsaW5kZXgpPT57XHJcbiAgICAgICAgICAgIHRoaXMuX3BhdGgucHVzaCh7eDplbGVbMF0sIHk6ZWxlWzFdfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy/liJ3lp4vljJbkvY3nva5cclxuICAgICAgICB0aGlzLl94ID0gdGhpcy5fcGF0aC5maXJzdC54O1xyXG4gICAgICAgIHRoaXMuX3kgPSB0aGlzLl9wYXRoLmZpcnN0Lnk7XHJcbiAgICAgICAgLy/liJ3lp4vljJbpgJ/luqZcclxuICAgICAgICB0aGlzLl9zcGVlZCA9IGRhdGFbXCJzcGVlZFwiXTtcclxuICAgICAgICAvL+WIneWni+WMlui9tOmAn+W6plxyXG4gICAgICAgIHRoaXMuX3Jlc2V0QXhpc1NwZWVkKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3Jlc2V0QXhpc1NwZWVkKCk6dm9pZHtcclxuICAgICAgICBpZiAodGhpcy5fcGF0aC5hdEVuZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbid0IHJlc2V0IHNwZWVkXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBuZXh0Ont4Om51bWJlcix5Om51bWJlcn0gPSB0aGlzLl9wYXRoLm5leHQoKTtcclxuICAgICAgICBjb25zdCBbeF9kaXMsIHlfZGlzXSA9IFtuZXh0LnggLSB0aGlzLl94LCBuZXh0LnkgLSB0aGlzLl95XTtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyh4X2RpcywyKSArIE1hdGgucG93KHlfZGlzLDIpKTtcclxuICAgICAgICBjb25zdCB0aW1lID0gZGlzdGFuY2UvdGhpcy5fc3BlZWQ7XHJcbiAgICAgICAgdGhpcy5feFNwZWVkID0geF9kaXMvdGltZTtcclxuICAgICAgICB0aGlzLl95U3BlZWQgPSB5X2Rpcy90aW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQb3NpdGlvbih4Om51bWJlciwgeTpudW1iZXIpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5feCA9IHg7XHJcbiAgICAgICAgdGhpcy5feSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5leHRUYXJnZXQoKTp2b2lke1xyXG4gICAgICAgIGlmICh0aGlzLl9wYXRoLmF0RW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcGF0aC5zdGVwKCk7XHJcbiAgICAgICAgdGhpcy5fcmVzZXRBeGlzU3BlZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGlzQXJyaXZlZCgpOmJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl94ID09PSB0aGlzLl9wYXRoLm5leHQoKS54KSAmJiAodGhpcy5feSA9PT0gdGhpcy5fcGF0aC5uZXh0KCkueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB4KCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLl94O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCB5KCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCB4U3BlZWQoKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3hTcGVlZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgeVNwZWVkKCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95U3BlZWQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHRhcmdldCgpOnt4Om51bWJlciwgeTpudW1iZXJ9IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcGF0aC5uZXh0KCk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuLyoqXHJcbiAqIOaVjOS6uueahOmAu+i+keexu1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBQZW9wbGV7XHJcbiAgICBwcml2YXRlIF9kYXRhOmFueTtcclxuICAgIHByaXZhdGUgX3BhdGg6U3RydWMuUG9pbnRlckxpc3Q8bnVtYmVyW10+O1xyXG4gICAgcHJpdmF0ZSBfcHJlc2VudDpFbmVteVBzdDtcclxuICAgIHByaXZhdGUgX3N0YXRlOkVuZW15U3R0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaWQg5pWM5Lq6aWTvvIznlKjkuo7ojrflj5bmlYzkurrmlbDmja5cclxuICAgICAqIEBwYXJhbSBwYXRoSUQg6Lev5b6EaWTvvIznlKjkuo7ojrflj5bot6/lvoTmlbDmja5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQ6c3RyaW5nLCBwYXRoSUQ6c3RyaW5nKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIC8v6I635Y+W5pWw5o2u5ZKM6Lev5b6EXHJcbiAgICAgICAgbGV0IGRhdGE6YW55ID0gRGF0YWJhc2UuaW5zdC5nZXRFbmVteShpZCk7XHJcbiAgICAgICAgbGV0IHBhdGg6YW55ID0gRGF0YWJhc2UuaW5zdC5nZXRQYXRoKHBhdGhJRCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5fcGF0aCA9IG5ldyBTdHJ1Yy5Qb2ludGVyTGlzdDxudW1iZXJbXT4ocGF0aCk7XHJcblxyXG4gICAgICAgIC8v5Yib5bu66KGo546w57G75ZKM5pWw5o2u57G7XHJcbiAgICAgICAgdGhpcy5fcHJlc2VudCA9IG5ldyBFbmVteVBzdChkYXRhW1wiaW1nXCJdKTtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IG5ldyBFbmVteVN0dChkYXRhLCBwYXRoSUQpO1xyXG5cclxuICAgICAgICAvL+WIm+W7uueisOaSnueusVxyXG4gICAgICAgIC8v6K6+572u55uR5ZCs5LqL5Lu2XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgZnJhbWVXb3JrKCk6dm9pZHtcclxuICAgICAgICBpZiAodGhpcy5fc3RhdGUub3V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy/ov5vooYznp7vliqhcclxuICAgICAgICBpZiAodGhpcy5fc3RhdGUuaXNBcnJpdmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLm5leHRUYXJnZXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHt4LHkseFNwZWVkLHlTcGVlZCx0YXJnZXR9ID0gdGhpcy5fc3RhdGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUub3V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBuZXd4Om51bWJlciA9IE15TWF0aC5tb3ZlVG8oeCx4U3BlZWQsdGFyZ2V0LngpO1xyXG4gICAgICAgIGxldCBuZXd5Om51bWJlciA9IE15TWF0aC5tb3ZlVG8oeSx5U3BlZWQsdGFyZ2V0LnkpO1xyXG4gICAgICAgIHRoaXMuX3N0YXRlLnNldFBvc2l0aW9uKG5ld3gsbmV3eSk7XHJcbiAgICAgICAgLy/liLfmlrDkvY3nva5cclxuICAgICAgICB0aGlzLl9wcmVzZW50LnBlcmZvcm0odGhpcy5fc3RhdGUpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgUGVvcGxle1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgR2FtZUZpZWxkVUkgZnJvbSBcIi4uL0dhbWVGaWVsZFVJXCI7XHJcblxyXG4vKipcclxuICog5omA5pyJ6KGo546w57G755qE5Z+657G7XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBQcmVzZW50e1xyXG4gICAgcHJvdGVjdGVkIF9zcHJpdGU6TGF5YS5TcHJpdGU7XHJcbiAgICBjb25zdHJ1Y3Rvcih1cmw6c3RyaW5nKXtcclxuICAgICAgICB0aGlzLl9zcHJpdGUgPSBHYW1lRmllbGRVSS5pLkNlbnRyZS5DcmVhdGVFbmVteSh1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc3ByaXRlKCk6TGF5YS5TcHJpdGV7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nwcml0ZTtcclxuICAgIH1cclxufSIsIlxyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBTdGF0ZSB7XHJcbiAgICBwcm90ZWN0ZWQgX3g6bnVtYmVyO1xyXG4gICAgcHJvdGVjdGVkIF95Om51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6YW55KSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge3VpfSBmcm9tIFwiLi4vdWkvbGF5YU1heFVJXCJcclxuaW1wb3J0IEV2ZW50Q2VudHJlIGZyb20gXCIuLi9Ub3lib3gvRXZlbnRDZW50cmVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmcgZXh0ZW5kcyB1aS5Mb2FkaW5nU2NlbmVVSXtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIGNvbnN0IGdhbWVTZXQ6c3RyaW5nID0gXCIuL0RhdGFiYXNlL0dhbWVTZXQuanNvblwiLFxyXG4gICAgICAgIGVuZW15RGF0YWJhc2U6c3RyaW5nID0gXCIuL0RhdGFiYXNlL0VuZW15RGF0YWJhc2UuanNvblwiLFxyXG4gICAgICAgIG9wZXJhdG9yRGF0YWJhc2U6c3RyaW5nID0gXCIuL0RhdGFiYXNlL09wZXJhdG9yRGF0YWJhc2UuanNvblwiXHJcbiAgICAgICAgTGF5YS5sb2FkZXIubG9hZChbZ2FtZVNldCxlbmVteURhdGFiYXNlLG9wZXJhdG9yRGF0YWJhc2VdLExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkxvYWRlZCksbnVsbCxMYXlhLkxvYWRlci5KU09OKVxyXG4gICAgfVxyXG5cclxuICAgIG9uTG9hZGVkKCl7XHJcbiAgICAgICAgRXZlbnRDZW50cmUuaW5zdC5ldmVudChcIkluaXRcIiwgXCJSZWd1bGFyXCIpXHJcbiAgICB9XHJcbn0iLCJcclxuY2xhc3MgTWFwTm9kZTxLLFY+e1xyXG4gICAgcHVibGljIGtleTtcclxuICAgIHB1YmxpYyB2YWx1ZTtcclxuICAgIGNvbnN0cnVjdG9yKGtleTpLLCB2YWx1ZTpWKXtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE5vZGU8RT57XHJcbiAgICBwdWJsaWMgaXRlbTpFO1xyXG4gICAgcHVibGljIG5leHQ6Tm9kZTxFPjtcclxuICAgIGNvbnN0cnVjdG9yKGl0ZW06RSwgbmV4dDpOb2RlPEU+KXtcclxuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xyXG4gICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBtb2R1bGUgU3RydWN7XHJcbiAgICBleHBvcnQgY2xhc3MgTGlua0xpc3Q8RT57XHJcbiAgICAgICAgcHJpdmF0ZSBfaGVhZDpOb2RlPEU+O1xyXG4gICAgICAgIHByaXZhdGUgX3RhaWw6Tm9kZTxFPjtcclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV3IE5vZGU8RT4obnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBuZXcgTm9kZTxFPihudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5Z+656GA5bGe5oCnXHJcbiAgICAgICAgcHVibGljIGdldCBsZW5ndGgoKTpudW1iZXJ7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnQ6Tm9kZTxFPiA9IHRoaXMuX2hlYWQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Lm5leHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAxO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldCBpc0VtcHR5KCk6Ym9vbGVhbntcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWQubmV4dCA9PT0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5aKe5Yig5pS55p+lXHJcbiAgICAgICAgLy/lop5cclxuICAgICAgICBwdWJsaWMgcHVzaChpdGVtOkUpOnZvaWR7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Ok5vZGU8RT4gPSBuZXcgTm9kZTxFPihpdGVtLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZC5uZXh0ID0gbGFzdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhaWwubmV4dCA9IGxhc3Q7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsLm5leHQubmV4dCA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBsYXN0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVuc2hpZnQoaXRlbTpFKTp2b2lke1xyXG4gICAgICAgICAgICBsZXQgZmlyc3Q6Tm9kZTxFPiA9IG5ldyBOb2RlPEU+KGl0ZW0sIG51bGwpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBmaXJzdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWQubmV4dCA9IGZpcnN0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QubmV4dCA9IHRoaXMuX2hlYWQubmV4dC5uZXh0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZC5uZXh0ID0gZmlyc3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnNlcnQoaW5kZXg6bnVtYmVyLCBpdGVtOkUpOmJvb2xlYW57XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLmxlbmd0aCkgey8v6L+Z5Y+l5LiN5LiA5qC3XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VycmVudDpOb2RlPEU+ID0gdGhpcy5faGVhZDsvL+i/meWPpeWSjOWFtuS7lumBjeWOhuaYr+S4jeS4gOagt+eahO+8jOWboOS4uuimgemAieWPluWIsOmAieWumuS9jee9rueahOWJjemdouS4gOagvFxyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGluZGV4OyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQubmV4dCA9IG5ldyBOb2RlPEU+KGl0ZW0sIGN1cnJlbnQubmV4dCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5YigXHJcbiAgICAgICAgcHVibGljIHJlbW92ZShpbmRleDpudW1iZXIpOkV7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VycmVudDpOb2RlPEU+ID0gdGhpcy5faGVhZC5uZXh0O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGluZGV4OyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBpdGVtOkUgPSBjdXJyZW50Lml0ZW07XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzaGlmdCgpOkV7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX2hlYWQubmV4dC5pdGVtO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFkLm5leHQgPSB0aGlzLl9oZWFkLm5leHQubmV4dDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5pS5XHJcbiAgICAgICAgcHVibGljIHdyaXRlKGluZGV4Om51bWJlciwgaXRlbTpFKTp2b2lke1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50Ok5vZGU8RT4gPSB0aGlzLl9oZWFkLm5leHQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgaW5kZXg7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3VycmVudC5pdGVtID0gaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5p+lXHJcbiAgICAgICAgcHVibGljIHJlYWQoaW5kZXg6bnVtYmVyKTpFe1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50Ok5vZGU8RT4gPSB0aGlzLl9oZWFkLm5leHQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgaW5kZXg7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzZWFyY2goaXRlbTpFKTpudW1iZXJbXXtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmZvcmVhY2goKGVsZTpFLCBpbmRleDpudW1iZXIpPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlID09PSBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v6auY6Zi25Ye95pWwXHJcbiAgICAgICAgcHVibGljIGZvcmVhY2goZjooZWxlOkUsIGluZGV4Om51bWJlciwgbGlzdDpMaW5rTGlzdDxFPik9PnZvaWQpOnZvaWR7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZC5uZXh0O1xyXG4gICAgICAgICAgICBsZXQgbnVtOm51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmKGN1cnJlbnQuaXRlbSwgbnVtLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgICAgICBudW0gKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6K+35pqC5pe25LiN6KaB5L2/55So6L+Z5Liq5Ye95pWw77yM5Zug5Li65oiR5Lmf5LiN55+l6YGT5a6D5Lya5LiN5Lya54iG54K4XHJcbiAgICAgICAgICog6Zmk6Z2e5L2g6K+76L+H6L+Z5Liq5Ye95pWw55qE5rqQ5Luj56CBXHJcbiAgICAgICAgICogQHBhcmFtIGYg5Yik5pat5YWD57Sg5LyY5YWI57qn55qE5Zue6LCD5Ye95pWwXHJcbiAgICAgICAgICogQHBhcmFtIGluY3JlYXNlIOaYr+WQpuWNh+W6j++8jOm7mOiupOWNh+W6j1xyXG4gICAgICAgICAqIEByZXR1cm5zIOi/lOWbnuS4gOS4quaOkuW6j+eahOmTvuihqFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzb3J0YnkoZjooZWxlOkUpPT5udW1iZXIsIGluY3JlYXNlOmJvb2xlYW4gPSB0cnVlKTpMaW5rTGlzdDxFPntcclxuICAgICAgICAgICAgbGV0IHByaW9yaXR5OkxpbmtMaXN0PG51bWJlcj4gPSBuZXcgTGlua0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgICAgICBsZXQgc29ydGVkOkxpbmtMaXN0PEU+ID0gbmV3IExpbmtMaXN0PEU+KCk7XHJcbiAgICAgICAgICAgIHByaW9yaXR5LnB1c2goLTApO1xyXG4gICAgICAgICAgICBzb3J0ZWQucHVzaChudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb21wYXJlOihhOm51bWJlcixiOm51bWJlcik9PmJvb2xlYW4gPSBpbmNyZWFzZT8oYSxiKT0+e3JldHVybiBhIDwgYjt9OihhLGIpPT57cmV0dXJuIGEgPiBifTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9yZWFjaCgoZWxlKT0+e1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRQcmkgPSBmKGVsZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbm9kZTpOb2RlPEU+ID0gc29ydGVkLl9oZWFkLm5leHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJpTm9kZTpOb2RlPG51bWJlcj4gPSBwcmlvcml0eS5faGVhZC5uZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBmb3VuZFBsYWNlOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLm5leHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoY3VycmVudFByaSA8IHByaU5vZGUubmV4dC5pdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmUoY3VycmVudFByaSwgcHJpTm9kZS5uZXh0Lml0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmV4dCA9IG5ldyBOb2RlPEU+KGVsZSwgbm9kZS5uZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpTm9kZS5uZXh0ID0gbmV3IE5vZGU8bnVtYmVyPihjdXJyZW50UHJpLCBwcmlOb2RlLm5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFBsYWNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHByaU5vZGUgPSBwcmlOb2RlLm5leHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZFBsYWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkLnB1c2goZWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eS5wdXNoKGN1cnJlbnRQcmkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNvcnRlZC5zaGlmdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gc29ydGVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHVibGljIGJiU29ydEJ5KGY6KGVsZTpFKT0+bnVtYmVyLCBpbmNyZWFzZTpib29sZWFuID0gdHJ1ZSk6TGlua0xpc3Q8RT57XHJcblxyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE1hcDxLLFY+e1xyXG4gICAgICAgIHByaXZhdGUgX2xpc3Q6QXJyYXk8TWFwTm9kZTxLLFY+PlxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3QgPSBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZ2V0KGtleTpLKTpWe1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGUgb2YgdGhpcy5fbGlzdCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlLmtleSA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRLZXlCeVZhbCh2YWw6Vik6S3tcclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlIG9mIHRoaXMuX2xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGUudmFsdWUgPT09IHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGUua2V5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGtleUV4aXN0KGtleTpLKTpib29sZWFue1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGUgb2YgdGhpcy5fbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZS5rZXkgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzZXQoa2V5OkssdmFsdWU6Vik6Ym9vbGVhbntcclxuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0aGlzLl9saXN0Lmxlbmd0aDsgbiArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGlzdFtuXS5rZXkgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3Rbbl0udmFsdWUgPSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9saXN0LnB1c2gobmV3IE1hcE5vZGU8SyxWPihrZXksdmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGJhdGNoU2V0KGtleXM6S1tdLCB2YWx1ZXM6VltdKTpib29sZWFue1xyXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGtleXMubGVuZ3RoOyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleXNbbl0sIHZhbHVlc1tuXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgcmVtb3ZlKGtleTpLKTpib29sZWFue1xyXG4gICAgICAgICAgICBsZXQgY291bnQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlIG9mIHRoaXMuX2xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGUua2V5ID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShjb3VudCwxKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY291bnQgKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGdldCBsZW5ndGgoKTpudW1iZXJ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aFxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZm9yZWFjaChmOihrOkssIHY6Vik9PnZvaWQpOnZvaWR7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVsZSBvZiB0aGlzLl9saXN0KSB7XHJcbiAgICAgICAgICAgICAgICBmKGVsZS5rZXksIGVsZS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZmlsdGVyKGY6KGs6Syx2OlYpPT5ib29sZWFuKTpNYXA8SyxWPntcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8SyxWPigpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGUgb2YgdGhpcy5fbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYoZWxlLmtleSwgZWxlLnZhbHVlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChlbGUua2V5LCBlbGUudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb2ludGVyTGlzdDxFPntcclxuICAgICAgICBwcml2YXRlIF9saXN0OkFycmF5PEU+ID0gW107XHJcbiAgICAgICAgcHJpdmF0ZSBfcG9pbnRlcjpudW1iZXIgPSAwO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHNvdXJjZTpBcnJheTxFPiA9IFtdLCBpbml0UG9pbnQ6bnVtYmVyID0gMCl7XHJcbiAgICAgICAgICAgIHNvdXJjZS5mb3JFYWNoKChlbGUpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnB1c2goZWxlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBleGNlZWRpbmcoKTpib29sZWFue1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlciA+PSB0aGlzLl9saXN0Lmxlbmd0aCB8fCB0aGlzLl9wb2ludGVyIDwgMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICDku6XkuIvms6jph4rkuK3vvIzmiormlbDnu4TnnIvkvZzmqKrlkJHmjpLliJfnmoTkuIDns7vliJflhYPntKBcclxuICAgICAgICBpbmRleCA9IDDnmoTlhYPntKDlnKjmnIDlt6bkvqdcclxuICAgICAgICAqL1xyXG5cclxuICAgICAgICByZWFkKCk6RXsvL+afpeeci+W9k+WJjXBvaW50ZXLmiYDmjIfnmoTlhYPntKBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbdGhpcy5fcG9pbnRlcl1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0ZXAoKTpFey8vcG9pbnRlcuWQkeWPs+enu+S4gOatpVxyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyKz0xO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byhwbGFjZTpudW1iZXIpOlBvaW50ZXJMaXN0PEU+ey8vcG9pbnRlcuenu+WIsOaMh+WumuS9jee9rlxyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyID0gcGxhY2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1c2goZGF0YTpFKTpQb2ludGVyTGlzdDxFPnsvL+WcqOaVsOe7hOacq+WwvuWinuWKoOS4gOS4quWFg+e0oFxyXG4gICAgICAgICAgICB0aGlzLl9saXN0LnB1c2goZGF0YSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldChpbmRleDpudW1iZXIsZGF0YTpFKTpQb2ludGVyTGlzdDxFPnsvL+imhuWGmeaVsOe7hOeJueWummluZGV45Lit55qE5YWD57SgXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RbaW5kZXhdID0gZGF0YVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBuZXh0KHNoaWZ0Om51bWJlciA9IDEpOkV7XHJcbiAgICAgICAgICAgIC8v6K+75Y+W5L2N5LqO5b2T5YmNcG9pbnRlcuaJgOaMh+eahOWFg+e0oOWPs+i+ueiLpeW5suagvOeahOWFg+e0oFxyXG4gICAgICAgICAgICAvL3NoaWZ06buY6K6k5Li6Me+8jOWNs+W9k+WJjXBvaW50ZXLlj7Povrnnm7jpgrvnmoTlhYPntKBcclxuICAgICAgICAgICAgLy9zaGlmdOS4uui0n+aVsOaXtuiOt+WPluW3puS+p+eahOWFg+e0oFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFt0aGlzLl9wb2ludGVyK3NoaWZ0XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGxlbmd0aCgpOm51bWJlcnsvL+iOt+WPluaVsOe7hOmVv+W6plxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBsYXN0KCk6RXsvL+iOt+WPluacgOWQjuS4gOmhuVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFt0aGlzLl9saXN0Lmxlbmd0aC0xXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGZpcnN0KCk6RXsvL+iOt+WPlummlumhuVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBwb2ludGVyKCk6bnVtYmVyey8v6I635Y+WcG9pbnRlclxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGF0RW5kKCk6Ym9vbGVhbnsvL+afpeeci+KAnHBvaW50ZXLmjIflkJHmlbDnu4TmnIDlj7PkvqfnmoTlhYPntKDigJ3nmoTnnJ/lgLxcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50ZXIgPT09IHRoaXMuX2xpc3QubGVuZ3RoIC0gMVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7U3RydWN9IGZyb20gXCIuL0RhdGFTdHJ1Y3R1cmVcIlxyXG5cclxuXHJcbmNvbnN0IGdhbWVTZXRfVVJMOnN0cmluZyA9IFwiLi9EYXRhYmFzZS9HYW1lU2V0Lmpzb25cIixcclxuZW5lbXlEYXRhYmFzZV9VUkw6c3RyaW5nID0gXCIuL0RhdGFiYXNlL0VuZW15RGF0YWJhc2UuanNvblwiLFxyXG5vcGVyYXRvckRhdGFiYXNlX1VSTDpzdHJpbmcgPSBcIi4vRGF0YWJhc2UvT3BlcmF0b3JEYXRhYmFzZS5qc29uXCJcclxuXHJcblxyXG5cclxuXHJcbnR5cGUgRW5lbXlFdmVudCA9IHtcclxuICAgIHRpbWU6bnVtYmVyLFxyXG4gICAgdHlwZURhdGE6YW55LFxyXG4gICAgcGF0aDpudW1iZXJbXVtdXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFiYXNle1xyXG5cclxuICAgIC8v5Yid5aeL5YyWIFN0YXJ0XHJcbiAgICBwdWJsaWMgc3RhdGljIGluc3Q6RGF0YWJhc2VcclxuICAgIC8v55u05o6lcHVibGljIHN0YXRpYyBpbnN0OkRhdGFiYXNlID0gbmV3IERhdGFiYXNlKCks5piv5ZCm5Y+v5Lul5Zyo57G76KOF6L295pe25bCx5Yib5bu65omA6ZyA55qE5Y2V5L6LP1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KCl7XHJcbiAgICAgICAgdGhpcy5pbnN0ID0gbmV3IERhdGFiYXNlKClcclxuICAgICAgICB0aGlzLmluaXQgPSAoKT0+e31cclxuICAgIH1cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBMYXlhLmxvYWRlci5sb2FkKFtlbmVteURhdGFiYXNlX1VSTCxvcGVyYXRvckRhdGFiYXNlX1VSTCxnYW1lU2V0X1VSTF0sIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgKCk9PntcclxuICAgICAgICAgICAgdGhpcy5fZW5lbXlEYXRhID0gTGF5YS5sb2FkZXIuZ2V0UmVzKGVuZW15RGF0YWJhc2VfVVJMKVxyXG4gICAgICAgICAgICB0aGlzLl9vcGVyYXRvckRhdGEgPSBMYXlhLmxvYWRlci5nZXRSZXMob3BlcmF0b3JEYXRhYmFzZV9VUkwpXHJcbiAgICAgICAgICAgIHRoaXMuX2dhbWVTZXQgPSBMYXlhLmxvYWRlci5nZXRSZXMoZ2FtZVNldF9VUkwpXHJcbiAgICAgICAgfSkpXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XHJcbiAgICB9XHJcbiAgICAvL+WIneWni+WMliBFbmRcclxuXHJcbiAgICBwcml2YXRlIF9lbmVteURhdGE6SlNPTjsgICAgLy/mlYzkurrmlbDmja5qc29u5paH5Lu2XHJcbiAgICBwcml2YXRlIF9vcGVyYXRvckRhdGE6SlNPTjsgLy/lubLlkZjmlbDmja5qc29u5paH5Lu2XHJcbiAgICBwcml2YXRlIF9nYW1lU2V0OkpTT047ICAgICAgLy/muLjmiI/orr7lrppqc29u5paH5Lu2XHJcbiAgICBcclxuXHJcbiAgICBwdWJsaWMgZ2V0UGF0aChwYXRoTmFtZTpzdHJpbmcpOm51bWJlcltdW117XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTZXRbXCJwYXRoc1wiXVtwYXRoTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEVuZW15KGVuZW15TmFtZTpzdHJpbmcpOmFueXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW5lbXlEYXRhW2VuZW15TmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldE9wcnQob3BlcmF0b3JOYW1lOnN0cmluZyk6YW55e1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9vcGVyYXRvckRhdGFbb3BlcmF0b3JOYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0R3JvdW5kKCk6YW55e1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nYW1lU2V0W1wiZ3JvdW5kXCJdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaW1ldGFibGUoKTphbnl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTZXRbXCJ0aW1ldGFibGVcIl07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBVbml0U2l6ZSgpOm51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRHcm91bmQoKS5zaXplO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU3RydWMgfSBmcm9tIFwiLi9EYXRhU3RydWN0dXJlXCI7XHJcblxyXG5jbGFzcyBGaWVsZE5hbWV7XHJcbiAgICBwdWJsaWMgZ2V0IEdsb2JhbCgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gXCJHbG9iYWxcIjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgUGVvcGxlKCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBcIlBlb3BsZVwiO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBDcmVhdGVFbmVteVNwcml0ZSgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gXCJDcmVhdGVFbWVteVNwcml0ZVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBUeXBlTmFtZXtcclxuICAgIHB1YmxpYyBnZXQgQW55KCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBcIkFueVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudENlbnRyZXtcclxuICAgIHB1YmxpYyBzdGF0aWMgaW5zdDpFdmVudENlbnRyZTsvL+iHqui6q+eahOWunuS+i1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KCk6dm9pZHtcclxuICAgICAgICBFdmVudENlbnRyZS5pbnN0ID0gbmV3IEV2ZW50Q2VudHJlKCk7XHJcbiAgICAgICAgdGhpcy5pbml0ID0gKCk9Pnt9O1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcigpe307XHJcblxyXG4gICAgcHJpdmF0ZSBfZXZlbnRGaWVsZHM6U3RydWMuTWFwPHN0cmluZywgTGF5YS5FdmVudERpc3BhdGNoZXI+ID0gbmV3IFN0cnVjLk1hcDxzdHJpbmcsIExheWEuRXZlbnREaXNwYXRjaGVyPigpO1xyXG4gICAgLyoqXHJcbiAgICAgKiDljLrliIbkuI3lkIznmoTkuovku7bljLrln59cclxuICAgICAqIOS4gOS4quS6i+S7tuWMuuWfn+eahOS6i+S7tu+8jOS4jeiDveiiq+WPpuS4gOS4quS6i+S7tuWMuuWfn+eahOebkeWQrOWZqOW+l+efpVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEZpZWxkTmFtZTpGaWVsZE5hbWUgPSBuZXcgRmllbGROYW1lKCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFR5cGVOYW1lOlR5cGVOYW1lID0gbmV3IFR5cGVOYW1lKCk7XHJcbiAgICBcclxuICAgIHB1YmxpYyBvbihmaWVsZDpzdHJpbmcsIHR5cGU6c3RyaW5nLCBjYWxsZXI6YW55LCBtZXRob2Q6RnVuY3Rpb24sIGFyZ3M/OmFueVtdKTp2b2lkey8v5bCx5q+URXZlbnREaXNwYXRjaGVyLm9u5aSa5Liq5LqL5Lu25Yy65Z+fXHJcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudEZpZWxkcy5rZXlFeGlzdChmaWVsZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRGaWVsZHMuc2V0KGZpZWxkLCBuZXcgTGF5YS5FdmVudERpc3BhdGNoZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V2ZW50RmllbGRzLmdldChmaWVsZCkub24odHlwZSwgY2FsbGVyLCBtZXRob2QsIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBldmVudChmaWVsZDpzdHJpbmcsIHR5cGU6c3RyaW5nLCBhcmdzPzphbnlbXSk6dm9pZHsvL+WwseavlEV2ZW50RGlzcGF0Y2hlci5ldmVudOWkmuS4quS6i+S7tuWMuuWfn1xyXG4gICAgICAgIGlmICghdGhpcy5fZXZlbnRGaWVsZHMua2V5RXhpc3QoZmllbGQpKXtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ldmVudEZpZWxkcy5nZXQoZmllbGQpLmV2ZW50KHR5cGUsIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbmNlKGZpZWxkOnN0cmluZywgdHlwZTpzdHJpbmcsIGNhbGxlcjphbnksIG1ldGhvZDpGdW5jdGlvbiwgYXJncz86YW55W10pOnZvaWR7Ly/lsLHmr5RFdmVudERpc3BhdGNoZXIub25jZeWkmuS4quS6i+S7tuWMuuWfn1xyXG4gICAgICAgIGlmICghdGhpcy5fZXZlbnRGaWVsZHMua2V5RXhpc3QoZmllbGQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50RmllbGRzLnNldChmaWVsZCwgbmV3IExheWEuRXZlbnREaXNwYXRjaGVyKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ldmVudEZpZWxkcy5nZXQoZmllbGQpLm9uY2UodHlwZSwgY2FsbGVyLCBtZXRob2QsIGFyZ3MpO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgUGVvcGxlIGZyb20gXCIuLi9TY2VuZVNjcmlwdC9HYW1lT2JqL1Blb3BsZV9zdHVmZi9QZW9wbGVcIjtcclxuaW1wb3J0IE15TWF0aCBmcm9tIFwiLi9teU1hdGhcIjtcclxuaW1wb3J0IHsgU3RydWMgfSBmcm9tIFwiLi9EYXRhU3RydWN0dXJlXCI7XHJcblxyXG4vLyDmlbDmja7nu5PmnoTvvJpDb2xpQm94IGV4dGVuZHM6TGF5YS5SZWN0YW5nbGVcclxuLy8gZm9sbG93OkxheWEuU3ByaXRlIOmcgOimgei3n+maj+eahHNwcml0ZeWvueixoVxyXG4vLyBkZWx0YVg6bnVtYmVyOuS4jui3n+maj+WvueixoeeahOaoquWdkOagh+W3rlxyXG4vLyBkZWx0YVk6bnVtYmVyOuS4jui3n+maj+WvueixoeeahOe6teWdkOagh+W3rlxyXG5cclxuLy8gYWRqdXN0KCk6dm9pZOS/ruato+iHqui6q+eahOS9jee9rlxyXG4vLyB0YWc6c3RyaW5nOuiHqui6q+aJgOWxnueahOeisOaSnueuseenjeexu1xyXG4vLyBPd25lcjpQZW9wbGU65rOo5YaM6ICFXHJcblxyXG5cclxuY2xhc3MgQ29saUJveCBleHRlbmRzIExheWEuUmVjdGFuZ2xle1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gbm9uZSDkuI3nlKjkvKDlj4LmlbAhXHJcbiAgICAgKiDov5Tlm57kuIDkuKp4LHks6ZW/5a695Li6MOeahOeisOaSnueusVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKDAsMCwwLDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCx5piv4oCm4oCm5p2l5LiA57uE77yIMTAw5Liq77yJ6ZqP5py655qE56Kw5pKe566xXHJcbiAgICAgKiBAcGFyYW0geFJhbmdlIFxyXG4gICAgICogQHBhcmFtIHlSYW5nZSBcclxuICAgICAqIEBwYXJhbSB3aWRSYW5nZSBcclxuICAgICAqIEBwYXJhbSBoaWdSYW5nZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJhbmRvbUJveGVzKHhSYW5nZTpudW1iZXIgPSAxMjAwLCB5UmFuZ2U6bnVtYmVyID0gODAwLCB3aWRSYW5nZTpudW1iZXIgPSAzMDAsIGhpZ1JhbmdlOm51bWJlciA9IDMwMCk6Q29saUJveFtde1xyXG4gICAgICAgIGNvbnN0IHJhZDpGdW5jdGlvbiA9IE15TWF0aC5yYW5kb21JbnQ7XHJcbiAgICAgICAgbGV0IHJlc3VsdDpDb2xpQm94W10gPSBbXTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgNTA7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaChuZXcgQ29saUJveCgpKTtcclxuICAgICAgICAgICAgcmVzdWx0W2ldLnBvcyhyYWQoeFJhbmdlKSwgcmFkKHlSYW5nZSkpLnNpemUocmFkKHdpZFJhbmdlKSwgcmFkKGhpZ1JhbmdlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBvcyh4Om51bWJlciwgeTpudW1iZXIpOkNvbGlCb3h7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaXplKHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlcik6Q29saUJveHtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGludGVyc2VjdHNfWChyZWM6Q29saUJveCk6Ym9vbGVhbntcclxuICAgICAgICBpZiAodGhpcy54IDwgcmVjLngpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYy5pbnRlcnNlY3RzX1godGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAgKHRoaXMueCA+PSByZWMueCAmJiB0aGlzLnggPD0gcmVjLnJpZ2h0KSB8fFxyXG4gICAgICAgICAgICAgICAgKHRoaXMucmlnaHQgPj0gcmVjLnggJiYgdGhpcy5yaWdodCA8PSByZWMucmlnaHQpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGludGVyc2VjdHNfWShyZWM6Q29saUJveCk6Ym9vbGVhbntcclxuICAgICAgICBpZiAodGhpcy55PHJlYy55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWMuaW50ZXJzZWN0c19ZKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gICh0aGlzLnkgPj0gcmVjLnkgJiYgdGhpcy55IDw9IHJlYy5ib3R0b20pIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5ib3R0b20gPj0gcmVjLnkgJiYgdGhpcy5ib3R0b20gPD0gcmVjLmJvdHRvbSlcclxuICAgIH1cclxufVxyXG5cclxuLypcclxuKi9cclxuY2xhc3MgZnVjayBleHRlbmRzIEFycmF5PHN0cmluZz57XHJcbiAgICBwdWJsaWMgeW91KCk6c3RyaW5ne1xyXG4gICAgICAgIHJldHVybiBcIjIwXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIENvbGlQYXJlTGlzdCBleHRlbmRzIEFycmF5PFtDb2xpQm94LCBDb2xpQm94XT57XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb25lKCk6Q29saVBhcmVMaXN0e1xyXG4gICAgICAgIGxldCByZXN1bHQ6Q29saVBhcmVMaXN0ID0gbmV3IENvbGlQYXJlTGlzdDtcclxuICAgICAgICBmb3IobGV0IG4gPSAwOyBuIDwgdGhpcy5sZW5ndGg7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICByZXN1bHRbbl0gPSB0aGlzW25dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L6T5YWl5LiA5Liq5paw55qE56Kw5pKe5YWz57O76KGo77yM6L+U5Zue4oCc6L+b5YWl4oCd4oCc56a75byA4oCd4oCc57u05oyB56Kw5pKe4oCd5LiJ5Liq6KGoXHJcbiAgICAgKiBAcGFyYW0gbmV3TGlzdCDmlrDnorDmkp7lhbPns7vooahcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpbmRDaGFuZ2UobmV3TGlzdDpDb2xpUGFyZUxpc3QpOntpbjpDb2xpUGFyZUxpc3Qsb3V0OkNvbGlQYXJlTGlzdCxyZW1haW46Q29saVBhcmVMaXN0fXtcclxuICAgICAgICBsZXQgaW5MaXN0OkNvbGlQYXJlTGlzdCA9IG5ldyBDb2xpUGFyZUxpc3QoKTtcclxuICAgICAgICBsZXQgcmVtYWluTGlzdDpDb2xpUGFyZUxpc3QgPSBuZXcgQ29saVBhcmVMaXN0KCk7XHJcbiAgICAgICAgbGV0IG1lOkNvbGlQYXJlTGlzdCA9IHRoaXMuY2xvbmUoKTsvL291dCBsaXN0XHJcblxyXG4gICAgICAgIGxldCBmb3VuZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgZm9yKGxldCBuID0gMDsgbiA8IG5ld0xpc3QubGVuZ3RoOyBuICs9IDEpIHtcclxuICAgICAgICAgICAgZm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnQ6W0NvbGlCb3gsQ29saUJveF0gPSBuZXdMaXN0W25dO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbWUubGVuZ3RoOyBrICs9IDEpIHsvL2xvb2sgZm9yIGR1cGxpY2F0ZSBlbGVtZW50IGluIG1lXHJcbiAgICAgICAgICAgICAgICBsZXQgdG9DaGVjazpbQ29saUJveCxDb2xpQm94XSA9IG1lW2tdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRbMF0gPT09IHRvQ2hlY2tbMF0gJiYgY3VycmVudFsxXSA9PT0gdG9DaGVja1sxXSkgey8vcGFpciBkdXBsaWNhdGUgPSByZW1haW5cclxuICAgICAgICAgICAgICAgICAgICByZW1haW5MaXN0LnB1c2goY3VycmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWUuc3BsaWNlKGssMSk7Ly9rZWVwIHNwbGljaW5nIHRoZSBvbGQgYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghZm91bmQpIHsvL3BhaXIgbm90IGR1cGxpY2F0ZVxyXG4gICAgICAgICAgICAgICAgaW5MaXN0LnB1c2goY3VycmVudCk7Ly90aGlzIGVsZW1lbnQgaXMgbmV3XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbjppbkxpc3QsLy/miYDmnInmlrDooajmnInkvYbml6fooajmsqHmnInnmoTlhYPntKDvvIzlsLHmmK/igJzlhaXigJ3liJfooahcclxuICAgICAgICAgICAgb3V0Om1lLC8v5Yig5o6J5omA5pyJ5LiO5paw6KGo6YeN5aSN55qE5YWD57Sg5LmL5ZCO77yM5Ymp5LiL55qE5bCx5piv4oCc5pys5p2l56Kw5pKe5ZCO5p2l5LiN56Kw5pKe4oCd55qE4oCc5Ye64oCd5YiX6KGoXHJcbiAgICAgICAgICAgIHJlbWFpbjpyZW1haW5MaXN0Ly/miYDmnInmlrDooajlkozml6fooajpg73mnInnmoTlhYPntKDvvIzlsLHmmK/igJzljp/mnKzlsLHlnKjkuIDotbfvvIznjrDlnKjov5jlnKjkuIDotbfigJ3nmoTigJzkuI3lj5jigJ3liJfooahcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4gLyoqXHJcbiAqIOi/meS4quexu+iZveeEtuWPq+i0qOmHj+aViOW6lO+8jOS9huWug+WFtuWunuaYr+S4gOS4queJqeeQhuexu1xyXG4gKiDnm67liY3kuLvokKXkuJrliqHmmK/norDmkp7mo4DmtYtcclxuICog5piv5Liq5Y2V5L6LXHJcbiAqIGluc3TlpKrpmr7lhpnkuobogIzkuJTlrrnmmJPkuI5pbml05re35reG77yM5Lul5ZCO5YWo6YOo5YaZ5oiQaVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFzc0VmZmVjdHtcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKXt9XHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXQoc2NlbmU6TGF5YS5TY2VuZSk6dm9pZHtcclxuICAgICAgICB0aGlzLmkgPSBuZXcgTWFzc0VmZmVjdCgpO1xyXG4gICAgICAgIHRoaXMuaS5zY2VuZSA9IHNjZW5lO1xyXG4gICAgICAgIHRoaXMuaS50ZXN0TGF5ZXIgPSBuZXcgTGF5YS5TcHJpdGU7XHJcbiAgICAgICAgc2NlbmUuYWRkQ2hpbGQodGhpcy5pLnRlc3RMYXllcik7XHJcbiAgICAgICAgdGhpcy5pbml0ID0gKCk9Pnt9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBpOk1hc3NFZmZlY3Q7XHJcbiAgICBwdWJsaWMgc3RhdGljIFRhZ3MgPSB7XHJcbiAgICAgICAgRU5FTVlfQk9EWTpcIkVORU1ZQk9EWVwiXHJcbiAgICB9XHJcblxyXG5cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBjb2xpQm94ZXM6Q29saUJveFtdID0gW107ICAgLy/lt7Lms6jlhoznmoTnorDmkp7nrrFcclxuICAgIHByaXZhdGUgb2xkUGFyZXM6Q29saVBhcmVMaXN0ID0gbmV3IENvbGlQYXJlTGlzdCgpOyAgLy/kuIrkuIDmrKHnorDmkp7mo4DmtYvnmoTnu5PmnpxcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBzY2VuZTpMYXlhLlNjZW5lOyAgICAgICAvL+a4uOaIj+WcuuaZr+OAguWunumZheS4iueJqeeQhuexu+S4jemcgOimgeWFs+azqOWunuS9k+aJgOWcqOeahOWcuuaZr++8jOatpOWxnuaAp+S7heS+m+W8gOWPkea1i+ivleS9v+eUqFxyXG4gICAgcHJpdmF0ZSB0ZXN0TGF5ZXI6TGF5YS5TcHJpdGU7ICAvL+S4k+mXqOeUqOadpea1i+ivleeahOWbvuWxgu+8jOS4jeWPguS4jua1i+ivleS7peWklueahOWKn+iDvVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5q+P5LiA5bin5Lit5omA6KaB5YGa55qE5LqLXHJcbiAgICAgKiAxLuabtOaWsOaJgOacieeisOaSnueuseeahOS9jee9rijov5nku7bkuovnjrDlnKjkuqTnu5nnorDmkp7nrrHnmoTliJvpgKDogIXmnaXlgZopXHJcbiAgICAgKiAyLui/m+ihjOeisOaSnuajgOa1i1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZnJhbWVXb3JrKCk6dm9pZHtcclxuICAgICAgICAvLyBsZXQgbmV3TGlzdDpDb2xpUGFyZUxpc3QgPSB0aGlzLl9jb2xsaXNpb25EZXRlY3QodGhpcy5jb2xpQm94ZXMpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMub2xkUGFyZXMuZmluZENoYW5nZShuZXdMaXN0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRlc3QoKTp2b2lke1xyXG4gICAgICAgIGxldCBuZXdMaXN0OkNvbGlQYXJlTGlzdDtcclxuICAgICAgICBsZXQgYm94ZXM6Q29saUJveFtdID0gQ29saUJveC5yYW5kb21Cb3hlcygpO1xyXG4gICAgICAgIG5ld0xpc3QgPSB0aGlzLl9jb2xsaXNpb25EZXRlY3QoYm94ZXMpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKG5ldyBmdWNrKCkueW91KCkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMub2xkUGFyZXMuZmluZENoYW5nZShuZXdMaXN0KS5pbik7XHJcblxyXG4gICAgICAgIC8vIGlmIChNYXRoLnJhbmRvbSgpPjIpIHtcclxuICAgICAgICAvLyAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyBsZXQgYm94TGlzdDpDb2xpQm94W10gPSBDb2xpQm94LnJhbmRvbUJveGVzKCk7XHJcbiAgICAgICAgLy8gYm94TGlzdC5mb3JFYWNoKChlbGUpPT57XHJcbiAgICAgICAgLy8gICAgIE15TWF0aC5kcmF3UmVjKHRoaXMudGVzdExheWVyLCBlbGUsIFwiIzU1NTU1NVwiKTtcclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgLy8gbGV0IHRlbXBMYXllciA9IG5ldyBMYXlhLlNwcml0ZSgpO1xyXG4gICAgICAgIC8vIHRoaXMudGVzdExheWVyLmFkZENoaWxkKHRlbXBMYXllcik7XHJcbiAgICAgICAgLy8gbGV0IHJlc3VsdCA9IHRoaXMuX2NvbGxpc2lvbkRldGVjdChib3hMaXN0KTtcclxuXHJcbiAgICAgICAgLy8gbGV0IGluZGV4ID0gMDtcclxuICAgICAgICAvLyBMYXlhLnRpbWVyLmxvb3AoNDAwLCB0aGlzLCAoKT0+e1xyXG4gICAgICAgIC8vICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gICAgIHRlbXBMYXllci5ncmFwaGljcy5jbGVhcigpO1xyXG4gICAgICAgIC8vICAgICBsZXQgcGFpciA9IHJlc3VsdFtpbmRleF07XHJcbiAgICAgICAgLy8gICAgIE15TWF0aC5kcmF3UmVjKHRlbXBMYXllciwgcGFpclswXSwgXCIjZmYwMDAwXCIpO1xyXG4gICAgICAgIC8vICAgICBNeU1hdGguZHJhd1JlYyh0ZW1wTGF5ZXIsIHBhaXJbMV0sIFwiIzAwZmYwMFwiKTtcclxuXHJcbiAgICAgICAgLy8gICAgIGluZGV4ICs9IDE7XHJcbiAgICAgICAgLy8gICAgIGlmIChpbmRleCA9PT0gcmVzdWx0Lmxlbmd0aCkge1xyXG4gICAgICAgIC8vICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuXHJcbiAgICAvKipcclxuICAgICAqIOi+k+WFpeS4gOS4queisOaSnueuseWIl+ihqO+8jOi/lOWbnueisOaSnue7k+aenFxyXG4gICAgICogQHBhcmFtIGxpc3Qg56Kw5pKe566x5YiX6KGoXHJcbiAgICAgKiBAcmV0dXJucyDnorDmkp7nu5PmnpxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfY29sbGlzaW9uRGV0ZWN0KGxpc3Q6Q29saUJveFtdKTpDb2xpUGFyZUxpc3R7XHJcbiAgICAgICAgTXlNYXRoLmJ1YmJsZVNvcnQobGlzdCwgKGVsZSk9PntyZXR1cm4gZWxlLnh9KTsvL+S7pXjovbTlnZDmoIfljYfluo/mjpLliJfmiYDmnInnorDmkp7nrrFcclxuICAgICAgICBsZXQgcGFyZUxpc3Q6Q29saVBhcmVMaXN0ID0gbmV3IENvbGlQYXJlTGlzdCgpO1xyXG4gICAgICAgIGZvcihsZXQgbiA9IDA7IG4gPCBsaXN0Lmxlbmd0aCAtIDE7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJpbmdCb3g6Q29saUJveCA9IGxpc3Rbbl07XHJcbiAgICAgICAgICAgIGZvciAobGV0IHAgPSBuICsgMTsgcCA8IGxpc3QubGVuZ3RoOyBwICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0b1BhcmU6Q29saUJveCA9IGxpc3RbcF07XHJcbiAgICAgICAgICAgICAgICBpZiAoIXBhcmluZ0JveC5pbnRlcnNlY3RzX1godG9QYXJlKSkgey8v5aaC5p6c5LqM6ICF5ZyoeOi9tOS4jeebuOS6pO+8jOebtOaOpei3s+WHuuW+queOr1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJpbmdCb3guaW50ZXJzZWN0c19ZKHRvUGFyZSkpIHsvL+WmguaenOS6jOiAheWcqHjovbTnm7jkuqTvvIzkuJTlnKh56L2055u45Lqk77yM5YiZ5a6D5Lus6YeN5ZCI5LqGXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZUxpc3QucHVzaChbcGFyaW5nQm94LCB0b1BhcmVdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5LqM6ICF5ZyoeOi9tOebuOS6pO+8jOWcqHnovbTkuI3nm7jkuqTvvIzliJnku4DkuYjpg73kuI3lgZrvvIznu6fnu63lvqrnjq9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmVMaXN0O1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgIOeisOaSnuajgOa1i+eul+azlVxyXG4gICAgICAgIOmmluWFiO+8jOaJgOacieeahOW+heajgOa1i+eahOeisOaSnueuseWvueixoemDveS6i+WFiOagueaNrnjlgLzmjpLkuobluo/vvIzkuZ/lsLHmmK/ku47lt6bliLDlj7PmjpLliJdcclxuICAgICAgICBcclxuICAgICAgICDnhLblkI7lvIDlp4vnorDmkp7mo4DmtYtcclxuXHJcbiAgICAgICAgMS7mlbDnu4TkuK3nmoTmr4/kuIDkuKrlhYPntKDvvIjpmaTkuobmnIDlkI7kuIDkuKrvvInpg73kvJrku47lroPnmoTkvY3nva7nmoTkuIvkuIDkuKrlhYPntKDlvIDlp4vmib7otbdcclxuICAgICAgICBpbmRleCAgIDAgICAxICAgMiAgIDMgICA0ICAgLi4uLiAgICBsLTIgICAgIGwtMVxyXG4gICAgICAgICAgICAgICAgW10gIFtdICBbXSAgW10gIFtdICAgICAgICAgIFtdICAgICAgW11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDihpFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOesrOS4gOWxguW+queOr+WPqumBjeWOhuWIsOi/memHjFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5Lmf5bCx5piv5YCS5pWw56ys5LqM5Liq5YWD57SgXHJcbiAgICAgICAgMi7lpoLmnpzov5nkuKrlhYPntKDmib7liLDkuobkuIDkuKrlnKh46L205LiO5YW26YeN5Y+g55qE56Kw5pKe566x77yM6YKj5LmI5bCx5YaN5p+l55yL5a6D5Lus55qEeei9tOeisOaSnuWFs+ezu1xyXG4gICAgICAgIDAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgICAyXHJcbiAgICAgICAgW+i/meS4queisOaSnueuseWcqOaQnOWvuy4uLl0gICAgICAgW+KIml0gIFtdXHJcbiAgICAgICAgICAgICrmn6XnnIvlrp7kvosw5LiO5a6e5L6LMeS5i+mXtOeahOeisOaSnuWFs+ezu++8jOWmguaenHnovbTkuI3norDmkp7vvIzku4DkuYjpg73kuI3lgZrjgILlpoLmnpx56L2056Kw5pKe77yM5bCG5LqM6ICF5Yqg5YWl56Kw5pKe6ZuG5ZCI5LitXHJcbiAgICAgICAgXHJcbiAgICAgICAgMy7mib7liLDkuIDkuKp46L206YeN5Y+g56Kw5pKe566x5LmL5ZCO77yM57un57ut5om+5LiL5LiA5Liq77yM55u05Yiw5pW05Liq5pWw57uE6YGN5Y6G5a6M5oiQXHJcbiAgICAgICAgMCAgICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAyICAgMyAgIDQgICA1ICAgNiAgIDcgICAgLi4uXHJcbiAgICAgICAgW+i/meS4queisOaSnueuseWcqOaQnOWvuy4uLl0gICAgICAgW+KIml0gIFviiJpdIFviiJpdIFviiJpdIFviiJpdIFviiJpdIFviiJpdICAgLi4uXHJcblxyXG4gICAgICAgIDQu5L2G5piv77yM5aaC5p6c5om+5Yiw5LiA5Liq5LiO5YW25LiN6YeN5Y+g55qE56Kw5pKe566x77yM6YKj5LmI5Ymp5LiL55qE56Kw5pKe566x5bCx6YO95LiN5qOA5p+l5LqGXHJcbiAgICAgICAg5Zug5Li65omA5pyJ55qE56Kw5pKe566x5bey57uP5LqL5YWI5oyJeOi9tOWdkOagh+WNh+W6j+aOkuWIl++8jOWHuueOsOS4gOS4quS4jemHjeWPoOS5i+WQjuWJqeS4i+eahOS5n+mDveS4jemHjeWPoFxyXG4gICAgICAgIDAgICAgICAgICAgICAgICAgICAgICAgICAgIDEgICAgMiAgIDMgICAgICA0ICAgICAgICAgICAgICAgICA1ICAgNiAgIDcgICAgLi4uXHJcbiAgICAgICAgW+i/meS4queisOaSnueuseWcqOaQnOWvuy4uLl0gICAgICAgW+KIml0gIFviiJpdIFt4XSBbKDvvvp/QtO++nyl3ZG5tZOaXoOinhuaIkT9dICBbXSAgW10gIFtdICAgLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4oaRXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5Y+R546w5LiN6YeN5Y+g55qE56Kw5pKe566xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg5Ymp5LiL55qE5YWo6YO95pS+5byD5qOA5p+lXHJcbiAgICAgICAgXHJcbiAgICAgICAg5pCc57Si5pe25aSn5qaC5Lya5piv6L+Z56eN5oSf6KeJXHJcbiAgICAgICAgMCAgIDEgICAyICAgMyAgIDRcclxuICAgICAgICBbXSAgW10gIFtdICBbXSAgW13mlbTkuKrmlbDnu4RcclxuICAgICAgICBbXeaQnOWvu+iAhVxyXG4gICAgICAgICAgICBbXSAgW10gIFtdICBbXemFjeWvueaIkOWKn+mhueebrlxyXG4gICAgICAgICAgICBbXeaQnOWvu+iAhVxyXG4gICAgICAgICAgICAgICAgW10gIFtd6YWN5a+55oiQ5Yqf6aG555uuXHJcbiAgICAgICAgICAgICAgICBbXeaQnOWvu+iAhVxyXG4gICAgICAgICAgICAgICAgICAgIFtdICBbXemFjeWvueaIkOWKn+mhueebrlxyXG4gICAgICAgICAgICAgICAgICAgIFtd5pCc5a+76ICFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtd6YWN5a+55oiQ5Yqf6aG555uuXHJcbiAgICAgICAg57uT5p6c77yaXHJcbiAgICAgICAgMDoxIDA6MiAwOjMgMDo0XHJcbiAgICAgICAgMToyIDE6M1xyXG4gICAgICAgIDI6MyAyOjRcclxuICAgICAgICAzOjRcclxuICAgICAgICAqL1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG5cclxuXHJcblxyXG59IiwiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeU1hdGh7XHJcbiAgICAvL0xheWHmqKHlnZdcclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5Lik5Liq55+p5b2i5a+56LGh5piv5ZCm6YeN5Y+gXHJcbiAgICAgKiBAcGFyYW0gcmVjMCDkuIDkuKrnn6nlvaJcclxuICAgICAqIEBwYXJhbSByZWMxIOWPpuS4gOS4quefqeW9olxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIG92ZXJsYXBfUmVjKHJlYzA6TGF5YS5SZWN0YW5nbGUsIHJlYzE6TGF5YS5SZWN0YW5nbGUpOmJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAgdGhpcy5vdmVybGFwXzJkKHJlYzAueCxyZWMxLngscmVjMC53aWR0aCxyZWMxLndpZHRoKSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vdmVybGFwXzJkKHJlYzAueSxyZWMxLnkscmVjMC5oZWlnaHQscmVjMS5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyo5oyH5a6a57uY5Zu+6IqC54K55Lit57uY5Yi255+p5b2iXHJcbiAgICAgKiBAcGFyYW0gc3ByIOe7mOWbvuiKgueCuVxyXG4gICAgICogQHBhcmFtIHJlYyDnn6nlvaJcclxuICAgICAqIEBwYXJhbSBjb2xvciDpopzoibJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBkcmF3UmVjKHNwcjpMYXlhLlNwcml0ZSwgcmVjOkxheWEuUmVjdGFuZ2xlLCBjb2xvcjpzdHJpbmcpOnZvaWR7XHJcbiAgICAgICAgc3ByLmdyYXBoaWNzLmRyYXdSZWN0KHJlYy54LCByZWMueSwgcmVjLndpZHRoLCByZWMuaGVpZ2h0LCBjb2xvciwgXCIjODg4ODg4XCIsIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgLy9MYXlh5qih5Z2XXHJcblxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3lnKjmlbDovbTkuIrkuKTmnaHnur/mmK/lkKbph43lj6BcclxuICAgICAqIEBwYXJhbSBwb2ludDAg57q/5q61MOeahOW3puS+p+err+eCuVxyXG4gICAgICogQHBhcmFtIHBvaW50MSDnur/mrrUx55qE5bem5L6n56uv54K5XHJcbiAgICAgKiBAcGFyYW0gbGVuZ3RoMCDnur/mrrUw55qE6ZW/5bqmXHJcbiAgICAgKiBAcGFyYW0gbGVuZ3RoMSDnur/mrrUx55qE6ZW/5bqmXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcmxhcF8yZChwb2ludDA6bnVtYmVyLCBwb2ludDE6bnVtYmVyLCBsZW5ndGgwOm51bWJlciwgbGVuZ3RoMTpudW1iZXIpOmJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuICBNeU1hdGguaW5jbHVkZV8yZChwb2ludDAsbGVuZ3RoMCxwb2ludDEpIHx8XHJcbiAgICAgICAgICAgICAgICBNeU1hdGguaW5jbHVkZV8yZChwb2ludDAsbGVuZ3RoMCxwb2ludDErbGVuZ3RoMSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreWcqOaVsOi9tOS4iuS4gOS4queCueaYr+WQpuWkhOS6juS4gOadoee6v+auteS4ilxyXG4gICAgICogQHBhcmFtIGxvY2F0ZSDnur/mrrXlt6bkvqfnq6/ngrnkvY3nva5cclxuICAgICAqIEBwYXJhbSBsZW5ndGgg57q/5q616ZW/5bqmXHJcbiAgICAgKiBAcGFyYW0gZG90IOeCueS9jVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGluY2x1ZGVfMmQobG9jYXRlOm51bWJlciwgbGVuZ3RoOm51bWJlciwgZG90Om51bWJlcik6Ym9vbGVhbntcclxuICAgICAgICByZXR1cm4gZG90Pj1sb2NhdGUgJiYgZG90PD1sb2NhdGUrbGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHVwTGltaXQg5LiK55WMXHJcbiAgICAgKiBAcGFyYW0gbG9MaW1pdCDkuIvnlYxcclxuICAgICAqIEByZXR1cm5zIOS4iueVjOS4juS4i+eVjOS5i+mXtOeahOmaj+acuuaVtOaVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJhbmRvbUludCh1cExpbWl0Om51bWJlciwgbG9MaW1pdDpudW1iZXIgPSAwKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSoodXBMaW1pdC1sb0xpbWl0KSArIGxvTGltaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZnJvbnQg5Y6f5pWw5a2XXHJcbiAgICAgKiBAcGFyYW0gc2hpZnQg5aKe5Yqg6YePXHJcbiAgICAgKiBAcGFyYW0gZW5kIOWinuWKoOS4iumZkO+8iOiLpeWinuWKoOmHj+S4uui0n++8jOWImeS4uuS4i+mZkO+8iVxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgbW92ZVRvKGZyb250Om51bWJlciwgc2hpZnQ6bnVtYmVyLCBlbmQ6bnVtYmVyKTpudW1iZXIge1xyXG4gICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gZnJvbnQgKyBzaGlmdDtcclxuICAgICAgICBpZiAoc2hpZnQ+MCAmJiByZXN1bHQ+ZW5kKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGVuZDtcclxuICAgICAgICB9IGVsc2UgaWYgKHNoaWZ0PDAgJiYgcmVzdWx0PGVuZCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBlbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhpLms6HmjpLluo9cclxuICAgICAqIOazqOaEj+i/meS4queul+azleS8muebtOaOpeS/ruaUueWOn+aVsOe7hFxyXG4gICAgICogQHBhcmFtIHNvdXJjZSDljp/mlbDnu4RcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDkvJjlhYjlgLzlj5blgLzlh73mlbBcclxuICAgICAqIEBwYXJhbSBpbmNyZWFzZSDmmK/lkKbljYfluo/vvIjpu5jorqTljYfluo/vvIkgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYnViYmxlU29ydChzb3VyY2U6YW55W10sIHZhbHVlOkZ1bmN0aW9uLCBpbmNyZWFzZTpib29sZWFuID0gdHJ1ZSk6dm9pZHtcclxuICAgICAgICAvLyBsZXQgdGltZSA9IDA7XHJcbiAgICAgICAgbGV0IGNvbXBsZXRlOmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IG4gPSBzb3VyY2UubGVuZ3RoIC0gMTsgbiA+IDA7IG4gLT0gMSkge1xyXG4gICAgICAgICAgICBjb21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvcihsZXQgbSA9IDA7IG0gPCBuOyBtICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXI6bnVtYmVyID0gdmFsdWUoc291cmNlW21dKTtcclxuICAgICAgICAgICAgICAgIGxldCBuZXh0Om51bWJlciA9IHZhbHVlKHNvdXJjZVttICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluY3JlYXNlPyhjdXI+bmV4dCk6KGN1cjxuZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdG9yZSA9IHNvdXJjZVttXTtcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VbbV0gPSBzb3VyY2VbbSsxXTtcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VbbSArIDFdID0gc3RvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHRpbWUgKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG4iLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cclxuaW1wb3J0IFZpZXc9TGF5YS5WaWV3O1xyXG5pbXBvcnQgRGlhbG9nPUxheWEuRGlhbG9nO1xyXG5pbXBvcnQgU2NlbmU9TGF5YS5TY2VuZTtcclxudmFyIFJFRzogRnVuY3Rpb24gPSBMYXlhLkNsYXNzVXRpbHMucmVnQ2xhc3M7XHJcbmV4cG9ydCBtb2R1bGUgdWkge1xyXG4gICAgZXhwb3J0IGNsYXNzIEdhbWVTY2VuZVVJIGV4dGVuZHMgU2NlbmUge1xyXG5cdFx0cHVibGljIFVJU2V0OkxheWEuU3ByaXRlO1xyXG5cdFx0cHVibGljIFQxXzE6TGF5YS5TcHJpdGU7XHJcblx0XHRwdWJsaWMgVDJfMjpMYXlhLlNwcml0ZTtcclxuXHRcdHB1YmxpYyBUM18xOkxheWEuU3ByaXRlO1xyXG5cdFx0cHVibGljIFQyXzE6TGF5YS5TcHJpdGU7XHJcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcIkdhbWVTY2VuZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBSRUcoXCJ1aS5HYW1lU2NlbmVVSVwiLEdhbWVTY2VuZVVJKTtcclxuICAgIGV4cG9ydCBjbGFzcyBMb2FkaW5nU2NlbmVVSSBleHRlbmRzIFNjZW5lIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwiTG9hZGluZ1NjZW5lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLkxvYWRpbmdTY2VuZVVJXCIsTG9hZGluZ1NjZW5lVUkpO1xyXG59XHJcbiJdfQ==
