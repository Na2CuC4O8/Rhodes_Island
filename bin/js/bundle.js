var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Game_1 = require("./SceneScript/Game");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/Game.ts", Game_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1400;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/Game":4,"./SceneScript/Loading":11}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var SceneManager_1 = require("./SceneManager");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        new SceneManager_1.default();
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./SceneManager":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventCentre_1 = require("./Toybox/EventCentre");
var Database_1 = require("./Toybox/Database");
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        var _this = this;
        this.loadingScene = "LoadingScene.scene";
        this.gameScene = "GameScene.scene";
        EventCentre_1.default.init();
        Database_1.default.init();
        Laya.Scene.open(this.loadingScene);
        EventCentre_1.default.i.once("Init", "Regular", this, function () {
            Laya.Scene.open(_this.gameScene);
        });
    }
    return SceneManager;
}());
exports.default = SceneManager;
},{"./Toybox/Database":13,"./Toybox/EventCentre":14}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var EventCentre_1 = require("../Toybox/EventCentre");
var GameFieldUI_1 = require("./GameObj/GameFieldUI");
var EnemyCentre_1 = require("./GameObj/EnemyCentre");
var MassEffect_1 = require("../Toybox/MassEffect");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super.call(this) || this;
        _this._time = 0;
        GameFieldUI_1.default.init(_this.scene); //ui初始化
        EnemyCentre_1.default.init(); //敌人管理类初始化
        MassEffect_1.default.init(_this); //物理类初始化
        MassEffect_1.default.i.test(); //物理类进行测试 可移除
        EventCentre_1.default.i.on(EventCentre_1.default.FieldName.Collision, "IN", _this, function (ele) {
            console.log("IN detected");
        });
        EventCentre_1.default.i.on(EventCentre_1.default.FieldName.Collision, "OUT", _this, function (ele) {
            console.log("OUT detected");
        });
        Laya.timer.loop(17, _this, _this.frameWork); //开始帧循环
        return _this;
    }
    //这个变量代表游戏从开始到现在运行了多少帧
    Game.prototype.frameWork = function () {
        EnemyCentre_1.default.i.frameWork(this._time);
        GameFieldUI_1.default.i.frameWork();
        MassEffect_1.default.i.frameWork();
        this._time += 1;
    };
    return Game;
}(layaMaxUI_1.ui.GameSceneUI));
exports.default = Game;
},{"../Toybox/EventCentre":14,"../Toybox/MassEffect":15,"../ui/layaMaxUI":17,"./GameObj/EnemyCentre":5,"./GameObj/GameFieldUI":6}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Enemy_1 = require("./People_stuff/Enemy");
var DataStructure_1 = require("../../Toybox/DataStructure");
var Database_1 = require("../../Toybox/Database");
var EnemyCentre = /** @class */ (function () {
    function EnemyCentre() {
        this._enemyGroup = [];
        //Start
        //初始化时间轴
        var timeData = Database_1.default.inst.getTimetable();
        this._timetable = new DataStructure_1.Struc.PointerList(timeData);
        //初始化时间轴
        //End
    }
    EnemyCentre.init = function () {
        this.i = new EnemyCentre();
        this.init = function () { };
    };
    EnemyCentre.prototype.frameWork = function (time) {
        /*
        这个函数是EnemyCentre类每帧所做的事情
        time是此次游戏自游戏开始至这个函数运行之时已经经过的帧数
        在预期中，这个数值会从0开始，每帧+1
        */
        if (!this._timetable.exceeding && time == this._timetable.read()["time"]) {
            //空值检查 && 当前时间与时间表上的时间一致
            var data = this._timetable.read();
            this.createEnemy(data["type"], data["path"]);
            this._timetable.step();
        }
        this._enemyGroup.forEach(function (enemy) {
            enemy.frameWork();
        });
    };
    EnemyCentre.prototype.createEnemy = function (enemyID, pathID) {
        var enemy = new Enemy_1.default(enemyID, pathID);
        this._enemyGroup.push(enemy);
    };
    return EnemyCentre;
}());
exports.default = EnemyCentre;
},{"../../Toybox/DataStructure":12,"../../Toybox/Database":13,"./People_stuff/Enemy":7}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Database_1 = require("../../Toybox/Database");
var SideField = /** @class */ (function () {
    function SideField(scene) {
    }
    return SideField;
}());
var CentreField = /** @class */ (function () {
    function CentreField(scene) {
        var data = Database_1.default.inst.getGround();
        var _a = [data["width"], data["height"], data["size"]], width = _a[0], height = _a[1], size = _a[2];
        this._size = size;
        this._width = width;
        this._height = height;
        this._scene = scene;
        //Start
        //创建地图方格
        this._blocks = [];
        for (var x = 0; x < width; x += 1) {
            this._blocks[x] = [];
            for (var y = 0; y < height; y += 1) {
                var block = Laya.Sprite.fromImage("Basic/Rec.png");
                scene.getChildByName("UISet").addChild(block);
                block.size(size, size).pos(x * size, y * size);
                this._blocks[x][y] = block;
            }
        }
        //创建地图方格
        //End
    }
    CentreField.prototype.CreateEnemy = function (imgURL, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        var sprite = Laya.Sprite.fromImage(imgURL); //创建sprite
        this._scene.getChildByName("UISet").addChild(sprite); //插入中心区域
        sprite.size(Database_1.default.inst.UnitSize, Database_1.default.inst.UnitSize); //根据数据库提供的常量设置大小
        sprite.pos(x, y); //确定位置
        return sprite;
    };
    CentreField.prototype.frameWork = function () {
    };
    return CentreField;
}());
var GameFieldUI = /** @class */ (function () {
    function GameFieldUI(scene) {
        this._side = new SideField(scene);
        this._centre = new CentreField(scene);
        this._scene = scene;
    }
    GameFieldUI.init = function (scene) {
        this.i = new GameFieldUI(scene);
        this.init = function () { };
    };
    Object.defineProperty(GameFieldUI.prototype, "Centre", {
        get: function () {
            return this._centre;
        },
        enumerable: true,
        configurable: true
    });
    GameFieldUI.prototype.frameWork = function () {
        this._centre.frameWork();
    };
    return GameFieldUI;
}());
exports.default = GameFieldUI;
},{"../../Toybox/Database":13}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var Database_1 = require("../../../Toybox/Database");
var DataStructure_1 = require("../../../Toybox/DataStructure");
var Present_1 = require("./Present");
var State_1 = require("./State");
var myMath_1 = require("../../../Toybox/myMath");
/**
 * 敌人的表现类
 */
var EnemyPst = /** @class */ (function (_super) {
    __extends(EnemyPst, _super);
    function EnemyPst(url) {
        return _super.call(this, url) || this;
    }
    EnemyPst.prototype.perform = function (state) {
        this._sprite.pos(state.x, state.y);
    };
    return EnemyPst;
}(Present_1.default));
/**
 * 敌人的状态类
 */
var EnemyStt = /** @class */ (function (_super) {
    __extends(EnemyStt, _super);
    function EnemyStt(data, pathID) {
        var _this = _super.call(this, data) || this;
        _this.out = false;
        //初始化路径
        _this._path = new DataStructure_1.Struc.PointerList();
        var rawPath = Database_1.default.inst.getPath(pathID);
        rawPath.forEach(function (ele, index) {
            _this._path.push({ x: ele[0], y: ele[1] });
        });
        //初始化位置
        _this._x = _this._path.first.x;
        _this._y = _this._path.first.y;
        //初始化速度
        _this._speed = data["speed"];
        //初始化轴速度
        _this._resetAxisSpeed();
        return _this;
    }
    EnemyStt.prototype._resetAxisSpeed = function () {
        if (this._path.atEnd) {
            console.log("Can't reset speed");
            return;
        }
        var next = this._path.next();
        var _a = [next.x - this._x, next.y - this._y], x_dis = _a[0], y_dis = _a[1];
        var distance = Math.sqrt(Math.pow(x_dis, 2) + Math.pow(y_dis, 2));
        var time = distance / this._speed;
        this._xSpeed = x_dis / time;
        this._ySpeed = y_dis / time;
    };
    EnemyStt.prototype.setPosition = function (x, y) {
        this._x = x;
        this._y = y;
    };
    EnemyStt.prototype.nextTarget = function () {
        if (this._path.atEnd) {
            return;
        }
        this._path.step();
        this._resetAxisSpeed();
    };
    Object.defineProperty(EnemyStt.prototype, "isArrived", {
        get: function () {
            return (this._x === this._path.next().x) && (this._y === this._path.next().y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "xSpeed", {
        get: function () {
            return this._xSpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "ySpeed", {
        get: function () {
            return this._ySpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "target", {
        get: function () {
            return this._path.next();
        },
        enumerable: true,
        configurable: true
    });
    return EnemyStt;
}(State_1.default));
/**
 * 敌人的逻辑类
 */
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    /**
     *
     * @param id 敌人id，用于获取敌人数据
     * @param pathID 路径id，用于获取路径数据
     */
    function Enemy(id, pathID) {
        var _this = _super.call(this) || this;
        //获取数据和路径
        var data = Database_1.default.inst.getEnemy(id);
        var path = Database_1.default.inst.getPath(pathID);
        _this._data = data;
        _this._path = new DataStructure_1.Struc.PointerList(path);
        //创建表现类和数据类
        _this._present = new EnemyPst(data["img"]);
        _this._state = new EnemyStt(data, pathID);
        //创建碰撞箱
        //设置监听事件
        console.log(_this);
        return _this;
    }
    Enemy.prototype.frameWork = function () {
        if (this._state.out) {
            return;
        }
        //进行移动
        if (this._state.isArrived) {
            this._state.nextTarget();
        }
        var _a = this._state, x = _a.x, y = _a.y, xSpeed = _a.xSpeed, ySpeed = _a.ySpeed, target = _a.target;
        if (target === undefined) {
            this._state.out = true;
            return;
        }
        var newx = myMath_1.default.moveTo(x, xSpeed, target.x);
        var newy = myMath_1.default.moveTo(y, ySpeed, target.y);
        this._state.setPosition(newx, newy);
        //刷新位置
        this._present.perform(this._state);
    };
    return Enemy;
}(People_1.default));
exports.default = Enemy;
},{"../../../Toybox/DataStructure":12,"../../../Toybox/Database":13,"../../../Toybox/myMath":16,"./People":8,"./Present":9,"./State":10}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People = /** @class */ (function () {
    function People() {
    }
    return People;
}());
exports.default = People;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameFieldUI_1 = require("../GameFieldUI");
/**
 * 所有表现类的基类
 */
var Present = /** @class */ (function () {
    function Present(url) {
        this._sprite = GameFieldUI_1.default.i.Centre.CreateEnemy(url);
    }
    Object.defineProperty(Present.prototype, "sprite", {
        get: function () {
            return this._sprite;
        },
        enumerable: true,
        configurable: true
    });
    return Present;
}());
exports.default = Present;
},{"../GameFieldUI":6}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State = /** @class */ (function () {
    function State(data) {
    }
    return State;
}());
exports.default = State;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var EventCentre_1 = require("../Toybox/EventCentre");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
        EventCentre_1.default.i.event("Init", "Regular");
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../Toybox/EventCentre":14,"../ui/layaMaxUI":17}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MapNode = /** @class */ (function () {
    function MapNode(key, value) {
        this.key = key;
        this.value = value;
    }
    return MapNode;
}());
var Node = /** @class */ (function () {
    function Node(item, next) {
        this.item = item;
        this.next = next;
    }
    return Node;
}());
var Struc;
(function (Struc) {
    var LinkList = /** @class */ (function () {
        function LinkList() {
            this._head = new Node(null, null);
            this._tail = new Node(null, null);
        }
        Object.defineProperty(LinkList.prototype, "length", {
            //基础属性
            get: function () {
                var result = 0;
                var current = this._head;
                while (current.next !== null) {
                    result += 1;
                    current = current.next;
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkList.prototype, "isEmpty", {
            get: function () {
                return this._head.next === null;
            },
            enumerable: true,
            configurable: true
        });
        //增删改查
        //增
        LinkList.prototype.push = function (item) {
            var last = new Node(item, null);
            if (this.isEmpty) {
                this._head.next = last;
                this._tail.next = last;
            }
            else {
                this._tail.next.next = last;
                this._tail.next = last;
            }
        };
        LinkList.prototype.unshift = function (item) {
            var first = new Node(item, null);
            if (this.isEmpty) {
                this._tail.next = first;
                this._head.next = first;
            }
            else {
                first.next = this._head.next.next;
                this._head.next = first;
            }
        };
        LinkList.prototype.insert = function (index, item) {
            if (index < 0 || index > this.length) { //这句不一样
                return false;
            }
            if (index === this.length) {
                this.push(item);
                return true;
            }
            var current = this._head; //这句和其他遍历是不一样的，因为要选取到选定位置的前面一格
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.next = new Node(item, current.next);
            return true;
        };
        //删
        LinkList.prototype.remove = function (index) {
            if (index < 0 || index >= this.length) {
                return null;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            var item = current.item;
            current = null;
            return current.item;
        };
        LinkList.prototype.shift = function () {
            if (this.isEmpty) {
                return null;
            }
            var item = this._head.next.item;
            this._head.next = this._head.next.next;
            if (this.isEmpty) {
                this._tail.next = null;
            }
            return item;
        };
        //改
        LinkList.prototype.write = function (index, item) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.item = item;
        };
        //查
        LinkList.prototype.read = function (index) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            return current.item;
        };
        LinkList.prototype.search = function (item) {
            var result = [];
            this.foreach(function (ele, index) {
                if (ele === item) {
                    result.push(index);
                }
            });
            return result;
        };
        //高阶函数
        LinkList.prototype.foreach = function (f) {
            var current = this._head.next;
            var num = 0;
            while (current !== null) {
                f(current.item, num, this);
                current = current.next;
                num += 1;
            }
        };
        /**
         * 请暂时不要使用这个函数，因为我也不知道它会不会爆炸
         * 除非你读过这个函数的源代码
         * @param f 判断元素优先级的回调函数
         * @param increase 是否升序，默认升序
         * @returns 返回一个排序的链表
         */
        LinkList.prototype.sortby = function (f, increase) {
            if (increase === void 0) { increase = true; }
            var priority = new LinkList();
            var sorted = new LinkList();
            priority.push(-0);
            sorted.push(null);
            var compare = increase ? function (a, b) { return a < b; } : function (a, b) { return a > b; };
            this.foreach(function (ele) {
                var currentPri = f(ele);
                var node = sorted._head.next;
                var priNode = priority._head.next;
                var foundPlace = false;
                while (node.next !== null) {
                    // if (currentPri < priNode.next.item) {
                    if (compare(currentPri, priNode.next.item)) {
                        node.next = new Node(ele, node.next);
                        priNode.next = new Node(currentPri, priNode.next);
                        foundPlace = true;
                        break;
                    }
                    node = node.next;
                    priNode = priNode.next;
                }
                if (!foundPlace) {
                    sorted.push(ele);
                    priority.push(currentPri);
                }
            });
            sorted.shift();
            return sorted;
        };
        return LinkList;
    }());
    Struc.LinkList = LinkList;
    var Map = /** @class */ (function () {
        function Map() {
            this._list = [];
        }
        Map.prototype.get = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return ele.value;
                }
            }
            return null;
        };
        Map.prototype.getKeyByVal = function (val) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.value === val) {
                    return ele.key;
                }
            }
            return null;
        };
        Map.prototype.keyExist = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return true;
                }
            }
            return false;
        };
        Map.prototype.set = function (key, value) {
            for (var n = 0; n < this._list.length; n += 1) {
                if (this._list[n].key === key) {
                    this._list[n].value = value;
                    return false;
                }
            }
            this._list.push(new MapNode(key, value));
            return true;
        };
        Map.prototype.batchSet = function (keys, values) {
            if (keys.length !== values.length) {
                return false;
            }
            for (var n = 0; n < keys.length; n += 1) {
                this.set(keys[n], values[n]);
            }
            return true;
        };
        Map.prototype.remove = function (key) {
            var count = 0;
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    this._list.splice(count, 1);
                    return true;
                }
                count += 1;
            }
            return false;
        };
        Object.defineProperty(Map.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Map.prototype.foreach = function (f) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                f(ele.key, ele.value);
            }
            return;
        };
        Map.prototype.filter = function (f) {
            var result = new Map();
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (f(ele.key, ele.value)) {
                    result.set(ele.key, ele.value);
                }
            }
            return result;
        };
        return Map;
    }());
    Struc.Map = Map;
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this._list = [];
            this._pointer = 0;
            source.forEach(function (ele) {
                _this._list.push(ele);
            });
        }
        Object.defineProperty(PointerList.prototype, "exceeding", {
            get: function () {
                return this._pointer >= this._list.length || this._pointer < 0;
            },
            enumerable: true,
            configurable: true
        });
        /*
        以下注释中，把数组看作横向排列的一系列元素
        index = 0的元素在最左侧
        */
        PointerList.prototype.read = function () {
            return this._list[this._pointer];
        };
        PointerList.prototype.step = function () {
            this._pointer += 1;
            return this.read();
        };
        PointerList.prototype.to = function (place) {
            this._pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this._list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this._list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            //读取位于当前pointer所指的元素右边若干格的元素
            //shift默认为1，即当前pointer右边相邻的元素
            //shift为负数时获取左侧的元素
            return this._list[this._pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "last", {
            get: function () {
                return this._list[this._list.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "first", {
            get: function () {
                return this._list[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "pointer", {
            get: function () {
                return this._pointer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "atEnd", {
            get: function () {
                return this._pointer === this._list.length - 1;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gameSet_URL = "./Database/GameSet.json", enemyDatabase_URL = "./Database/EnemyDatabase.json", operatorDatabase_URL = "./Database/OperatorDatabase.json";
var Database = /** @class */ (function () {
    function Database() {
        var _this = this;
        Laya.loader.load([enemyDatabase_URL, operatorDatabase_URL, gameSet_URL], Laya.Handler.create(this, function () {
            _this._enemyData = Laya.loader.getRes(enemyDatabase_URL);
            _this._operatorData = Laya.loader.getRes(operatorDatabase_URL);
            _this._gameSet = Laya.loader.getRes(gameSet_URL);
        }));
        console.log(this);
    }
    //直接public static inst:Database = new Database(),是否可以在类装载时就创建所需的单例?
    Database.init = function () {
        this.inst = new Database();
        this.init = function () { };
    };
    Database.prototype.getPath = function (pathName) {
        return this._gameSet["paths"][pathName];
    };
    Database.prototype.getEnemy = function (enemyName) {
        return this._enemyData[enemyName];
    };
    Database.prototype.getOprt = function (operatorName) {
        return this._operatorData[operatorName];
    };
    Database.prototype.getGround = function () {
        return this._gameSet["ground"];
    };
    Database.prototype.getTimetable = function () {
        return this._gameSet["timetable"];
    };
    Object.defineProperty(Database.prototype, "UnitSize", {
        get: function () {
            return this.getGround().size;
        },
        enumerable: true,
        configurable: true
    });
    return Database;
}());
exports.default = Database;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataStructure_1 = require("./DataStructure");
var FieldName = /** @class */ (function () {
    function FieldName() {
    }
    Object.defineProperty(FieldName.prototype, "Global", {
        get: function () {
            return "Global";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldName.prototype, "People", {
        get: function () {
            return "People";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldName.prototype, "CreateEnemySprite", {
        get: function () {
            return "CreateEmemySprite";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldName.prototype, "Collision", {
        get: function () {
            return "Collision";
        },
        enumerable: true,
        configurable: true
    });
    return FieldName;
}());
var TypeName = /** @class */ (function () {
    function TypeName() {
    }
    Object.defineProperty(TypeName.prototype, "Any", {
        get: function () {
            return "Any";
        },
        enumerable: true,
        configurable: true
    });
    return TypeName;
}());
var EventCentre = /** @class */ (function () {
    function EventCentre() {
        this._eventFields = new DataStructure_1.Struc.Map();
    }
    EventCentre.init = function () {
        EventCentre.i = new EventCentre();
        this.init = function () { };
    };
    ;
    EventCentre.prototype.on = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).on(type, caller, method, args);
    };
    EventCentre.prototype.event = function (field, type, args) {
        if (!this._eventFields.keyExist(field)) {
            return;
        }
        this._eventFields.get(field).event(type, args);
    };
    EventCentre.prototype.once = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).once(type, caller, method, args);
    };
    /**
     * 区分不同的事件区域
     * 一个事件区域的事件，不能被另一个事件区域的监听器得知
     */
    EventCentre.FieldName = new FieldName();
    EventCentre.TypeName = new TypeName();
    return EventCentre;
}());
exports.default = EventCentre;
},{"./DataStructure":12}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var myMath_1 = require("./myMath");
var EventCentre_1 = require("./EventCentre");
/**
 * ColiBox是碰撞箱类
 * 可以描述某一矩形实体的位置
 */
var ColiBox = /** @class */ (function (_super) {
    __extends(ColiBox, _super);
    function ColiBox(register) {
        var _this = _super.call(this, 0, 0, 0, 0) || this;
        _this.registrant_ = _this.registrant_;
        return _this;
    }
    Object.defineProperty(ColiBox.prototype, "registrant", {
        get: function () {
            return this.registrant_;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 就是……来一组（100个）随机的碰撞箱
     * @param xRange
     * @param yRange
     * @param widRange
     * @param higRange
     */
    ColiBox.randomBoxes = function (xRange, yRange, widRange, higRange) {
        if (xRange === void 0) { xRange = 1200; }
        if (yRange === void 0) { yRange = 800; }
        if (widRange === void 0) { widRange = 300; }
        if (higRange === void 0) { higRange = 300; }
        var rad = myMath_1.default.randomInt;
        var result = [];
        for (var i = 0; i < 50; i += 1) {
            result.push(new ColiBox(null));
            result[i].pos(rad(xRange), rad(yRange)).size(rad(widRange), rad(higRange));
        }
        return result;
    };
    ColiBox.prototype.pos = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    ColiBox.prototype.size = function (width, height) {
        this.width = width;
        this.height = height;
        return this;
    };
    ColiBox.prototype.intersects_X = function (rec) {
        if (this.x < rec.x) {
            return rec.intersects_X(this);
        }
        return (this.x >= rec.x && this.x <= rec.right) ||
            (this.right >= rec.x && this.right <= rec.right);
    };
    ColiBox.prototype.intersects_Y = function (rec) {
        if (this.y < rec.y) {
            return rec.intersects_Y(this);
        }
        return (this.y >= rec.y && this.y <= rec.bottom) ||
            (this.bottom >= rec.y && this.bottom <= rec.bottom);
    };
    return ColiBox;
}(Laya.Rectangle));
exports.ColiBox = ColiBox;
/**
 * ColiPareList是一个ColiBox数组
 */
var ColiPareList = /** @class */ (function () {
    function ColiPareList() {
        this.array = [];
    }
    Object.defineProperty(ColiPareList.prototype, "length", {
        //还原array接口
        get: function () {
            return this.array.length;
        },
        enumerable: true,
        configurable: true
    });
    ColiPareList.prototype.read = function (index) {
        return this.array[index];
    };
    ColiPareList.prototype.write = function (index, item) {
        this.array[index] = item;
    };
    ColiPareList.prototype.push = function (item) {
        this.array.push(item);
    };
    ColiPareList.prototype.splice = function (index, length) {
        return this.array.splice(index, length);
    };
    /**
     * 实现一下foreach
     * @param f f:(ele:[ColiBox,ColiBox], index:number, arr:ColiPareList)=>void
     *
     */
    ColiPareList.prototype.foreach = function (f) {
        for (var n = 0; n < this.array.length; n += 1) {
            f(this.array[n], n, this);
        }
    };
    ColiPareList.prototype.clone = function () {
        var result = new ColiPareList();
        for (var n = 0; n < this.length; n += 1) {
            result.write(n, this.read(n));
        }
        return result;
    };
    /**
     * 输入一个新的碰撞关系表，返回“进入”“离开”“维持碰撞”三个表
     * @param newList 新碰撞关系表
     */
    ColiPareList.prototype.findChange = function (newList) {
        var inList = new ColiPareList(); //新产生的碰撞关系
        var remainList = new ColiPareList(); //维持原状的碰撞关系
        var me = this.clone(); //解除的碰撞关系
        var found = false;
        for (var n = 0; n < newList.length; n += 1) {
            found = false;
            var current = newList.read(n);
            for (var k = 0; k < me.length; k += 1) { //look for duplicate element in me
                var toCheck = me.read(k);
                if (current[0] === toCheck[0] && current[1] === toCheck[1]) { //pair duplicate = remain
                    remainList.push(current);
                    me.splice(k, 1); //keep splicing the old array
                    found = true;
                    break;
                }
            }
            if (!found) { //pair not duplicate
                inList.push(current); //this element is new
            }
        }
        return {
            in: inList,
            out: me,
            remain: remainList //所有新表和旧表都有的元素，就是“原本就在一起，现在还在一起”的“不变”列表
        };
    };
    return ColiPareList;
}());
exports.ColiPareList = ColiPareList;
//暂时废弃此类
var CollisionEvent = /** @class */ (function () {
    function CollisionEvent(boxes) {
        this.box0 = boxes[0];
        this.box1 = boxes[1];
    }
    return CollisionEvent;
}());
exports.CollisionEvent = CollisionEvent;
/**
 * 这个类虽然叫质量效应，但它其实是一个物理类
 * 目前主营业务是碰撞检测
 * inst太难写了而且容易与init混淆，以后全部写成i
 */
var MassEffect = /** @class */ (function () {
    function MassEffect() {
        this.coliBoxes = []; //已注册的碰撞箱
        this.oldPares = new ColiPareList(); //上一次碰撞检测的结果
    }
    MassEffect.init = function (scene) {
        this.i = new MassEffect();
        this.i.scene = scene;
        this.i.testLayer = new Laya.Sprite;
        this.i.testLayer.pos(100, 100);
        scene.addChild(this.i.testLayer);
        this.init = function () { };
    };
    /**
     * 每一帧中所要做的事
     * 1.进行碰撞检测
     * 2.刷新“旧碰撞关系”
     * 3.发布碰撞事件
     */
    MassEffect.prototype.frameWork = function () {
        var _this = this;
        var newList = this._collisionDetect(this.coliBoxes); //进行碰撞检测
        var result = this.oldPares.findChange(newList); //寻找变化的碰撞关系
        this.oldPares = newList; //刷新“旧碰撞关系”
        result.in.foreach(function (ele) {
            EventCentre_1.default.i.event(EventCentre_1.default.FieldName.Collision, "IN", ele);
        });
        result.out.foreach(function (ele) {
            EventCentre_1.default.i.event(EventCentre_1.default.FieldName.Collision, "OUT", ele);
        });
        this.testLayer.graphics.clear();
        this.coliBoxes.forEach(function (ele) {
            myMath_1.default.drawRec(_this.testLayer, ele, "#444444");
        });
        result.in.foreach(function (ele) {
            myMath_1.default.drawRec(_this.testLayer, ele[0], "#ff0000");
            myMath_1.default.drawRec(_this.testLayer, ele[1], "#ff0000");
        });
        result.out.foreach(function (ele) {
            myMath_1.default.drawRec(_this.testLayer, ele[0], "#0000ff");
            myMath_1.default.drawRec(_this.testLayer, ele[1], "#0000ff");
        });
        this.neo.pos(this.testLayer.mouseX - 50, this.testLayer.mouseY - 50);
        myMath_1.default.drawRec(this.testLayer, this.neo, "#00ff00");
    };
    /**
     * 测试用方法
     */
    MassEffect.prototype.test = function () {
        var e = ColiBox.randomBoxes();
        for (var n = 0; n < 50; n += 1) {
            this.coliBoxes.push(e[n]);
        }
        this.neo = e[0];
        this.neo.size(100, 100);
    };
    /**
     * 注册碰撞箱
     */
    MassEffect.prototype.signBox = function (registrant, type, x, y, width, height) {
        var box = new ColiBox(registrant);
        box.pos(x, y);
        box.size(width, height);
        this.coliBoxes.push(box);
    };
    /**
     * 输入一个碰撞箱列表，返回碰撞结果
     * @param list 碰撞箱列表
     * @returns 碰撞结果
     */
    MassEffect.prototype._collisionDetect = function (list) {
        myMath_1.default.bubbleSort(list, function (ele) { return ele.x; }); //以x轴坐标升序排列所有碰撞箱
        var pareList = new ColiPareList();
        for (var n = 0; n < list.length - 1; n += 1) {
            var paringBox = list[n];
            for (var p = n + 1; p < list.length; p += 1) {
                var toPare = list[p];
                if (!paringBox.intersects_X(toPare)) { //如果二者在x轴不相交，直接跳出循环
                    break;
                }
                else if (paringBox.intersects_Y(toPare)) { //如果二者在x轴相交，且在y轴相交，则它们重合了
                    pareList.push([paringBox, toPare]);
                }
                //如果二者在x轴相交，在y轴不相交，则什么都不做，继续循环
            }
        }
        return pareList;
        /*
        碰撞检测算法
        首先，所有的待检测的碰撞箱对象都事先根据x值排了序，也就是从左到右排列
        
        然后开始碰撞检测

        1.数组中的每一个元素（除了最后一个）都会从它的位置的下一个元素开始找起
        index   0   1   2   3   4   ....    l-2     l-1
                []  []  []  []  []          []      []
                                            ↑
                                        第一层循环只遍历到这里
                                        也就是倒数第二个元素
        2.如果这个元素找到了一个在x轴与其重叠的碰撞箱，那么就再查看它们的y轴碰撞关系
        0                          1   2
        [这个碰撞箱在搜寻...]       [√]  []
            *查看实例0与实例1之间的碰撞关系，如果y轴不碰撞，什么都不做。如果y轴碰撞，将二者加入碰撞集合中
        
        3.找到一个x轴重叠碰撞箱之后，继续找下一个，直到整个数组遍历完成
        0                          1    2   3   4   5   6   7    ...
        [这个碰撞箱在搜寻...]       [√]  [√] [√] [√] [√] [√] [√]   ...

        4.但是，如果找到一个与其不重叠的碰撞箱，那么剩下的碰撞箱就都不检查了
        因为所有的碰撞箱已经事先按x轴坐标升序排列，出现一个不重叠之后剩下的也都不重叠
        0                          1    2   3      4                 5   6   7    ...
        [这个碰撞箱在搜寻...]       [√]  [√] [x] [(;ﾟдﾟ)wdnmd无视我?]  []  []  []   ...
                                            ↑
                                            发现不重叠的碰撞箱
                                            剩下的全都放弃检查
        
        搜索时大概会是这种感觉
        0   1   2   3   4
        []  []  []  []  []整个数组
        []搜寻者
            []  []  []  []配对成功项目
            []搜寻者
                []  []配对成功项目
                []搜寻者
                    []  []配对成功项目
                    []搜寻者
                        []配对成功项目
        结果：
        0:1 0:2 0:3 0:4
        1:2 1:3
        2:3 2:4
        3:4
        */
    };
    return MassEffect;
}());
exports.default = MassEffect;
/**
 * 储存代码
 */
function frameTest() {
    //let m_x:number = this.testLayer.mouseX;
    // let m_y:number = this.testLayer.mouseY;
    // this.neo.pos(m_x-50,m_y-50).size(100,100);
    // let newCollision = this._collisionDetect(this.coliBoxes);
    // let result = this.oldPares.findChange(newCollision);
    // //进入涂红，离开涂蓝，不变涂灰，neo涂绿
    // this.testLayer.graphics.clear();
    // for (let n = 0; n < result.remain.length; n += 1){
    //     let pair:[ColiBox, ColiBox] = result.remain.read(n);
    //     MyMath.drawRec(this.testLayer, pair[0], "#111111");
    //     MyMath.drawRec(this.testLayer, pair[1], "#111111");
    // }
    // for (let n = 0; n < result.in.length; n += 1){
    //     let pair:[ColiBox, ColiBox] = result.in.read(n);
    //     MyMath.drawRec(this.testLayer, pair[0], "#ff0000");
    //     MyMath.drawRec(this.testLayer, pair[1], "#ff0000");
    // }
    // for (let n = 0; n < result.out.length; n += 1){
    //     let pair:[ColiBox, ColiBox] = result.out.read(n);
    //     MyMath.drawRec(this.testLayer, pair[0], "#0000ff");
    //     MyMath.drawRec(this.testLayer, pair[1], "#0000ff");
    // }
    // console.log(`in:${result.in.length},out:${result.out.length},remain:${result.remain.length}`);
    // MyMath.drawRec(this.testLayer, this.neo, "#00ff00");
    // this.oldPares = newCollision;
}
},{"./EventCentre":14,"./myMath":16}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyMath = /** @class */ (function () {
    function MyMath() {
    }
    //Laya模块
    /**
     * 判断两个矩形对象是否重叠
     * @param rec0 一个矩形
     * @param rec1 另一个矩形
     */
    MyMath.overlap_Rec = function (rec0, rec1) {
        return this.overlap_2d(rec0.x, rec1.x, rec0.width, rec1.width) &&
            this.overlap_2d(rec0.y, rec1.y, rec0.height, rec1.height);
    };
    /**
     * 在指定绘图节点中绘制矩形
     * @param spr 绘图节点
     * @param rec 矩形
     * @param color 颜色
     */
    MyMath.drawRec = function (spr, rec, color) {
        if (color === void 0) { color = "#ffffff"; }
        spr.graphics.drawRect(rec.x, rec.y, rec.width, rec.height, color, "#888888", 2);
    };
    //Laya模块
    /**
     * 判断在数轴上两条线是否重叠
     * @param point0 线段0的左侧端点
     * @param point1 线段1的左侧端点
     * @param length0 线段0的长度
     * @param length1 线段1的长度
     */
    MyMath.overlap_2d = function (point0, point1, length0, length1) {
        return MyMath.include_2d(point0, length0, point1) ||
            MyMath.include_2d(point0, length0, point1 + length1);
    };
    /**
     * 判断在数轴上一个点是否处于一条线段上
     * @param locate 线段左侧端点位置
     * @param length 线段长度
     * @param dot 点位
     */
    MyMath.include_2d = function (locate, length, dot) {
        return dot >= locate && dot <= locate + length;
    };
    /**
     * @param upLimit 上界
     * @param loLimit 下界
     * @returns 上界与下界之间的随机整数
     */
    MyMath.randomInt = function (upLimit, loLimit) {
        if (loLimit === void 0) { loLimit = 0; }
        return Math.round(Math.random() * (upLimit - loLimit) + loLimit);
    };
    /**
     *
     * @param front 原数字
     * @param shift 增加量
     * @param end 增加上限（若增加量为负，则为下限）
     *
     */
    MyMath.moveTo = function (front, shift, end) {
        var result = front + shift;
        if (shift > 0 && result > end) {
            result = end;
        }
        else if (shift < 0 && result < end) {
            result = end;
        }
        return result;
    };
    /**
     * 冒泡排序
     * 注意这个算法会直接修改原数组
     * @param source 原数组
     * @param value 优先值取值函数
     * @param increase 是否升序（默认升序）
     */
    MyMath.bubbleSort = function (source, value, increase) {
        if (increase === void 0) { increase = true; }
        // let time = 0;
        var complete = true;
        for (var n = source.length - 1; n > 0; n -= 1) {
            complete = true;
            for (var m = 0; m < n; m += 1) {
                var cur = value(source[m]);
                var next = value(source[m + 1]);
                if (increase ? (cur > next) : (cur < next)) {
                    var store = source[m];
                    source[m] = source[m + 1];
                    source[m + 1] = store;
                    complete = false;
                }
                // time += 1;
            }
            if (complete) {
                break;
            }
        }
    };
    return MyMath;
}());
exports.default = MyMath;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameSceneUI = /** @class */ (function (_super) {
        __extends(GameSceneUI, _super);
        function GameSceneUI() {
            return _super.call(this) || this;
        }
        GameSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameScene");
        };
        return GameSceneUI;
    }(Scene));
    ui.GameSceneUI = GameSceneUI;
    REG("ui.GameSceneUI", GameSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
