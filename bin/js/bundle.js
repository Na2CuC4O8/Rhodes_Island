var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Struc;
(function (Struc) {
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this._list = [];
            this._pointer = 0;
            source.forEach(function (ele) {
                _this._list.push(ele);
            });
        }
        Object.defineProperty(PointerList.prototype, "exceeding", {
            get: function () {
                return this._pointer >= this._list.length || this._pointer < 0;
            },
            enumerable: true,
            configurable: true
        });
        PointerList.prototype.read = function () {
            return this._list[this._pointer];
        };
        PointerList.prototype.step = function () {
            this._pointer += 1;
            return this;
        };
        PointerList.prototype.to = function (place) {
            this._pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this._list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this._list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            return this._list[this._pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "last", {
            get: function () {
                return this._list[this._list.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "pointer", {
            get: function () {
                return this._pointer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "atEnd", {
            get: function () {
                return this._pointer === this._list.length - 1;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var GameField_1 = require("./SceneScript/GameField");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/GameField.ts", GameField_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1400;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/GameField":11,"./SceneScript/Loading":12}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataStructure_1 = require("../DataStructure");
var gameSet_URL = "./Database/GameSet.json", enemyDatabase_URL = "./Database/EnemyDatabase.json", operatorDatabase_URL = "./Database/OperatorDatabase.json";
var Database = /** @class */ (function () {
    function Database() {
        this.enemyData = Laya.loader.getRes(enemyDatabase_URL);
        this.operatorData = Laya.loader.getRes(operatorDatabase_URL);
        this.gameSet = Laya.loader.getRes(gameSet_URL);
        this.initTimeTable();
    }
    Database.prototype.initTimeTable = function () {
        var _this = this;
        this.timeTable = new DataStructure_1.Struc.PointerList();
        this.gameSet["timetableBref"].forEach(function (element) {
            var time = element["time"];
            var typeData = _this.enemyData[element["type"]];
            var path = _this.gameSet["paths"][element.path];
            _this.timeTable.push({ time: time, typeData: typeData, path: path });
        });
    };
    Database.prototype.isHappening = function (time) {
        return this.timeTable.read() && time === this.timeTable.read().time;
    };
    Database.prototype.readTimeEvent = function () {
        return this.timeTable.read();
    };
    Database.prototype.readTimeEventDone = function () {
        this.timeTable.step();
    };
    Database.prototype.getPath = function (pathName) {
        return this.gameSet["paths"][pathName];
    };
    Database.prototype.getEnemy = function (enemyName) {
        return this.enemyData[enemyName];
    };
    Database.prototype.getOperator = function (operatorName) {
        return this.operatorData[operatorName];
    };
    Database.prototype.getGround = function () {
        return this.gameSet["ground"];
    };
    return Database;
}());
exports.default = Database;
},{"../DataStructure":1}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./Interface/People");
var State_1 = require("./Interface/State");
var Present_1 = require("./Interface/Present");
var DataStructure_1 = require("../DataStructure");
var myMath_1 = require("../myMath");
/**
 * EnemyPresent
 */
var EnemyPresent = /** @class */ (function (_super) {
    __extends(EnemyPresent, _super);
    function EnemyPresent(father, data) {
        return _super.call(this, father, data) || this;
    }
    return EnemyPresent;
}(Present_1.default));
/**
 * EnemeState
 *
 */
var EnemyState = /** @class */ (function (_super) {
    __extends(EnemyState, _super);
    function EnemyState(data, path) {
        var _this = _super.call(this, data) || this;
        _this._xSpeed = 0;
        _this._ySpeed = 0;
        _this._path = new DataStructure_1.Struc.PointerList(path);
        // this._location = this._path.read()
        _this._x = _this._path.read()[0];
        _this._y = _this._path.read()[1];
        _this._speed = data["speed"];
        return _this;
    }
    Object.defineProperty(EnemyState.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyState.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyState.prototype, "atLastNode", {
        get: function () {
            return this._path.pointer === this._path.length - 1 &&
                this._x === this._path.last[0] &&
                this._y === this._path.last[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyState.prototype, "isArrived", {
        get: function () {
            return this._path.read()[0] === this._x &&
                this._path.read()[1] === this._y;
        },
        enumerable: true,
        configurable: true
    });
    EnemyState.prototype.unitMove = function () {
        this._x = myMath_1.default.moveTo(this._x, this._xSpeed, this._path.read()[0]); //x轴移动
        this._y = myMath_1.default.moveTo(this._y, this._ySpeed, this._path.read()[1]); //y轴移动
    };
    EnemyState.prototype.setAxisSpeed = function () {
        var x_shift = this._path.read()[0] - this._x, //求x轴总距离
        y_shift = this._path.read()[1] - this._y, //求y轴总距离
        hypotenuse = Math.sqrt(Math.pow(x_shift, 2) + Math.pow(y_shift, 2)); //求直线总距离
        this._xSpeed = x_shift * this._speed / hypotenuse; //设置x轴速度
        this._ySpeed = y_shift * this._speed / hypotenuse; //设置y轴速度
    };
    EnemyState.prototype.nextAim = function () {
        this._path.step();
    };
    return EnemyState;
}(State_1.default));
/**
 * People
 *
 *
 *
 *
 *
 */
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    function Enemy(upperPath, father, enemyData, path, database) {
        var _this = _super.call(this) || this;
        _this._upperPath = upperPath;
        _this._data = enemyData;
        _this._present = new EnemyPresent(father, _this._data);
        _this._present.setSize(database.getGround()["size"]);
        // this._present.setPos(0,0)
        _this._state = new EnemyState(_this._data, path);
        console.log("已新建敌人");
        console.log(_this);
        console.log("已新建敌人");
        return _this;
    }
    Enemy.prototype.update = function () {
        this.move();
    };
    Enemy.prototype.move = function () {
        /**
         * 函数说明
         * https://www.lucidchart.com/documents/view/96582305-ec6e-4c41-b178-aa78f91ce0d2/0
         */
        if (this._state.atLastNode) { //如果已到达终点
            this.move = function () { }; //则清空move函数
            return;
        }
        if (this._state.isArrived) { //如果已到达下一个节点
            this._state.nextAim(); //重设节点
            this._state.setAxisSpeed(); //计算速度
        }
        this._state.unitMove(); //进行一次移动
        this._present.setPos(this._state.x, this._state.y); //改变元素位置
    };
    return Enemy;
}(People_1.default));
exports.default = Enemy;
// export default class Enemy extends basic.People{
//     constructor(father:Laya.Sprite,upperPath:GameField,data:any,path:number[][]){
//         super()
//         this.state.init(data,path)
//         this.present.init(father, "Basic/There-2.png", 0,0)
//         // this.state.speed = 5
//         // this.state.setAxisSpeed()
//         this.update = ()=>{
//             // this.state.updatePosition()
//             // this.present.setPosition(this.state.position)
//             // this.state.isArrived() && this.state.nextAim()
//         }
//         Laya.timer.once(2000,this,console.log,[this])
//     }
// }
/*
export default class Enemy extends basic.People{
    public speed:number = 0.4       //速度
    public CentreShift:number = 35  //与Ground.Grids.size的一半保持一致，稍后改为变量
    private hitDoctor:number = 1    //进门之后打刀客他多少血
    // public path:number[][] = [
    //     [0,0],
    //     [100,100],
    //     [0,0]
    // ]
    
    public path:number[][] = []     //路径对象
    public father:Laya.Sprite       //原点坐标对象
    private place:Grids             //地图方格对象
    private upperPath:GameField     //含有此实例的实例

    constructor(father:Laya.Sprite, place:Grids, upperPath:GameField){
        super()
        // alert(1)
        this.upperPath = upperPath
        this.father = father
        this.place = place
        this.state.ele = Laya.Sprite.fromImage("Basic/There.png")
        // alert(2)

        // const start:number[] = this.path.shift()
        this.state.ele.pos(0,0).size(30,30)
        father.addChild(this.state.ele)

        this.SetPath()
        this.move()
    }

    private SetPath(){
        const points:number[][] = [
            [0,0],
            [0,5],
            [5,5],
            [5,3],
            [3,3],
            [3,0],
            [5,0],
            [5,9]
        ]
        points.forEach((ele)=>{
            // console.log(this.upperPath)
            const rec:Laya.Rectangle = this.upperPath.grids.RecMap[ele[0]][ele[1]]
            const current:number[] = [
                rec.x,
                rec.y
            ]
            this.path.push(current)
        })
    }

    private move(){
        const target:number[] = this.path.shift()
        if (target === undefined){
            this.goal()
            return
        }
        const {x,y} = this.state.ele
        const hypotenuse:number = Math.sqrt(Math.pow(x-target[0],2)+Math.pow(y-target[1],2))
        const time:number = Math.floor(hypotenuse/this.speed)
        const tween:Laya.Tween = Laya.Tween.to(this.state.ele, {x:target[0],y:target[1]}, time, null,
            Laya.Handler.create(this,this.move),100)

    }
    

    private goal(){
        this.upperPath.doctor.damaged(this.hitDoctor)
    }
}
*/ 
},{"../DataStructure":1,"../myMath":13,"./Interface/People":6,"./Interface/Present":7,"./Interface/State":8}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Grids = /** @class */ (function () {
    function Grids(upperPath, father, database) {
        this.spriteGroup = [];
        this.rectGroup = [];
        this.upperPath = upperPath;
        this.father = father;
        this.database = database;
        //创建游戏场地: Start
        var ground = database.getGround(), width = ground["width"], height = ground["height"], size = ground["size"], matrix = ground["matrix"];
        for (var x = 0; x < width; x += 1) {
            this.spriteGroup[x] = [];
            this.rectGroup[x] = [];
            for (var y = 0; y < height; y += 1) {
                //创建sprite: Start
                var sprite = Laya.Sprite.fromImage("Basic/Rec.png");
                sprite.pos(x * size, y * size).size(size, size);
                father.addChild(sprite);
                this.spriteGroup[x][y] = sprite;
                //创建Sprite: End
                //创建Rectangle: Start
                var rect = new Laya.Rectangle(x * size, y * size, size, size);
                this.rectGroup[x][y] = rect;
                //创建Rectangle: End
            }
        }
        //创建游戏场地: End
        console.log("Grids对象创建完成");
        console.log(this);
        console.log("Grids对象创建完成");
    }
    return Grids;
}());
exports.Grids = Grids;
// export class Grids{
//     public Map:Array<Array<Laya.Sprite>> = []
//     public RecMap:Array<Array<Laya.Rectangle>> = []
//     private static size:number = 90
//     private father:Laya.Sprite
//     private upperPath:GameField
//     private data:JSON
//     //old
//     //new
//     private database:Database
//     constructor(father:Laya.Sprite, upperPath:GameField, database:Database){
//         this.database = database
//         // this.father = father
//         // this.upperPath = upperPath
//         // this.data = data
//         // let cols = data["ground"]["width"],
//         // raws = data["ground"]["height"]
//         // for (let n = 0; n < raws; n += 1) {
//         //     this.Map[n] = []
//         //     this.RecMap[n] = []
//         //     for (let m = 0; m < cols; m += 1) {
//         //         this.initElement(n,m)
//         //     }
//         // }
//         // console.log(this.RecMap)
//     }
//     initElement(raw:number,count:number){
//         const current:Laya.Sprite = Laya.Sprite.fromImage("Basic/Rec.png");//载入图片
//         current.pos(Grids.size*count, Grids.size*raw)
//             .size(Grids.size,Grids.size)//依据static size属性改变大小、依据编号改变位置
//         current.name = `grid${raw}-${count}`//重命名为 grid行数-列数
//         this.Map[raw][count] = current
//         this.RecMap[raw][count] = new Laya.Rectangle(current.x,current.y,Grids.size,Grids.size)
//         // current.on(Laya.Event.CLICK, this.upperPath, this.upperPath.addOperator, [this.getPlace(count,raw)])//设定鼠标点击事件
//         //向GameField中添加Operator实例
//         this.father.addChild(current)
//     }
//     getPlace(count:number,raw:number):number[]{
//         //raw:第几行
//         //count:第几个
//         return [
//             this.RecMap[raw][count].x,
//             this.RecMap[raw][count].y
//         ]
//     }
// }
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People = /** @class */ (function () {
    function People() {
    }
    return People;
}());
exports.default = People;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Present：表现类
 */
var Present = /** @class */ (function () {
    function Present(father, data) {
        this._sprite = Laya.Sprite.fromImage(data["img"]);
        this._father = father;
        this._father.addChild(this._sprite);
    }
    Present.prototype.setSize = function (size) {
        this._sprite.size(size, size);
    };
    Present.prototype.setPos = function (x, y) {
        this._sprite.pos(x, y);
    };
    return Present;
}());
exports.default = Present;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State = /** @class */ (function () {
    function State(data) {
    }
    return State;
}());
exports.default = State;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SideOperator = /** @class */ (function () {
    function SideOperator(upperPath, father, data) {
        this._upperPath = upperPath;
        this._father = father;
        this._data = data;
        this._unit = Laya.Sprite.fromImage(data["img"]);
        father.addChild(this._unit);
    }
    SideOperator.prototype.size = function (width, height) {
        this._unit.size(width, height);
    };
    SideOperator.prototype.pos = function (x, y) {
        this._unit.pos(x, y);
    };
    Object.defineProperty(SideOperator.prototype, "sprite", {
        get: function () {
            return this._unit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SideOperator.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    return SideOperator;
}());
var SideField = /** @class */ (function () {
    function SideField(upperPath, father, list, database) {
        // private _operatorList:string[]
        this._sideOperators = [];
        this._upperPath = upperPath;
        this._father = father;
        // this._operatorList = list
        this._database = database;
        this._frame = Laya.Sprite.fromImage("Basic/Rec.png");
        var ground = database.getGround();
        this._frame.size(100, ground["size"] * ground["height"]).pos(ground["size"] * ground["width"], 0);
        this._father.addChild(this._frame);
        this.initSide(list);
        console.log(this);
    }
    SideField.prototype.initSide = function (list) {
        var _this = this;
        list.forEach(function (ele, index) {
            var data = _this._database.getOperator(ele);
            console.log(data);
            var currentSide = new SideOperator(_this, _this._frame, data);
            currentSide.pos(0, index * 100);
            currentSide.size(100, 100);
            _this._sideOperators.push(currentSide);
        });
        this.initSide = function () { };
    };
    Object.defineProperty(SideField.prototype, "sideSprites", {
        get: function () {
            var result = [];
            this._sideOperators.forEach(function (ele) {
                result.push(ele.sprite);
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SideField.prototype, "sideData", {
        get: function () {
            var result = [];
            this._sideOperators.forEach(function (ele) {
                result.push(ele.data);
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return SideField;
}());
exports.default = SideField;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":2}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Enemy_1 = require("../GameObj/Enemy");
var Grids_1 = require("../GameObj/Grids");
var Database_1 = require("../GameObj/Database");
// import GameEventManager from "../GameObj/GameEvent";
var SideField_1 = require("../GameObj/SideField");
var log = console.log;
var GameEventManager = /** @class */ (function () {
    function GameEventManager(upperpath) {
        this.upperPath = upperpath;
        this.database = upperpath._database;
        this.init_dragFromSide();
    }
    GameEventManager.prototype.init_dragFromSide = function () {
        this.upperPath.sideField;
    };
    return GameEventManager;
}());
var GameField = /** @class */ (function (_super) {
    __extends(GameField, _super);
    function GameField() {
        var _this = _super.call(this) || this;
        _this._enemies = [];
        _this._operators = [];
        _this._time_frame = 0;
        _this._database = new Database_1.default();
        _this._grids = new Grids_1.Grids(_this, _this.UISet, _this._database);
        _this.sideField = new SideField_1.default(_this, _this.UISet, ["bird", "sb", "bird"], _this._database); //参数["bird"]将在选人功能完成后改为变量
        // this._gameEventManager = new GameEventManager(this)
        _this.init_sideEvent();
        Laya.timer.loop(20, _this, _this.toLoop);
        return _this;
    }
    GameField.prototype.toLoop = function () {
        while (this._database.isHappening(this._time_frame)) {
            this._enemies.push(new Enemy_1.default(this, this.UISet, this._database.readTimeEvent().typeData, this._database.readTimeEvent().path, this._database));
            this._database.readTimeEventDone();
        }
        this._enemies.forEach(function (ele) {
            ele.update();
        });
        this._time_frame += 1;
    };
    GameField.prototype.init_sideEvent = function () {
        var _this = this;
        var toBuildEvents = this.sideField.sideSprites;
        var data = this.sideField.sideData;
        toBuildEvents.forEach(function (ele, index) {
            ele.on(Laya.Event.MOUSE_DOWN, _this, _this.onDrag, [data[index]]);
        });
    };
    GameField.prototype.onDrag = function (data) {
        var _this = this;
        var spr = Laya.Sprite.fromImage(data["img"]);
        spr.size(this._database.getGround()["size"], this._database.getGround()["size"]);
        this.UISet.addChild(spr);
        var draging = function () {
            spr.pos(_this.UISet.mouseX, _this.UISet.mouseY);
        };
        Laya.timer.loop(10, this, draging);
        this.stage.on(Laya.Event.MOUSE_UP, this, function () { Laya.timer.clear(_this, draging); });
    };
    return GameField;
}(layaMaxUI_1.ui.GameFieldSceneUI));
exports.default = GameField;
// export default class GameField extends ui.GameFieldSceneUI{
//     /**
//      * sb
//      */
//     public grids:Grids
//     public doctor:Doctor
//     public operators:Array<Operator> = []
//     public enemies:Array<Enemy> = []
//     private onKeydown:Function
//     public GameSet:JSON
//     public EnemyDatabase:JSON
//     public TimeTable:Struc.PointerList<timeNode>
//     private time:number
//     // public frameLoop:Laya.timer
//     constructor(){
//         super()
//         this
//         Laya.loader.load([gameSet_json, enemyDatabase], Laya.Handler.create(this, this.onLoaded),null,Laya.Loader.JSON)
//         //加载敌人数据库
//         //加载地图  
//     }
//     private onLoaded(){//加载完成后执行此函数
//         this.GameSet = Laya.loader.getRes(gameSet_json)//获取已加载的地图
//         this.EnemyDatabase = Laya.loader.getRes(enemyDatabase)//获取已加载的敌人数据
//         this.initTimeTable()//从地图数据中加载时间表
//         this.time = 0//将时间设为0;时间单位为帧
//         this.grids = new Grids(this.UISet,this,this.GameSet)//依据已加载的地图数据，设置地图
//         this.doctor = new Doctor()//初始化刀客他对象
//         this.keyBoardEventSetup()//初始化键盘事件
//         /**测试代码 */
//         // this.enemies.push(new Enemy(this.UISet, this, "bug0", []))
//         /**测试代码End */
//         Laya.timer.loop(20,this,this.frameLoop)//开启游戏帧循环
//     }
//     private initTimeTable(){
//         this.TimeTable = new Struc.PointerList<timeNode>()
//         const rawTable:Array<any> = this.GameSet["timetable"]
//         rawTable.forEach((ele)=>{
//             this.TimeTable.push({
//                 time:ele.time,
//                 type:this.EnemyDatabase[ele.type],
//                 path:this.GameSet["paths"][ele.path]
//             })
//         })
//         log(this.TimeTable)
//     }
//     private keyBoardEventSetup(){
//         this.onKeydown = (e:Laya.Event) => {
//             /**测试代码 */
//             if (e.keyCode === Laya.Keyboard.E) {
//                 console.log(this.enemies)
//             }
//             if (e.keyCode === Laya.Keyboard.F) {
//                 console.log(this.enemies[0])
//             }
//             /**测试代码End */
//         }
//         Laya.stage.on(Laya.Event.KEY_DOWN,this,this.onKeydown)
//     }
//     public frameLoop(){//每帧都会执行的代码块
//         if (this.TimeTable.read() && this.time === this.TimeTable.read().time) {
//             this.enemies.push(new Enemy(this.UISet,this,
//                 this.TimeTable.read().type,
//                 this.TimeTable.read().path))
//             this.TimeTable.step()
//         }
//         this.operators.forEach((ele)=>{//执行所有干员对象的update方法
//             ele.update()
//         })
//         this.enemies.forEach((ele)=>{//执行所有敌人对象的update方法
//             ele.update()
//         })
//         this.time ++
//     }
//     addOperator(place:number[]){//在地图上添加干员
//         //此方法被作为回调函数提供给this.grids对象，在点击地图空格时执行
//         this.operators.push(new Operator(this,place))
//     }
// }
},{"../GameObj/Database":3,"../GameObj/Enemy":4,"../GameObj/Grids":5,"../GameObj/SideField":9,"../ui/layaMaxUI":14}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
        Laya.Scene.open("GameFieldScene.scene");
        // console.log(Laya.loader)
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../ui/layaMaxUI":14}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyMath = /** @class */ (function () {
    function MyMath() {
    }
    MyMath.moveTo = function (front, shift, end) {
        if (shift === 0) {
            return front;
        }
        return shift > 0 ?
            ((front + shift) > end ? end : front + shift) :
            ((front + shift) < end ? end : front + shift);
    };
    return MyMath;
}());
exports.default = MyMath;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameFieldSceneUI = /** @class */ (function (_super) {
        __extends(GameFieldSceneUI, _super);
        function GameFieldSceneUI() {
            return _super.call(this) || this;
        }
        GameFieldSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameFieldScene");
        };
        return GameFieldSceneUI;
    }(Scene));
    ui.GameFieldSceneUI = GameFieldSceneUI;
    REG("ui.GameFieldSceneUI", GameFieldSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[10])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
