var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Game_1 = require("./SceneScript/Game");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/Game.ts", Game_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1800;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/Game":4,"./SceneScript/Loading":12}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var SceneManager_1 = require("./SceneManager");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        new SceneManager_1.default();
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./SceneManager":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventCentre_1 = require("./Toybox/EventCentre");
var Database_1 = require("./Toybox/Database");
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        var _this = this;
        this.loadingScene = "LoadingScene.scene";
        this.gameScene = "GameScene.scene";
        EventCentre_1.default.init();
        Database_1.default.init();
        //初始化事件中心和数据库
        Laya.Scene.open(this.loadingScene); //打开加载场景
        EventCentre_1.default.i.once("Init", "Regular", this, function () {
            Laya.Scene.open(_this.gameScene);
        });
    }
    return SceneManager;
}());
exports.default = SceneManager;
},{"./Toybox/Database":14,"./Toybox/EventCentre":15}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var GameFieldUI_1 = require("./GameObj/GameFieldUI");
var EnemyCentre_1 = require("./GameObj/EnemyCentre");
var Global_1 = require("../Toybox/Global");
var OprtCentre_1 = require("./GameObj/OprtCentre");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super.call(this) || this;
        _this._time = 0;
        Game.UISet = _this.UISet;
        Game.stage = _this.stage;
        var spr = new Laya.Sprite();
        _this.UISet.addChild(spr);
        Global_1.default.UISet_sub = spr;
        GameFieldUI_1.default.init(_this.scene); //ui初始化
        OprtCentre_1.default.init(); //干员管理类初始化
        EnemyCentre_1.default.init(); //敌人管理类初始化
        // MassEffect.init(this);//物理类初始化
        // MassEffect.i.test();//物理类进行测试 可移除
        // EventCentre.i.on(EventCentre.FieldName.Collision,"IN",this,(ele:[ColiBox,ColiBox])=>{
        //     console.log("IN detected");
        // })
        // EventCentre.i.on(EventCentre.FieldName.Collision,"OUT",this,(ele:[ColiBox,ColiBox])=>{
        //     console.log("OUT detected");
        // })
        Laya.timer.loop(17, _this, _this.frameWork); //开始帧循环
        return _this;
    }
    //这个变量代表游戏从开始到现在运行了多少帧
    Game.prototype.frameWork = function () {
        EnemyCentre_1.default.i.frameWork(this._time);
        GameFieldUI_1.default.i.update();
        this._time += 1;
    };
    return Game;
}(layaMaxUI_1.ui.GameSceneUI));
exports.default = Game;
},{"../Toybox/Global":16,"../ui/layaMaxUI":18,"./GameObj/EnemyCentre":5,"./GameObj/GameFieldUI":6,"./GameObj/OprtCentre":7}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Enemy_1 = require("./People_stuff/Enemy");
var DataStructure_1 = require("../../Toybox/DataStructure");
var Database_1 = require("../../Toybox/Database");
var EnemyCentre = /** @class */ (function () {
    function EnemyCentre() {
        this._enemyGroup = [];
        //Start
        //初始化时间轴
        var timeData = Database_1.default.i.getTimetable();
        this._timetable = new DataStructure_1.Struc.PointerList(timeData);
        //初始化时间轴
        //End
    }
    EnemyCentre.init = function () {
        this.i = new EnemyCentre();
        this.init = function () { };
    };
    EnemyCentre.prototype.frameWork = function (time) {
        /*
        这个函数是EnemyCentre类每帧所做的事情
        time是此次游戏自游戏开始至这个函数运行之时已经经过的帧数
        在预期中，这个数值会从0开始，每帧+1
        */
        //2019/11/18
        //下面这个判断条件的==改成了>=,还没测试过，记得测试
        if (!this._timetable.exceeding && time >= this._timetable.read()["time"]) {
            //空值检查 && 当前时间与时间表上的时间一致
            var data = this._timetable.read();
            this.createEnemy(data["type"], data["path"]);
            this._timetable.step();
        }
        this._enemyGroup.forEach(function (enemy) {
            enemy.frameWork();
        });
    };
    EnemyCentre.prototype.createEnemy = function (enemyID, pathID) {
        var enemy = new Enemy_1.default(enemyID, pathID);
        this._enemyGroup.push(enemy);
    };
    return EnemyCentre;
}());
exports.default = EnemyCentre;
},{"../../Toybox/DataStructure":13,"../../Toybox/Database":14,"./People_stuff/Enemy":8}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Database_1 = require("../../Toybox/Database");
var DataStructure_1 = require("../../Toybox/DataStructure");
var Global_1 = require("../../Toybox/Global");
var Game_1 = require("../Game");
var OprtCentre_1 = require("./OprtCentre");
/**
 * 干员栏的一个单元
 */
var OprtProfile = /** @class */ (function () {
    function OprtProfile(id) {
        //获取资料
        this.id = id;
        var data = Database_1.default.i.getOprt(id);
        this.img = data["img"];
        //创建sprite
        this.sprite = Laya.Sprite.fromImage(data["img"]);
        //监听点击事件
        this.sprite.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
    }
    OprtProfile.prototype.onMouseDown = function () {
        var spr = Laya.Sprite.fromImage(this.img); //创建并调整拖动图标
        spr.size(Database_1.default.i.UnitSize, Database_1.default.i.UnitSize);
        GameFieldUI.i.UISet.addChild(spr);
        Laya.timer.loop(20, this, this.onLoop, [spr, GameFieldUI.i.Centre.range]); //拖动图标开始跟随鼠标
        this.sprite.stage.once(Laya.Event.MOUSE_UP, this, this.onMouseUp, [spr, GameFieldUI.i.Centre.range]); //监听鼠标抬起事件
    };
    OprtProfile.prototype.onLoop = function (spr, range) {
        var x = Game_1.default.UISet.mouseX;
        var y = Game_1.default.UISet.mouseY;
        if ((x > 0 && x < range.right) && (y > 0 && y < range.bottom)) {
            var size = Database_1.default.i.UnitSize;
            x = x - x % size;
            y = y - y % size;
            spr.pos(x, y);
            return;
        }
        spr.pos(x - spr.width / 2, y - spr.height / 2);
    };
    OprtProfile.prototype.onMouseUp = function (spr, range) {
        Laya.timer.clear(this, this.onLoop); //停止跟随循环
        spr.destroy(); //消除拖动图标
        var x = Game_1.default.UISet.mouseX;
        var y = Game_1.default.UISet.mouseY;
        if ((x > 0 && x < range.right) && (y > 0 && y < range.bottom)) { //鼠标处于地图范围内
            var size = Database_1.default.i.UnitSize;
            x = (x - x % size) / size; //计算单位位置
            y = (y - y % size) / size;
            OprtCentre_1.default.i.createOprt(y, x, this.id);
        }
        else { //鼠标处于地图范围外
            //其实没什么要做的
        }
    };
    return OprtProfile;
}());
/**
 * 侧边栏UI类
 * 也就是干员栏
 */
var SideField = /** @class */ (function () {
    function SideField(scene, rightShift) {
        var _this = this;
        this._pixWidth = 100; //宽度
        this._pixHeight = 500; //高度
        this._profiles = [];
        //获取原点
        this._origin = scene.getChildByName("SideBar");
        //移动原点到CentreField的右边30px处
        this._origin.pos(rightShift, this._origin.y);
        //绘制方框
        this._origin.graphics.drawRect(0, 0, 100, 500, "#fa1566");
        //根据可选干员列表生成待选干员栏
        var list = Global_1.default.ListOfOprt; //Global.ListOfOprt仅在开发时采用，后续将会通过制定标准规定干员列表的来源
        list.forEach(function (ele, index) {
            var currentOprt = new OprtProfile(ele);
            currentOprt.sprite.pos(0, 80 * index).size(80, 80);
            _this._origin.addChild(currentOprt.sprite);
            _this._profiles[index] = currentOprt;
        });
        console.log(this);
    }
    return SideField;
}());
/**
 * 中央区域UI类
 */
var CentreField = /** @class */ (function () {
    function CentreField(scene) {
        //获取数据
        var data = Database_1.default.i.getGround();
        var _a = [data["width"], data["height"], data["size"]], width = _a[0], height = _a[1], size = _a[2];
        this._size = size;
        this._width = width;
        this._height = height;
        this._scene = scene;
        this._origin = scene.getChildByName("UISet");
        //创建CentreField区域数据
        this.range = new DataStructure_1.Box();
        this.range.size(width * size, height * size);
        //Start
        //创建地图方格 和对应的Box
        this._blocks = [];
        this._recs = [];
        for (var y = 0; y < height; y += 1) {
            this._blocks[y] = [];
            this._recs[y] = [];
            for (var x = 0; x < width; x += 1) {
                var block = Laya.Sprite.fromImage("Basic/Rec.png");
                this._origin.addChild(block);
                block.size(size, size).pos(x * size, y * size);
                this._blocks[y][x] = block;
                this._recs[y][x] = new DataStructure_1.Box();
                this._recs[y][x].pos(x * size, y * size).size(size, size);
                this._recs[y][x].unitX = x;
                this._recs[y][x].unitY = y;
            }
        }
        //创建地图方格
        //End
    }
    CentreField.prototype.CreateEnemy = function (imgURL, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        var sprite = Laya.Sprite.fromImage(imgURL); //创建sprite
        this._scene.getChildByName("UISet").addChild(sprite); //插入中心区域
        sprite.size(Database_1.default.i.UnitSize, Database_1.default.i.UnitSize); //根据数据库提供的常量设置大小
        sprite.pos(x, y); //确定位置
        return sprite;
    };
    /**
     * 输入一个方格，输出与其交叠的地图方格
     */
    CentreField.prototype.getRec = function (from) {
        var origin_x = this.round(from.x, this._size);
        var origin_y = this.round(from.y, this._size);
        var bottom = this.round(from.bottom, this._size);
        var right = this.round(from.right, this._size);
        if (origin_x >= this._width || origin_y >= this._height) {
            return [];
        }
        origin_x = origin_x < 0 ? 0 : origin_x; //origin_x is at least 0
        origin_y = origin_y < 0 ? 0 : origin_y; //origin_y is at least 0
        bottom = bottom >= this._height ? this._height - 1 : bottom; //bottom is at most this._height
        right = right >= this._width ? this._width - 1 : right; //right is at most this._right
        var result = [];
        for (var hei = origin_y; hei <= bottom; hei += 1) {
            for (var wid = origin_x; wid <= right; wid += 1) {
                result.push(this._recs[hei][wid]);
            }
        }
        return result;
    };
    /**
     * 求c = a / b
     * 返回c在数轴上向0移动时经过的第一个整数值
     * @param a
     * @param b
     */
    CentreField.prototype.round = function (a, b) {
        return (a - a % b) / b;
    };
    return CentreField;
}());
/**
 * 整个主要场景的UI类
 */
var GameFieldUI = /** @class */ (function () {
    function GameFieldUI(scene) {
        this.UISet = scene.getChildByName("UISet");
        this.SideBar = scene.getChildByName("SideBar");
        this._centre = new CentreField(scene);
        this._side = new SideField(scene, this.UISet.x + this._centre.range.width + 20);
        this._scene = scene;
        console.log(this);
    }
    GameFieldUI.init = function (scene) {
        this.i = new GameFieldUI(scene);
        this.init = function () { };
    };
    Object.defineProperty(GameFieldUI.prototype, "Centre", {
        get: function () {
            return this._centre;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameFieldUI.prototype, "Side", {
        get: function () {
            return this._side;
        },
        enumerable: true,
        configurable: true
    });
    GameFieldUI.prototype.update = function () {
    };
    return GameFieldUI;
}());
exports.default = GameFieldUI;
},{"../../Toybox/DataStructure":13,"../../Toybox/Database":14,"../../Toybox/Global":16,"../Game":4,"./OprtCentre":7}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OprtCentre = /** @class */ (function () {
    function OprtCentre() {
        this._oprtGroup = [];
    }
    OprtCentre.init = function () {
        this.i = new OprtCentre;
    };
    OprtCentre.prototype.createOprt = function (y, x, id) {
        console.log("New Operator at " + y + "_" + x);
    };
    return OprtCentre;
}());
exports.default = OprtCentre;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var Database_1 = require("../../../Toybox/Database");
var GameFieldUI_1 = require("../GameFieldUI");
var DataStructure_1 = require("../../../Toybox/DataStructure");
var Present_1 = require("./Present");
var State_1 = require("./State");
var myMath_1 = require("../../../Toybox/myMath");
/**
 * 敌人的表现类
 */
var EnemyPst = /** @class */ (function (_super) {
    __extends(EnemyPst, _super);
    function EnemyPst(url) {
        return _super.call(this, url) || this;
    }
    EnemyPst.prototype.perform = function (state) {
        this._sprite.pos(state.x, state.y);
    };
    return EnemyPst;
}(Present_1.default));
/**
 * 敌人的状态类
 */
var EnemyStt = /** @class */ (function (_super) {
    __extends(EnemyStt, _super);
    function EnemyStt(data, pathID) {
        var _this = _super.call(this, data) || this;
        _this.stop = false; //这个敌人是否还有下一个路径坐标
        _this.oldCollision = []; //这是上一次碰到的地图节点
        var size = Database_1.default.i.subUnitSize;
        //初始化路径
        _this._path = new DataStructure_1.Struc.PointerList();
        var rawPath = Database_1.default.i.getPath(pathID);
        rawPath.forEach(function (ele, index) {
            _this._path.push({ x: ele[0], y: ele[1] });
        });
        //初始化位置
        _this._x = _this._path.first.x;
        _this._y = _this._path.first.y;
        //初始化速度
        _this._speed = data["speed"];
        //初始化轴速度
        _this._resetAxisSpeed();
        //注册碰撞箱
        _this._bodyBox = new DataStructure_1.Box().size(size, size);
        _this.resetBodyPosition();
        console.log(_this.bodyBox);
        console.log(GameFieldUI_1.default.i.Centre.getRec(_this._bodyBox));
        return _this;
    }
    EnemyStt.prototype.resetBodyPosition = function () {
        this._bodyBox.x = this._x + 1;
        this._bodyBox.y = this._y + 1;
        // this._bodyBox.pos(this._x, this._y);
    };
    EnemyStt.prototype._resetAxisSpeed = function () {
        if (this._path.atEnd) {
            console.log("Can't reset speed");
            return;
        }
        var next = this._path.next();
        var _a = [next.x - this._x, next.y - this._y], x_dis = _a[0], y_dis = _a[1];
        var distance = Math.sqrt(Math.pow(x_dis, 2) + Math.pow(y_dis, 2));
        var time = distance / this._speed;
        this._xSpeed = x_dis / time;
        this._ySpeed = y_dis / time;
    };
    EnemyStt.prototype.setPosition = function (x, y) {
        this._x = x;
        this._y = y;
    };
    EnemyStt.prototype.nextTarget = function () {
        if (this._path.atEnd) {
            return;
        }
        this._path.step();
        this._resetAxisSpeed();
    };
    Object.defineProperty(EnemyStt.prototype, "isArrived", {
        get: function () {
            return (this._x === this._path.next().x) && (this._y === this._path.next().y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "xSpeed", {
        get: function () {
            return this._xSpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "ySpeed", {
        get: function () {
            return this._ySpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "target", {
        get: function () {
            return this._path.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "bodyBox", {
        get: function () {
            return this._bodyBox;
        },
        enumerable: true,
        configurable: true
    });
    return EnemyStt;
}(State_1.default));
/**
 * 敌人的逻辑类
 */
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    /**
     *
     * @param id 敌人id，用于获取敌人数据
     * @param pathID 路径id，用于获取路径数据
     */
    function Enemy(id, pathID) {
        var _this = _super.call(this) || this;
        //获取数据和路径
        var data = Database_1.default.i.getEnemy(id);
        var path = Database_1.default.i.getPath(pathID);
        _this._data = data;
        _this._path = new DataStructure_1.Struc.PointerList(path);
        //创建表现类和数据类
        _this._present = new EnemyPst(data["img"]);
        _this._state = new EnemyStt(data, pathID);
        return _this;
    }
    Enemy.prototype.compareColiResult = function (previous, current) {
        var inList = [];
        var outList = [];
        previous.forEach(function (ele) {
            var toInsert = true;
            for (var n = 0; n < current.length; n += 1) {
                if (ele === current[n]) {
                    toInsert = false;
                    break;
                }
            }
            if (toInsert) {
                outList.push(ele);
            }
        });
        current.forEach(function (ele) {
            var toInset = true;
            for (var n = 0; n < previous.length; n += 1) {
                if (ele === previous[n]) {
                    toInset = false;
                    break;
                }
            }
            if (toInset) {
                inList.push(ele);
            }
        });
        return { in: inList, out: outList };
    };
    Enemy.prototype.frameWork = function () {
        if (this._state.stop) {
            return;
        }
        //进行移动
        if (this._state.isArrived) {
            this._state.nextTarget();
        }
        var _a = this._state, x = _a.x, y = _a.y, xSpeed = _a.xSpeed, ySpeed = _a.ySpeed, target = _a.target;
        if (target === undefined) {
            this._state.stop = true;
            return;
        }
        var newx = myMath_1.default.moveTo(x, xSpeed, target.x);
        var newy = myMath_1.default.moveTo(y, ySpeed, target.y);
        this._state.setPosition(newx, newy);
        this._state.resetBodyPosition();
        //刷新位置
        this._present.perform(this._state);
        //碰撞检测
        var result = GameFieldUI_1.default.i.Centre.getRec(this._state.bodyBox);
        var events = this.compareColiResult(this._state.oldCollision, result);
        this._state.oldCollision = result;
        //还没写完，还没发送事件
        // Global.UISet_sub.graphics.clear();
        // events.in.forEach((ele)=>{
        //     // console.log(ele.unitY + "|" + ele.unitX);
        //     MyMath.drawRec(Global.UISet_sub, ele, "#ff0000");
        // });
        // events.out.forEach((ele)=>{
        //     MyMath.drawRec(Global.UISet_sub, ele, "#0000ff");
        // });
        // alert();
    };
    return Enemy;
}(People_1.default));
exports.default = Enemy;
},{"../../../Toybox/DataStructure":13,"../../../Toybox/Database":14,"../../../Toybox/myMath":17,"../GameFieldUI":6,"./People":9,"./Present":10,"./State":11}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People = /** @class */ (function () {
    function People() {
    }
    return People;
}());
exports.default = People;
var Buff = /** @class */ (function () {
    function Buff() {
    }
    return Buff;
}());
exports.Buff = Buff;
var DamageType = /** @class */ (function () {
    function DamageType() {
        this.PHYSICAL = "PHYSICAL";
        this.MAGICAL = "MAGICAL";
        this.CRITICAL = "CRITICAL";
    }
    return DamageType;
}());
/**
 * Damage是一个储存伤害信息的类
 */
var Damage = /** @class */ (function () {
    function Damage(value, creator, type) {
        this._value = value;
        this._creator = creator;
        this._type = type;
    }
    Object.defineProperty(Damage.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Damage.prototype, "creator", {
        get: function () {
            return this._creator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Damage.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    return Damage;
}());
exports.Damage = Damage;
/**
 * Weapon是一个储存攻击能力信息的类
 */
var Weapon = /** @class */ (function () {
    function Weapon() {
        this._boxes = [];
        this._originX = 0;
        this._originY = 0;
    }
    return Weapon;
}());
exports.Weapon = Weapon;
},{}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameFieldUI_1 = require("../GameFieldUI");
/**
 * 所有表现类的基类
 */
var Present = /** @class */ (function () {
    function Present(url) {
        this._sprite = GameFieldUI_1.default.i.Centre.CreateEnemy(url);
    }
    Object.defineProperty(Present.prototype, "sprite", {
        get: function () {
            return this._sprite;
        },
        enumerable: true,
        configurable: true
    });
    return Present;
}());
exports.default = Present;
},{"../GameFieldUI":6}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State = /** @class */ (function () {
    function State(data) {
    }
    return State;
}());
exports.default = State;
},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var EventCentre_1 = require("../Toybox/EventCentre");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        //加载游戏设置，敌人数据库，干员数据库
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
        EventCentre_1.default.i.event("Init", "Regular");
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../Toybox/EventCentre":15,"../ui/layaMaxUI":18}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var myMath_1 = require("./myMath");
var Box = /** @class */ (function (_super) {
    __extends(Box, _super);
    function Box() {
        return _super.call(this, 0, 0, 0, 0) || this;
    }
    /**
     * 就是……来一组（100个）随机的碰撞箱
     * @param xRange
     * @param yRange
     * @param widRange
     * @param higRange
     */
    Box.randomBoxes = function (xRange, yRange, widRange, higRange) {
        if (xRange === void 0) { xRange = 1200; }
        if (yRange === void 0) { yRange = 800; }
        if (widRange === void 0) { widRange = 300; }
        if (higRange === void 0) { higRange = 300; }
        var rad = myMath_1.default.randomInt;
        var result = [];
        for (var i = 0; i < 50; i += 1) {
            result.push(new Box());
            result[i].pos(rad(xRange), rad(yRange)).size(rad(widRange), rad(higRange));
        }
        return result;
    };
    Box.prototype.pos = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Box.prototype.size = function (width, height) {
        this.width = width;
        this.height = height;
        return this;
    };
    Box.prototype.intersects_X = function (rec) {
        if (this.x < rec.x) {
            return rec.intersects_X(this);
        }
        return (this.x >= rec.x && this.x <= rec.right) ||
            (this.right >= rec.x && this.right <= rec.right);
    };
    Box.prototype.intersects_Y = function (rec) {
        if (this.y < rec.y) {
            return rec.intersects_Y(this);
        }
        return (this.y >= rec.y && this.y <= rec.bottom) ||
            (this.bottom >= rec.y && this.bottom <= rec.bottom);
    };
    return Box;
}(Laya.Rectangle));
exports.Box = Box;
var MapNode = /** @class */ (function () {
    function MapNode(key, value) {
        this.key = key;
        this.value = value;
    }
    return MapNode;
}());
var Node = /** @class */ (function () {
    function Node(item, next) {
        this.item = item;
        this.next = next;
    }
    return Node;
}());
var Struc;
(function (Struc) {
    var LinkList = /** @class */ (function () {
        function LinkList() {
            this._head = new Node(null, null);
            this._tail = new Node(null, null);
        }
        Object.defineProperty(LinkList.prototype, "length", {
            //基础属性
            get: function () {
                var result = 0;
                var current = this._head;
                while (current.next !== null) {
                    result += 1;
                    current = current.next;
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkList.prototype, "isEmpty", {
            get: function () {
                return this._head.next === null;
            },
            enumerable: true,
            configurable: true
        });
        //增删改查
        //增
        LinkList.prototype.push = function (item) {
            var last = new Node(item, null);
            if (this.isEmpty) {
                this._head.next = last;
                this._tail.next = last;
            }
            else {
                this._tail.next.next = last;
                this._tail.next = last;
            }
        };
        LinkList.prototype.unshift = function (item) {
            var first = new Node(item, null);
            if (this.isEmpty) {
                this._tail.next = first;
                this._head.next = first;
            }
            else {
                first.next = this._head.next.next;
                this._head.next = first;
            }
        };
        LinkList.prototype.insert = function (index, item) {
            if (index < 0 || index > this.length) { //这句不一样
                return false;
            }
            if (index === this.length) {
                this.push(item);
                return true;
            }
            var current = this._head; //这句和其他遍历是不一样的，因为要选取到选定位置的前面一格
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.next = new Node(item, current.next);
            return true;
        };
        //删
        LinkList.prototype.remove = function (index) {
            if (index < 0 || index >= this.length) {
                return null;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            var item = current.item;
            current = null;
            return current.item;
        };
        LinkList.prototype.shift = function () {
            if (this.isEmpty) {
                return null;
            }
            var item = this._head.next.item;
            this._head.next = this._head.next.next;
            if (this.isEmpty) {
                this._tail.next = null;
            }
            return item;
        };
        //改
        LinkList.prototype.write = function (index, item) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.item = item;
        };
        //查
        LinkList.prototype.read = function (index) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            return current.item;
        };
        LinkList.prototype.search = function (item) {
            var result = [];
            this.foreach(function (ele, index) {
                if (ele === item) {
                    result.push(index);
                }
            });
            return result;
        };
        /**
         * 判断链表中是否存在某一元素
         * @param item
         */
        LinkList.prototype.has = function (item) {
            var current = this._head.next;
            while (current != null) {
                if (current.item == item) {
                    return true;
                }
                current = current.next;
            }
            return false;
        };
        //高阶函数
        LinkList.prototype.foreach = function (f) {
            var current = this._head.next;
            var num = 0;
            while (current !== null) {
                f(current.item, num, this);
                current = current.next;
                num += 1;
            }
        };
        /**
         * 请暂时不要使用这个函数，因为我也不知道它会不会爆炸
         * 除非你读过这个函数的源代码
         * @param f 判断元素优先级的回调函数
         * @param increase 是否升序，默认升序
         * @returns 返回一个排序的链表
         */
        LinkList.prototype.sortby = function (f, increase) {
            if (increase === void 0) { increase = true; }
            var priority = new LinkList();
            var sorted = new LinkList();
            priority.push(-0);
            sorted.push(null);
            var compare = increase ? function (a, b) { return a < b; } : function (a, b) { return a > b; };
            this.foreach(function (ele) {
                var currentPri = f(ele);
                var node = sorted._head.next;
                var priNode = priority._head.next;
                var foundPlace = false;
                while (node.next !== null) {
                    // if (currentPri < priNode.next.item) {
                    if (compare(currentPri, priNode.next.item)) {
                        node.next = new Node(ele, node.next);
                        priNode.next = new Node(currentPri, priNode.next);
                        foundPlace = true;
                        break;
                    }
                    node = node.next;
                    priNode = priNode.next;
                }
                if (!foundPlace) {
                    sorted.push(ele);
                    priority.push(currentPri);
                }
            });
            sorted.shift();
            return sorted;
        };
        return LinkList;
    }());
    Struc.LinkList = LinkList;
    var Map = /** @class */ (function () {
        function Map() {
            this._list = [];
        }
        Map.prototype.get = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return ele.value;
                }
            }
            return null;
        };
        Map.prototype.getKeyByVal = function (val) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.value === val) {
                    return ele.key;
                }
            }
            return null;
        };
        Map.prototype.keyExist = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return true;
                }
            }
            return false;
        };
        Map.prototype.set = function (key, value) {
            for (var n = 0; n < this._list.length; n += 1) {
                if (this._list[n].key === key) {
                    this._list[n].value = value;
                    return false;
                }
            }
            this._list.push(new MapNode(key, value));
            return true;
        };
        Map.prototype.batchSet = function (keys, values) {
            if (keys.length !== values.length) {
                return false;
            }
            for (var n = 0; n < keys.length; n += 1) {
                this.set(keys[n], values[n]);
            }
            return true;
        };
        Map.prototype.remove = function (key) {
            var count = 0;
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    this._list.splice(count, 1);
                    return true;
                }
                count += 1;
            }
            return false;
        };
        Object.defineProperty(Map.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Map.prototype.foreach = function (f) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                f(ele.key, ele.value);
            }
            return;
        };
        Map.prototype.filter = function (f) {
            var result = new Map();
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (f(ele.key, ele.value)) {
                    result.set(ele.key, ele.value);
                }
            }
            return result;
        };
        return Map;
    }());
    Struc.Map = Map;
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this._list = [];
            this._pointer = 0;
            source.forEach(function (ele) {
                _this._list.push(ele);
            });
        }
        Object.defineProperty(PointerList.prototype, "exceeding", {
            get: function () {
                return this._pointer >= this._list.length || this._pointer < 0;
            },
            enumerable: true,
            configurable: true
        });
        /*
        以下注释中，把数组看作横向排列的一系列元素
        index = 0的元素在最左侧
        */
        PointerList.prototype.read = function () {
            return this._list[this._pointer];
        };
        PointerList.prototype.step = function () {
            this._pointer += 1;
            return this.read();
        };
        PointerList.prototype.to = function (place) {
            this._pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this._list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this._list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            //读取位于当前pointer所指的元素右边若干格的元素
            //shift默认为1，即当前pointer右边相邻的元素
            //shift为负数时获取左侧的元素
            return this._list[this._pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "last", {
            get: function () {
                return this._list[this._list.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "first", {
            get: function () {
                return this._list[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "pointer", {
            get: function () {
                return this._pointer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "atEnd", {
            get: function () {
                return this._pointer === this._list.length - 1;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{"./myMath":17}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gameSet_URL = "./Database/GameSet.json", enemyDatabase_URL = "./Database/EnemyDatabase.json", operatorDatabase_URL = "./Database/OperatorDatabase.json";
var Database = /** @class */ (function () {
    function Database() {
        Laya.loader.load([enemyDatabase_URL, operatorDatabase_URL, gameSet_URL], Laya.Handler.create(this, this.onLoaded));
    }
    //直接public static inst:Database = new Database(),是否可以在类装载时就创建所需的单例?
    Database.init = function () {
        this.i = new Database();
        this.init = function () { };
    };
    Database.prototype.onLoaded = function () {
        this._enemyData = Laya.loader.getRes(enemyDatabase_URL);
        this._operatorData = Laya.loader.getRes(operatorDatabase_URL);
        this._gameSet = Laya.loader.getRes(gameSet_URL);
        this._unitSize = this._gameSet["ground"].size;
        this._subUnitSize = Math.floor(this._unitSize * 4 / 5);
        console.log(this);
    };
    Database.prototype.getPath = function (pathName) {
        return this._gameSet["paths"][pathName];
    };
    Database.prototype.getEnemy = function (enemyName) {
        return this._enemyData[enemyName];
    };
    Database.prototype.getOprt = function (operatorName) {
        return this._operatorData[operatorName];
    };
    Database.prototype.getGround = function () {
        return this._gameSet["ground"];
    };
    Database.prototype.getTimetable = function () {
        return this._gameSet["timetable"];
    };
    Object.defineProperty(Database.prototype, "UnitSize", {
        get: function () {
            return this._unitSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Database.prototype, "subUnitSize", {
        get: function () {
            return this._subUnitSize;
        },
        enumerable: true,
        configurable: true
    });
    return Database;
}());
exports.default = Database;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataStructure_1 = require("./DataStructure");
var FieldName = /** @class */ (function () {
    function FieldName() {
        this.GLOBAL = "GLOBAL";
        this.PEOPLE = "PEOPLE";
        this.CREATE_ENEMY_SPRITE = "CREATE_ENEMY_SPRITE";
        this.COLLISION = "COLLISION";
    }
    return FieldName;
}());
var TypeName = /** @class */ (function () {
    function TypeName() {
    }
    Object.defineProperty(TypeName.prototype, "Any", {
        get: function () {
            return "Any";
        },
        enumerable: true,
        configurable: true
    });
    return TypeName;
}());
var EventCentre = /** @class */ (function () {
    function EventCentre() {
        this._eventFields = new DataStructure_1.Struc.Map();
    }
    EventCentre.init = function () {
        EventCentre.i = new EventCentre();
        this.init = function () { };
    };
    ;
    EventCentre.prototype.on = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).on(type, caller, method, args);
    };
    EventCentre.prototype.event = function (field, type, args) {
        if (!this._eventFields.keyExist(field)) {
            return;
        }
        this._eventFields.get(field).event(type, args);
    };
    EventCentre.prototype.once = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).once(type, caller, method, args);
    };
    EventCentre.prototype.off = function (field, type, caller, func) {
        this._eventFields.get(field).off(type, caller, func);
    };
    /**
     * 区分不同的事件区域
     * 一个事件区域的事件，不能被另一个事件区域的监听器得知
     */
    EventCentre.FieldName = new FieldName();
    EventCentre.TypeName = new TypeName();
    return EventCentre;
}());
exports.default = EventCentre;
},{"./DataStructure":13}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global = /** @class */ (function () {
    function Global() {
    }
    Global.ListOfOprt = [
        "bird",
        "sb"
    ];
    return Global;
}());
exports.default = Global;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 虽然列向量和行向量都就是个定长数组
 * 但我这里还是当列向量吧
 */
var ColoumVector = /** @class */ (function () {
    function ColoumVector(height) {
        this._data = [];
        this.height = height;
        while (height > 0) {
            this._data.push(0);
            height -= 1;
        }
    }
    ColoumVector.fromArray = function (arr) {
        var result = new ColoumVector(arr.length);
        arr.forEach(function (ele, index) {
            result.write(index, ele);
        });
        return result;
    };
    //加减乘除没有减除
    ColoumVector.prototype.plus = function (w) {
        if (w.height !== this.height) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        var result = this.clone;
        w._data.forEach(function (ele, index) {
            result._data[index] += ele;
        });
        return result;
    };
    ColoumVector.prototype.multi = function (c) {
        var result = this.clone;
        this._data.forEach(function (ele, index) {
            result._data[index] = c * ele;
        });
        return result;
    };
    //增删改查没有增删
    ColoumVector.prototype.write = function (index, value) {
        this._data[index] = value;
    };
    ColoumVector.prototype.read = function (index) {
        return this._data[index];
    };
    ColoumVector.prototype.cover = function (source) {
        var _this = this;
        if (source.height !== this.height) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        source._data.forEach(function (ele, index) {
            _this._data[index] = ele;
        });
    };
    //其他函数
    ColoumVector.prototype.print = function () {
        console.log(this._data.join("\n"));
        return this;
    };
    Object.defineProperty(ColoumVector.prototype, "clone", {
        get: function () {
            var result = new ColoumVector(this.height);
            this._data.forEach(function (ele, index) {
                result._data[index] = ele;
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return ColoumVector;
}());
exports.ColoumVector = ColoumVector;
/**
 * 虽然一排列向量和一列行向量都可以当矩阵
 * 但这里是一排列向量
 */
var Matrix = /** @class */ (function () {
    function Matrix(height, width) {
        this.height = height;
        this.width = width;
        this._data = [];
        for (var n = 0; n < width; n += 1) { //零向量满上
            this._data.push(new ColoumVector(height));
        }
    }
    //增删改查没有增删
    Matrix.prototype.writeColoum = function (index, coloum) {
        this._data[index].cover(coloum);
    };
    Matrix.prototype.write = function (row, col, value) {
        if (row >= this.height || col >= this.width || row < 0 || col < 0) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        this._data[col].write(row, value);
    };
    Matrix.prototype.readColoum = function (index) {
        return this._data[index];
    };
    Matrix.prototype.read = function (row, col) {
        return this._data[col].read(row);
    };
    //加减乘除没有减除
    Matrix.prototype.transColVector = function (v) {
        if (v.height !== this.width) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        var result = new ColoumVector(this.height);
        for (var col = 0; col < this.width; col += 1) {
            result = result.plus(this._data[col].multi(v.read(col)));
        }
        return result;
    };
    //其他函数
    Matrix.prototype.str = function () {
        var result = "";
        for (var row = 0; row < this.height; row += 1) {
            for (var col = 0; col < this.width; col += 1) {
                result += this._data[col].read(row) + "\t";
            }
            result += "\n";
        }
        return result;
    };
    Matrix.prototype.print = function () {
        console.log(this.str());
    };
    return Matrix;
}());
exports.Matrix = Matrix;
var MyMath = /** @class */ (function () {
    function MyMath() {
    }
    //Laya模块
    /**
     * 判断两个矩形对象是否重叠
     * @param rec0 一个矩形
     * @param rec1 另一个矩形
     */
    MyMath.overlap_Rec = function (rec0, rec1) {
        return this.overlap_2d(rec0.x, rec1.x, rec0.width, rec1.width) &&
            this.overlap_2d(rec0.y, rec1.y, rec0.height, rec1.height);
    };
    /**
     * 在指定绘图节点中绘制矩形
     * @param spr 绘图节点
     * @param rec 矩形
     * @param color 颜色
     */
    MyMath.drawRec = function (spr, rec, color) {
        if (color === void 0) { color = "#ffffff"; }
        spr.graphics.drawRect(rec.x, rec.y, rec.width, rec.height, color, "#888888", 2);
    };
    //Laya模块
    /**
     * 判断在数轴上两条线是否重叠
     * @param point0 线段0的左侧端点
     * @param point1 线段1的左侧端点
     * @param length0 线段0的长度
     * @param length1 线段1的长度
     */
    MyMath.overlap_2d = function (point0, point1, length0, length1) {
        return MyMath.include_2d(point0, length0, point1) ||
            MyMath.include_2d(point0, length0, point1 + length1);
    };
    /**
     * 判断在数轴上一个点是否处于一条线段上
     * @param locate 线段左侧端点位置
     * @param length 线段长度
     * @param dot 点位
     */
    MyMath.include_2d = function (locate, length, dot) {
        return dot >= locate && dot <= locate + length;
    };
    /**
     * @param upLimit 上界
     * @param loLimit 下界
     * @returns 上界与下界之间的随机整数
     */
    MyMath.randomInt = function (upLimit, loLimit) {
        if (loLimit === void 0) { loLimit = 0; }
        return Math.round(Math.random() * (upLimit - loLimit) + loLimit);
    };
    /**
     *
     * @param front 原数字
     * @param shift 增加量
     * @param end 增加上限（若增加量为负，则为下限）
     *
     */
    MyMath.moveTo = function (front, shift, end) {
        var result = front + shift;
        if (shift > 0 && result > end) {
            result = end;
        }
        else if (shift < 0 && result < end) {
            result = end;
        }
        return result;
    };
    /**
     * 冒泡排序
     * 注意这个算法会直接修改原数组
     * @param source 原数组
     * @param value 优先值取值函数
     * @param increase 是否升序（默认升序）
     */
    MyMath.bubbleSort = function (source, value, increase) {
        if (increase === void 0) { increase = true; }
        // let time = 0;
        var complete = true;
        for (var n = source.length - 1; n > 0; n -= 1) {
            complete = true;
            for (var m = 0; m < n; m += 1) {
                var cur = value(source[m]);
                var next = value(source[m + 1]);
                if (increase ? (cur > next) : (cur < next)) {
                    var store = source[m];
                    source[m] = source[m + 1];
                    source[m + 1] = store;
                    complete = false;
                }
                // time += 1;
            }
            if (complete) {
                break;
            }
        }
    };
    return MyMath;
}());
exports.default = MyMath;
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameSceneUI = /** @class */ (function (_super) {
        __extends(GameSceneUI, _super);
        function GameSceneUI() {
            return _super.call(this) || this;
        }
        GameSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameScene");
        };
        return GameSceneUI;
    }(Scene));
    ui.GameSceneUI = GameSceneUI;
    REG("ui.GameSceneUI", GameSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xheWEvTGF5YUFpcklERS9yZXNvdXJjZXMvYXBwL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvR2FtZUNvbmZpZy50cyIsInNyYy9NYWluLnRzIiwic3JjL1NjZW5lTWFuYWdlci50cyIsInNyYy9TY2VuZVNjcmlwdC9HYW1lLnRzIiwic3JjL1NjZW5lU2NyaXB0L0dhbWVPYmovRW5lbXlDZW50cmUudHMiLCJzcmMvU2NlbmVTY3JpcHQvR2FtZU9iai9HYW1lRmllbGRVSS50cyIsInNyYy9TY2VuZVNjcmlwdC9HYW1lT2JqL09wcnRDZW50cmUudHMiLCJzcmMvU2NlbmVTY3JpcHQvR2FtZU9iai9QZW9wbGVfc3R1ZmYvRW5lbXkudHMiLCJzcmMvU2NlbmVTY3JpcHQvR2FtZU9iai9QZW9wbGVfc3R1ZmYvUGVvcGxlLnRzIiwic3JjL1NjZW5lU2NyaXB0L0dhbWVPYmovUGVvcGxlX3N0dWZmL1ByZXNlbnQudHMiLCJzcmMvU2NlbmVTY3JpcHQvR2FtZU9iai9QZW9wbGVfc3R1ZmYvU3RhdGUudHMiLCJzcmMvU2NlbmVTY3JpcHQvTG9hZGluZy50cyIsInNyYy9Ub3lib3gvRGF0YVN0cnVjdHVyZS50cyIsInNyYy9Ub3lib3gvRGF0YWJhc2UudHMiLCJzcmMvVG95Ym94L0V2ZW50Q2VudHJlLnRzIiwic3JjL1RveWJveC9HbG9iYWwudHMiLCJzcmMvVG95Ym94L215TWF0aC50cyIsInNyYy91aS9sYXlhTWF4VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDVkEsZ0dBQWdHO0FBQ2hHLDJDQUFxQztBQUNyQyxpREFBMkM7QUFDM0M7O0VBRUU7QUFDRjtJQWFJO0lBQWMsQ0FBQztJQUNSLGVBQUksR0FBWDtRQUNJLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1FB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TTFCLENBQUE7SUFDRCxHQUFHLENBQUMsbUJBQW1CLEVBQUMsY0FBYyxDQUFDLENBQUM7QUFDNUMsQ0FBQyxFQW5CYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUFtQmYiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBHYW1lIGZyb20gXCIuL1NjZW5lU2NyaXB0L0dhbWVcIlxuaW1wb3J0IExvYWRpbmcgZnJvbSBcIi4vU2NlbmVTY3JpcHQvTG9hZGluZ1wiXHJcbi8qXHJcbiog5ri45oiP5Yid5aeL5YyW6YWN572uO1xyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lQ29uZmlne1xyXG4gICAgc3RhdGljIHdpZHRoOm51bWJlcj0xODAwO1xyXG4gICAgc3RhdGljIGhlaWdodDpudW1iZXI9OTAwO1xyXG4gICAgc3RhdGljIHNjYWxlTW9kZTpzdHJpbmc9XCJub3NjYWxlXCI7XHJcbiAgICBzdGF0aWMgc2NyZWVuTW9kZTpzdHJpbmc9XCJub25lXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25WOnN0cmluZz1cInRvcFwiO1xyXG4gICAgc3RhdGljIGFsaWduSDpzdHJpbmc9XCJsZWZ0XCI7XHJcbiAgICBzdGF0aWMgc3RhcnRTY2VuZTphbnk9XCJMb2FkaW5nU2NlbmUuc2NlbmVcIjtcclxuICAgIHN0YXRpYyBzY2VuZVJvb3Q6c3RyaW5nPVwiXCI7XHJcbiAgICBzdGF0aWMgZGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBzdGF0OmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgcGh5c2ljc0RlYnVnOmJvb2xlYW49ZmFsc2U7XHJcbiAgICBzdGF0aWMgZXhwb3J0U2NlbmVUb0pzb246Ym9vbGVhbj10cnVlO1xyXG4gICAgY29uc3RydWN0b3IoKXt9XHJcbiAgICBzdGF0aWMgaW5pdCgpe1xyXG4gICAgICAgIHZhciByZWc6IEZ1bmN0aW9uID0gTGF5YS5DbGFzc1V0aWxzLnJlZ0NsYXNzO1xyXG4gICAgICAgIHJlZyhcIlNjZW5lU2NyaXB0L0dhbWUudHNcIixHYW1lKTtcbiAgICAgICAgcmVnKFwiU2NlbmVTY3JpcHQvTG9hZGluZy50c1wiLExvYWRpbmcpO1xyXG4gICAgfVxyXG59XHJcbkdhbWVDb25maWcuaW5pdCgpOyIsImltcG9ydCBHYW1lQ29uZmlnIGZyb20gXCIuL0dhbWVDb25maWdcIjtcclxuaW1wb3J0IFNjZW5lTWFuYWdlciBmcm9tIFwiLi9TY2VuZU1hbmFnZXJcIjtcclxuXHJcbmNsYXNzIE1haW4ge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Ly/moLnmja5JREXorr7nva7liJ3lp4vljJblvJXmk45cdFx0XHJcblx0XHRpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XHJcblx0XHRlbHNlIExheWEuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCwgTGF5YVtcIldlYkdMXCJdKTtcclxuXHRcdExheWFbXCJQaHlzaWNzXCJdICYmIExheWFbXCJQaHlzaWNzXCJdLmVuYWJsZSgpO1xyXG5cdFx0TGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhLnN0YWdlLnNjYWxlTW9kZSA9IEdhbWVDb25maWcuc2NhbGVNb2RlO1xyXG5cdFx0TGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gR2FtZUNvbmZpZy5zY3JlZW5Nb2RlO1xyXG5cdFx0Ly/lhbzlrrnlvq7kv6HkuI3mlK/mjIHliqDovb1zY2VuZeWQjue8gOWcuuaZr1xyXG5cdFx0TGF5YS5VUkwuZXhwb3J0U2NlbmVUb0pzb24gPSBHYW1lQ29uZmlnLmV4cG9ydFNjZW5lVG9Kc29uO1xyXG5cclxuXHRcdC8v5omT5byA6LCD6K+V6Z2i5p2/77yI6YCa6L+HSURF6K6+572u6LCD6K+V5qih5byP77yM5oiW6ICFdXJs5Zyw5Z2A5aKe5YqgZGVidWc9dHJ1ZeWPguaVsO+8jOWdh+WPr+aJk+W8gOiwg+ivlemdouadv++8iVxyXG5cdFx0aWYgKEdhbWVDb25maWcuZGVidWcgfHwgTGF5YS5VdGlscy5nZXRRdWVyeVN0cmluZyhcImRlYnVnXCIpID09IFwidHJ1ZVwiKSBMYXlhLmVuYWJsZURlYnVnUGFuZWwoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXSkgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0uZW5hYmxlKCk7XHJcblx0XHRpZiAoR2FtZUNvbmZpZy5zdGF0KSBMYXlhLlN0YXQuc2hvdygpO1xyXG5cdFx0TGF5YS5hbGVydEdsb2JhbEVycm9yID0gdHJ1ZTtcclxuXHJcblx0XHQvL+a/gOa0u+i1hOa6kOeJiOacrOaOp+WItu+8jHZlcnNpb24uanNvbueUsUlEReWPkeW4g+WKn+iDveiHquWKqOeUn+aIkO+8jOWmguaenOayoeacieS5n+S4jeW9seWTjeWQjue7rea1geeoi1xyXG5cdFx0TGF5YS5SZXNvdXJjZVZlcnNpb24uZW5hYmxlKFwidmVyc2lvbi5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vblZlcnNpb25Mb2FkZWQpLCBMYXlhLlJlc291cmNlVmVyc2lvbi5GSUxFTkFNRV9WRVJTSU9OKTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XHJcblx0XHRMYXlhLkF0bGFzSW5mb01hbmFnZXIuZW5hYmxlKFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkNvbmZpZ0xvYWRlZCkpO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+WKoOi9vUlEReaMh+WumueahOWcuuaZr1xyXG5cdFx0bmV3IFNjZW5lTWFuYWdlcigpO1xyXG5cdFx0Ly8gR2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCJpbXBvcnQgRXZlbnRDZW50cmUgZnJvbSBcIi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi9Ub3lib3gvRGF0YWJhc2VcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lTWFuYWdlcntcclxuICAgIHByaXZhdGUgbG9hZGluZ1NjZW5lOnN0cmluZyA9IFwiTG9hZGluZ1NjZW5lLnNjZW5lXCI7XHJcbiAgICBwcml2YXRlIGdhbWVTY2VuZTpzdHJpbmcgPSBcIkdhbWVTY2VuZS5zY2VuZVwiO1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBFdmVudENlbnRyZS5pbml0KCk7XHJcbiAgICAgICAgRGF0YWJhc2UuaW5pdCgpO1xyXG4gICAgICAgIC8v5Yid5aeL5YyW5LqL5Lu25Lit5b+D5ZKM5pWw5o2u5bqTXHJcbiAgICAgICAgXHJcbiAgICAgICAgTGF5YS5TY2VuZS5vcGVuKHRoaXMubG9hZGluZ1NjZW5lKTsvL+aJk+W8gOWKoOi9veWcuuaZr1xyXG5cclxuICAgICAgICBFdmVudENlbnRyZS5pLm9uY2UoXCJJbml0XCIsIFwiUmVndWxhclwiLCB0aGlzLCAoKT0+ey8v55uR5ZCs5Yqg6L295a6M5q+V5LqL5Lu2XHJcbiAgICAgICAgICAgIExheWEuU2NlbmUub3Blbih0aGlzLmdhbWVTY2VuZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQge3VpfSBmcm9tIFwiLi4vdWkvbGF5YU1heFVJXCI7XHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi4vVG95Ym94L0RhdGFiYXNlXCI7XHJcbmltcG9ydCBFdmVudENlbnRyZSBmcm9tIFwiLi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcbmltcG9ydCBHYW1lRmllbGRTY2VuZVVJIGZyb20gXCIuL0dhbWVPYmovR2FtZUZpZWxkVUlcIjtcclxuaW1wb3J0IEdhbWVGaWVsZFVJIGZyb20gXCIuL0dhbWVPYmovR2FtZUZpZWxkVUlcIjtcclxuaW1wb3J0IEVuZW15Q2VudHJlIGZyb20gXCIuL0dhbWVPYmovRW5lbXlDZW50cmVcIjtcclxuaW1wb3J0IHsgU3RydWMgfSBmcm9tIFwiLi4vVG95Ym94L0RhdGFTdHJ1Y3R1cmVcIjtcclxuaW1wb3J0IE15TWF0aCwgeyBDb2xvdW1WZWN0b3IsIE1hdHJpeCB9IGZyb20gXCIuLi9Ub3lib3gvbXlNYXRoXCI7XHJcbmltcG9ydCBNYXNzRWZmZWN0LCB7IENvbGlCb3gsIENvbGlQYXJlTGlzdCB9IGZyb20gXCIuLi9Ub3lib3gvTWFzc0VmZmVjdFwiO1xyXG5pbXBvcnQgRW5lbXkgZnJvbSBcIi4vR2FtZU9iai9QZW9wbGVfc3R1ZmYvRW5lbXlcIjtcclxuaW1wb3J0IEdsb2JhbCBmcm9tIFwiLi4vVG95Ym94L0dsb2JhbFwiO1xyXG5pbXBvcnQgT3BydENlbnRyZSBmcm9tIFwiLi9HYW1lT2JqL09wcnRDZW50cmVcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSBleHRlbmRzIHVpLkdhbWVTY2VuZVVJe1xyXG4gICAgcHVibGljIHN0YXRpYyBVSVNldDpMYXlhLlNwcml0ZTtcclxuICAgIHB1YmxpYyBzdGF0aWMgc3RhZ2U6TGF5YS5TdGFnZTtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIEdhbWUuVUlTZXQgPSB0aGlzLlVJU2V0O1xyXG4gICAgICAgIEdhbWUuc3RhZ2UgPSB0aGlzLnN0YWdlO1xyXG5cclxuICAgICAgICBsZXQgc3ByOkxheWEuU3ByaXRlID0gbmV3IExheWEuU3ByaXRlKCk7XHJcbiAgICAgICAgdGhpcy5VSVNldC5hZGRDaGlsZChzcHIpO1xyXG4gICAgICAgIEdsb2JhbC5VSVNldF9zdWIgPSBzcHI7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIEdhbWVGaWVsZFVJLmluaXQodGhpcy5zY2VuZSk7Ly91aeWIneWni+WMllxyXG4gICAgICAgIE9wcnRDZW50cmUuaW5pdCgpOy8v5bmy5ZGY566h55CG57G75Yid5aeL5YyWXHJcbiAgICAgICAgRW5lbXlDZW50cmUuaW5pdCgpOy8v5pWM5Lq6566h55CG57G75Yid5aeL5YyWXHJcbiAgICAgICAgLy8gTWFzc0VmZmVjdC5pbml0KHRoaXMpOy8v54mp55CG57G75Yid5aeL5YyWXHJcbiAgICAgICAgLy8gTWFzc0VmZmVjdC5pLnRlc3QoKTsvL+eJqeeQhuexu+i/m+ihjOa1i+ivlSDlj6/np7vpmaRcclxuICAgICAgICBcclxuICAgICAgICAvLyBFdmVudENlbnRyZS5pLm9uKEV2ZW50Q2VudHJlLkZpZWxkTmFtZS5Db2xsaXNpb24sXCJJTlwiLHRoaXMsKGVsZTpbQ29saUJveCxDb2xpQm94XSk9PntcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJJTiBkZXRlY3RlZFwiKTtcclxuICAgICAgICAvLyB9KVxyXG4gICAgICAgIC8vIEV2ZW50Q2VudHJlLmkub24oRXZlbnRDZW50cmUuRmllbGROYW1lLkNvbGxpc2lvbixcIk9VVFwiLHRoaXMsKGVsZTpbQ29saUJveCxDb2xpQm94XSk9PntcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJPVVQgZGV0ZWN0ZWRcIik7XHJcbiAgICAgICAgLy8gfSlcclxuXHJcbiAgICAgICAgTGF5YS50aW1lci5sb29wKDE3LHRoaXMsdGhpcy5mcmFtZVdvcmspOy8v5byA5aeL5bin5b6q546vXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdGltZTpudW1iZXIgPSAwO1xyXG4gICAgLy/ov5nkuKrlj5jph4/ku6PooajmuLjmiI/ku47lvIDlp4vliLDnjrDlnKjov5DooYzkuoblpJrlsJHluKdcclxuXHJcbiAgICBwdWJsaWMgZnJhbWVXb3JrKCk6dm9pZHtcclxuICAgICAgICBcclxuICAgICAgICBFbmVteUNlbnRyZS5pLmZyYW1lV29yayh0aGlzLl90aW1lKTtcclxuICAgICAgICBHYW1lRmllbGRVSS5pLnVwZGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX3RpbWUgKz0gMTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxufVxyXG5cclxuIiwiaW1wb3J0IEVuZW15IGZyb20gXCIuL1Blb3BsZV9zdHVmZi9FbmVteVwiO1xyXG5pbXBvcnQgeyBTdHJ1YyB9IGZyb20gXCIuLi8uLi9Ub3lib3gvRGF0YVN0cnVjdHVyZVwiO1xyXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSBcIi4uLy4uL1RveWJveC9EYXRhYmFzZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVuZW15Q2VudHJle1xyXG4gICAgcHVibGljIHN0YXRpYyBpOkVuZW15Q2VudHJlO1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KCk6dm9pZHtcclxuICAgICAgICB0aGlzLmkgPSBuZXcgRW5lbXlDZW50cmUoKTtcclxuICAgICAgICB0aGlzLmluaXQgPSAoKT0+e307XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5fZW5lbXlHcm91cCA9IFtdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vU3RhcnRcclxuICAgICAgICAvL+WIneWni+WMluaXtumXtOi9tFxyXG4gICAgICAgIGxldCB0aW1lRGF0YTphbnkgPSBEYXRhYmFzZS5pLmdldFRpbWV0YWJsZSgpO1xyXG4gICAgICAgIHRoaXMuX3RpbWV0YWJsZSA9IG5ldyBTdHJ1Yy5Qb2ludGVyTGlzdDxhbnk+KHRpbWVEYXRhKTtcclxuICAgICAgICAvL+WIneWni+WMluaXtumXtOi9tFxyXG4gICAgICAgIC8vRW5kXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZW5lbXlHcm91cDpFbmVteVtdO1xyXG4gICAgcHJpdmF0ZSBfdGltZXRhYmxlOlN0cnVjLlBvaW50ZXJMaXN0PGFueT47XHJcbiAgICBcclxuXHJcbiAgICBwdWJsaWMgZnJhbWVXb3JrKHRpbWU6bnVtYmVyKTp2b2lke1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAg6L+Z5Liq5Ye95pWw5pivRW5lbXlDZW50cmXnsbvmr4/luKfmiYDlgZrnmoTkuovmg4VcclxuICAgICAgICB0aW1l5piv5q2k5qyh5ri45oiP6Ieq5ri45oiP5byA5aeL6Iez6L+Z5Liq5Ye95pWw6L+Q6KGM5LmL5pe25bey57uP57uP6L+H55qE5bin5pWwXHJcbiAgICAgICAg5Zyo6aKE5pyf5Lit77yM6L+Z5Liq5pWw5YC85Lya5LuOMOW8gOWni++8jOavj+W4pysxXHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgLy8yMDE5LzExLzE4XHJcbiAgICAgICAgLy/kuIvpnaLov5nkuKrliKTmlq3mnaHku7bnmoQ9PeaUueaIkOS6hj49LOi/mOayoea1i+ivlei/h++8jOiusOW+l+a1i+ivlVxyXG4gICAgICAgIGlmICghdGhpcy5fdGltZXRhYmxlLmV4Y2VlZGluZyAmJiB0aW1lID49IHRoaXMuX3RpbWV0YWJsZS5yZWFkKClbXCJ0aW1lXCJdKSB7XHJcbiAgICAgICAgICAgIC8v56m65YC85qOA5p+lICYmIOW9k+WJjeaXtumXtOS4juaXtumXtOihqOS4iueahOaXtumXtOS4gOiHtFxyXG4gICAgICAgICAgICBsZXQgZGF0YTphbnkgPSB0aGlzLl90aW1ldGFibGUucmVhZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUVuZW15KGRhdGFbXCJ0eXBlXCJdLCBkYXRhW1wicGF0aFwiXSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWV0YWJsZS5zdGVwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX2VuZW15R3JvdXAuZm9yRWFjaChlbmVteT0+ey8v5q+P5LiqRW5lbXnmjKjkuKrlgZrkuotcclxuICAgICAgICAgICAgZW5lbXkuZnJhbWVXb3JrKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZUVuZW15KGVuZW15SUQ6c3RyaW5nLCBwYXRoSUQ6c3RyaW5nKTp2b2lke1xyXG4gICAgICAgIGxldCBlbmVteTpFbmVteSA9IG5ldyBFbmVteShlbmVteUlELCBwYXRoSUQpO1xyXG4gICAgICAgIHRoaXMuX2VuZW15R3JvdXAucHVzaChlbmVteSk7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IERhdGFiYXNlIGZyb20gXCIuLi8uLi9Ub3lib3gvRGF0YWJhc2VcIjtcclxuaW1wb3J0IEV2ZW50Q2VudHJlIGZyb20gXCIuLi8uLi9Ub3lib3gvRXZlbnRDZW50cmVcIjtcclxuaW1wb3J0IHsgU3RydWMsIEJveCB9IGZyb20gXCIuLi8uLi9Ub3lib3gvRGF0YVN0cnVjdHVyZVwiO1xyXG5pbXBvcnQgTXlNYXRoIGZyb20gXCIuLi8uLi9Ub3lib3gvbXlNYXRoXCI7XHJcbmltcG9ydCBQZW9wbGUgZnJvbSBcIi4vUGVvcGxlX3N0dWZmL1Blb3BsZVwiO1xyXG5pbXBvcnQgR2xvYmFsIGZyb20gXCIuLi8uLi9Ub3lib3gvR2xvYmFsXCI7XHJcbmltcG9ydCBHYW1lIGZyb20gXCIuLi9HYW1lXCI7XHJcbmltcG9ydCBPcHJ0Q2VudHJlIGZyb20gXCIuL09wcnRDZW50cmVcIjtcclxuXHJcblxyXG4vKipcclxuICog5bmy5ZGY5qCP55qE5LiA5Liq5Y2V5YWDXHJcbiAqL1xyXG5jbGFzcyBPcHJ0UHJvZmlsZXtcclxuICAgIHB1YmxpYyBzcHJpdGU6TGF5YS5TcHJpdGU7XHJcbiAgICBwdWJsaWMgaWQ6c3RyaW5nO1xyXG4gICAgcHVibGljIGltZzpzdHJpbmc7ICAgICAgICAgIC8v5Zu+54mH6Lev5b6EXHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6c3RyaW5nKXtcclxuICAgICAgICAvL+iOt+WPlui1hOaWmVxyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICBsZXQgZGF0YTphbnkgPSBEYXRhYmFzZS5pLmdldE9wcnQoaWQpO1xyXG4gICAgICAgIHRoaXMuaW1nID0gZGF0YVtcImltZ1wiXTtcclxuXHJcbiAgICAgICAgLy/liJvlu7pzcHJpdGVcclxuICAgICAgICB0aGlzLnNwcml0ZSA9IExheWEuU3ByaXRlLmZyb21JbWFnZShkYXRhW1wiaW1nXCJdKTtcclxuICAgICAgICAvL+ebkeWQrOeCueWHu+S6i+S7tlxyXG4gICAgICAgIHRoaXMuc3ByaXRlLm9uKExheWEuRXZlbnQuTU9VU0VfRE9XTiwgdGhpcywgdGhpcy5vbk1vdXNlRG93bik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Nb3VzZURvd24oKTp2b2lke1xyXG4gICAgICAgIGxldCBzcHI6TGF5YS5TcHJpdGUgPSBMYXlhLlNwcml0ZS5mcm9tSW1hZ2UodGhpcy5pbWcpOy8v5Yib5bu65bm26LCD5pW05ouW5Yqo5Zu+5qCHXHJcbiAgICAgICAgc3ByLnNpemUoRGF0YWJhc2UuaS5Vbml0U2l6ZSwgRGF0YWJhc2UuaS5Vbml0U2l6ZSk7XHJcbiAgICAgICAgR2FtZUZpZWxkVUkuaS5VSVNldC5hZGRDaGlsZChzcHIpO1xyXG4gICAgICAgIExheWEudGltZXIubG9vcCgyMCwgdGhpcywgdGhpcy5vbkxvb3AsIFtzcHIsIEdhbWVGaWVsZFVJLmkuQ2VudHJlLnJhbmdlXSk7Ly/mi5bliqjlm77moIflvIDlp4vot5/pmo/pvKDmoIdcclxuICAgICAgICB0aGlzLnNwcml0ZS5zdGFnZS5vbmNlKExheWEuRXZlbnQuTU9VU0VfVVAsIHRoaXMsIHRoaXMub25Nb3VzZVVwLCBbc3ByLCBHYW1lRmllbGRVSS5pLkNlbnRyZS5yYW5nZV0pOy8v55uR5ZCs6byg5qCH5oqs6LW35LqL5Lu2XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkxvb3Aoc3ByOkxheWEuU3ByaXRlLCByYW5nZTpCb3gpOnZvaWR7XHJcbiAgICAgICAgbGV0IHg6bnVtYmVyID0gR2FtZS5VSVNldC5tb3VzZVg7XHJcbiAgICAgICAgbGV0IHk6bnVtYmVyID0gR2FtZS5VSVNldC5tb3VzZVk7XHJcbiAgICAgICAgaWYgKCh4PjAgJiYgeDxyYW5nZS5yaWdodCkgJiYgKHk+MCYmeTxyYW5nZS5ib3R0b20pKSB7XHJcbiAgICAgICAgICAgIGxldCBzaXplOm51bWJlciA9IERhdGFiYXNlLmkuVW5pdFNpemU7XHJcbiAgICAgICAgICAgIHggPSB4LXglc2l6ZTtcclxuICAgICAgICAgICAgeSA9IHkteSVzaXplO1xyXG4gICAgICAgICAgICBzcHIucG9zKHgsIHkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNwci5wb3MoeCAtIHNwci53aWR0aC8yLCB5IC0gc3ByLmhlaWdodC8yKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uTW91c2VVcChzcHI6TGF5YS5TcHJpdGUsIHJhbmdlOkJveCk6dm9pZHtcclxuICAgICAgICBMYXlhLnRpbWVyLmNsZWFyKHRoaXMsIHRoaXMub25Mb29wKTsvL+WBnOatoui3n+maj+W+queOr1xyXG4gICAgICAgIHNwci5kZXN0cm95KCk7Ly/mtojpmaTmi5bliqjlm77moIdcclxuICAgICAgICBsZXQgeDpudW1iZXIgPSBHYW1lLlVJU2V0Lm1vdXNlWDtcclxuICAgICAgICBsZXQgeTpudW1iZXIgPSBHYW1lLlVJU2V0Lm1vdXNlWTtcclxuICAgICAgICBpZiAoKHg+MCAmJiB4PHJhbmdlLnJpZ2h0KSAmJiAoeT4wJiZ5PHJhbmdlLmJvdHRvbSkpIHsvL+m8oOagh+WkhOS6juWcsOWbvuiMg+WbtOWGhVxyXG4gICAgICAgICAgICBsZXQgc2l6ZTpudW1iZXIgPSBEYXRhYmFzZS5pLlVuaXRTaXplO1xyXG4gICAgICAgICAgICB4ID0gKHgteCVzaXplKS9zaXplOy8v6K6h566X5Y2V5L2N5L2N572uXHJcbiAgICAgICAgICAgIHkgPSAoeS15JXNpemUpL3NpemU7XHJcbiAgICAgICAgICAgIE9wcnRDZW50cmUuaS5jcmVhdGVPcHJ0KHksIHgsIHRoaXMuaWQpO1xyXG4gICAgICAgIH0gZWxzZSB7Ly/pvKDmoIflpITkuo7lnLDlm77ojIPlm7TlpJZcclxuICAgICAgICAgICAgLy/lhbblrp7msqHku4DkuYjopoHlgZrnmoRcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDkvqfovrnmoI9VSeexu1xyXG4gKiDkuZ/lsLHmmK/lubLlkZjmoI9cclxuICovXHJcbmNsYXNzIFNpZGVGaWVsZHtcclxuICAgIHByaXZhdGUgX29yaWdpbjpMYXlhLlNwcml0ZTsvL+atpOWMuuWdl+eahOWdkOagh+WOn+eCuVxyXG4gICAgcHJpdmF0ZSBfcGl4V2lkdGg6bnVtYmVyID0gMTAwOyAgICAgLy/lrr3luqZcclxuICAgIHByaXZhdGUgX3BpeEhlaWdodDpudW1iZXIgPSA1MDA7ICAgIC8v6auY5bqmXHJcbiAgICBwcml2YXRlIF9wcm9maWxlczpPcHJ0UHJvZmlsZVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NlbmU6TGF5YS5TY2VuZSwgcmlnaHRTaGlmdDpudW1iZXIpe1xyXG4gICAgICAgIC8v6I635Y+W5Y6f54K5XHJcbiAgICAgICAgdGhpcy5fb3JpZ2luID0gc2NlbmUuZ2V0Q2hpbGRCeU5hbWUoXCJTaWRlQmFyXCIpIGFzIExheWEuU3ByaXRlO1xyXG4gICAgICAgIC8v56e75Yqo5Y6f54K55YiwQ2VudHJlRmllbGTnmoTlj7PovrkzMHB45aSEXHJcbiAgICAgICAgdGhpcy5fb3JpZ2luLnBvcyhyaWdodFNoaWZ0LCB0aGlzLl9vcmlnaW4ueSk7XHJcbiAgICAgICAgLy/nu5jliLbmlrnmoYZcclxuICAgICAgICB0aGlzLl9vcmlnaW4uZ3JhcGhpY3MuZHJhd1JlY3QoMCwwLDEwMCw1MDAsXCIjZmExNTY2XCIpO1xyXG4gICAgICAgIC8v5qC55o2u5Y+v6YCJ5bmy5ZGY5YiX6KGo55Sf5oiQ5b6F6YCJ5bmy5ZGY5qCPXHJcbiAgICAgICAgbGV0IGxpc3Q6c3RyaW5nW10gPSBHbG9iYWwuTGlzdE9mT3BydDsvL0dsb2JhbC5MaXN0T2ZPcHJ05LuF5Zyo5byA5Y+R5pe26YeH55So77yM5ZCO57ut5bCG5Lya6YCa6L+H5Yi25a6a5qCH5YeG6KeE5a6a5bmy5ZGY5YiX6KGo55qE5p2l5rqQXHJcblxyXG4gICAgICAgIGxpc3QuZm9yRWFjaCgoZWxlLCBpbmRleCk9PntcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRPcHJ0ID0gbmV3IE9wcnRQcm9maWxlKGVsZSk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRPcHJ0LnNwcml0ZS5wb3MoMCw4MCppbmRleCkuc2l6ZSg4MCw4MCk7XHJcbiAgICAgICAgICAgIHRoaXMuX29yaWdpbi5hZGRDaGlsZChjdXJyZW50T3BydC5zcHJpdGUpO1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9maWxlc1tpbmRleF0gPSBjdXJyZW50T3BydDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog5Lit5aSu5Yy65Z+fVUnnsbtcclxuICovXHJcbmNsYXNzIENlbnRyZUZpZWxke1xyXG4gICAgcHJpdmF0ZSBfb3JpZ2luOkxheWEuU3ByaXRlOyAgICAgICAgLy/kuK3lpK7ljLrln5/nmoTljp/ngrlcclxuICAgIHByaXZhdGUgX2Jsb2NrczpMYXlhLlNwcml0ZVtdW107ICAgIC8v5ZCE5Liq5Zyw5Zu+6IqC54K5XHJcbiAgICAgLypcclxuICAgIGJsb2Nrc+aYr+a4uOaIj+eVjOmdouWMheWQq+eahOagvOWtkHNwcml0ZembhuWQiFxyXG4gICAg5q+P5Liqc3ByaXRl55qE54i257qnc3ByaXRl6YO95pivc2NlbmXkuIvnmoRVSVNldFxyXG4gICAg5Zyo5Y+W55SoYmxvY2vml7bvvIznrKzkuIDlsYLmlbDnu4TnmoRpbmRleOWAvOS4uuaoquWdkOagh++8jOesrOS6jOWxguaVsOe7hOeahGluZGV45YC85Li657q15Z2Q5qCHXHJcbiAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcmVjczpCb3hbXVtdOyAgICAgICAgICAgICAgLy/lkITkuKrlnLDlm77oioLngrnlr7nlupTnmoTmlrnmoLxcclxuICAgIHByaXZhdGUgX3NjZW5lOkxheWEuU2NlbmU7ICAgICAgICAgIC8v5Zy65pmvXHJcbiAgICBwcml2YXRlIF9zaXplOm51bWJlcjsgICAgICAgICAgICAgICAvL+agvOWtkOWkp+Wwj++8iOWDj+e0oO+8iSAgICAgICAgICAgICAgIFxyXG4gICAgcHJpdmF0ZSBfd2lkdGg6bnVtYmVyOyAgICAgICAgICAgICAgLy/mqKrlkJHmoLzlrZDmlbDph49cclxuICAgIHByaXZhdGUgX2hlaWdodDpudW1iZXI7ICAgICAgICAgICAgIC8v57q15ZCR5qC85a2Q5pWw6YePXHJcblxyXG4gICAgcHVibGljIHJhbmdlOkJveDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzY2VuZTpMYXlhLlNjZW5lKXtcclxuICAgICAgICAvL+iOt+WPluaVsOaNrlxyXG4gICAgICAgIGNvbnN0IGRhdGE6YW55ID0gRGF0YWJhc2UuaS5nZXRHcm91bmQoKTtcclxuICAgICAgICBjb25zdCBbd2lkdGgsIGhlaWdodCwgc2l6ZV0gPSBbZGF0YVtcIndpZHRoXCJdLCBkYXRhW1wiaGVpZ2h0XCJdLCBkYXRhW1wic2l6ZVwiXV07XHJcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XHJcbiAgICAgICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUgPSBzY2VuZTtcclxuICAgICAgICB0aGlzLl9vcmlnaW4gPSBzY2VuZS5nZXRDaGlsZEJ5TmFtZShcIlVJU2V0XCIpIGFzIExheWEuU3ByaXRlO1xyXG5cclxuICAgICAgICAvL+WIm+W7ukNlbnRyZUZpZWxk5Yy65Z+f5pWw5o2uXHJcbiAgICAgICAgdGhpcy5yYW5nZSA9IG5ldyBCb3goKTtcclxuICAgICAgICB0aGlzLnJhbmdlLnNpemUod2lkdGgqc2l6ZSxoZWlnaHQqc2l6ZSk7XHJcblxyXG4gICAgICAgIC8vU3RhcnRcclxuICAgICAgICAvL+WIm+W7uuWcsOWbvuaWueagvCDlkozlr7nlupTnmoRCb3hcclxuXHJcbiAgICAgICAgdGhpcy5fYmxvY2tzID0gW107XHJcbiAgICAgICAgdGhpcy5fcmVjcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5ICs9IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmxvY2tzW3ldID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX3JlY3NbeV0gPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYmxvY2s6TGF5YS5TcHJpdGUgPSBMYXlhLlNwcml0ZS5mcm9tSW1hZ2UoXCJCYXNpYy9SZWMucG5nXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luLmFkZENoaWxkKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgIGJsb2NrLnNpemUoc2l6ZSxzaXplKS5wb3MoeCpzaXplLHkqc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibG9ja3NbeV1beF0gPSBibG9jaztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY3NbeV1beF0gPSBuZXcgQm94KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNzW3ldW3hdLnBvcyh4KnNpemUseSpzaXplKS5zaXplKHNpemUsc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNzW3ldW3hdLnVuaXRYID0geDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY3NbeV1beF0udW5pdFkgPSB5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5Yib5bu65Zyw5Zu+5pa55qC8XHJcbiAgICAgICAgLy9FbmRcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ3JlYXRlRW5lbXkoaW1nVVJMOnN0cmluZyx4Om51bWJlciA9IDAseTpudW1iZXIgPSAwKTpMYXlhLlNwcml0ZXtcclxuICAgICAgICBsZXQgc3ByaXRlOkxheWEuU3ByaXRlID0gTGF5YS5TcHJpdGUuZnJvbUltYWdlKGltZ1VSTCk7Ly/liJvlu7pzcHJpdGVcclxuICAgICAgICB0aGlzLl9zY2VuZS5nZXRDaGlsZEJ5TmFtZShcIlVJU2V0XCIpLmFkZENoaWxkKHNwcml0ZSk7Ly/mj5LlhaXkuK3lv4PljLrln59cclxuICAgICAgICBzcHJpdGUuc2l6ZShEYXRhYmFzZS5pLlVuaXRTaXplLCBEYXRhYmFzZS5pLlVuaXRTaXplKTsvL+agueaNruaVsOaNruW6k+aPkOS+m+eahOW4uOmHj+iuvue9ruWkp+Wwj1xyXG4gICAgICAgIHNwcml0ZS5wb3MoeCx5KTsvL+ehruWumuS9jee9rlxyXG4gICAgICAgIHJldHVybiBzcHJpdGU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L6T5YWl5LiA5Liq5pa55qC877yM6L6T5Ye65LiO5YW25Lqk5Y+g55qE5Zyw5Zu+5pa55qC8XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSZWMoZnJvbTpCb3gpOkJveFtdIHtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgb3JpZ2luX3ggPSB0aGlzLnJvdW5kKGZyb20ueCx0aGlzLl9zaXplKTtcclxuICAgICAgICBsZXQgb3JpZ2luX3kgPSB0aGlzLnJvdW5kKGZyb20ueSx0aGlzLl9zaXplKTtcclxuICAgICAgICBsZXQgYm90dG9tID0gdGhpcy5yb3VuZChmcm9tLmJvdHRvbSx0aGlzLl9zaXplKTtcclxuICAgICAgICBsZXQgcmlnaHQgPSB0aGlzLnJvdW5kKGZyb20ucmlnaHQsdGhpcy5fc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9yaWdpbl94ID49IHRoaXMuX3dpZHRoIHx8IG9yaWdpbl95ID49IHRoaXMuX2hlaWdodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgb3JpZ2luX3ggPSBvcmlnaW5feDwwPzA6b3JpZ2luX3g7Ly9vcmlnaW5feCBpcyBhdCBsZWFzdCAwXHJcbiAgICAgICAgb3JpZ2luX3kgPSBvcmlnaW5feTwwPzA6b3JpZ2luX3k7Ly9vcmlnaW5feSBpcyBhdCBsZWFzdCAwXHJcbiAgICAgICAgYm90dG9tID0gYm90dG9tPj10aGlzLl9oZWlnaHQ/dGhpcy5faGVpZ2h0LTE6Ym90dG9tLy9ib3R0b20gaXMgYXQgbW9zdCB0aGlzLl9oZWlnaHRcclxuICAgICAgICByaWdodCA9IHJpZ2h0Pj10aGlzLl93aWR0aD90aGlzLl93aWR0aC0xOnJpZ2h0Ly9yaWdodCBpcyBhdCBtb3N0IHRoaXMuX3JpZ2h0XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQ6Qm94W10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBoZWkgPSBvcmlnaW5feTsgaGVpIDw9IGJvdHRvbTsgaGVpICs9IDEpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgd2lkID0gb3JpZ2luX3g7IHdpZCA8PSByaWdodDsgd2lkICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuX3JlY3NbaGVpXVt3aWRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaxgmMgPSBhIC8gYlxyXG4gICAgICog6L+U5ZueY+WcqOaVsOi9tOS4iuWQkTDnp7vliqjml7bnu4/ov4fnmoTnrKzkuIDkuKrmlbTmlbDlgLxcclxuICAgICAqIEBwYXJhbSBhIFxyXG4gICAgICogQHBhcmFtIGIgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByb3VuZChhOm51bWJlciwgYjpudW1iZXIpOm51bWJlcntcclxuICAgICAgICByZXR1cm4gKGEtYSViKS9iO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5L2N572u5Yik5a6a562W55WlXHJcbiAgICAgKiAxLuWcqOavj+S4gOS4quW4p+W+queOr+S4re+8jOavj+S4gOS4quenu+WKqOS6hueahFBlb3BsZemAmui/h0NlbnRyZUZpZWxkLmkuZ2V0UmVj6I635b6X6Ieq6Lqr5omA5aSE55qE5Yy65Z+f5pa55Z2XXHJcbiAgICAgKiAyLuS4iui/sFBlb3BsZeWvueavlOiHqui6q+W9k+WJjeaJgOWkhOeahOWMuuWfn+aWueWdl+WSjOS4iuS4gOW4p+aJgOWkhOeahOWMuuWfn+aWueWdl++8jOaJvuWHuuiHqui6q+mAgOWHuueahOWSjOi/m+WFpeeahOaWueWdl1xyXG4gICAgICogMy7kuIrov7BQZW9wbGXlj5HluIPov5vlhaUv56a75byA5pa55Z2X5LqL5Lu2XHJcbiAgICAgKiBcclxuICAgICAqIFxyXG4gICAgICovXHJcbn0gICAgXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICog5pW05Liq5Li76KaB5Zy65pmv55qEVUnnsbtcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVGaWVsZFVJe1xyXG4gICAgLypcclxuICAgIOaOp+WItuaVtOS4qkdhbWXlnLrmma/kuK3lj6/op4blhYPntKDnmoTnsbtcclxuICAgIOatpOexu+aYr+WNleS+i1xyXG4gICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaTpHYW1lRmllbGRVSTtcclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdChzY2VuZTpMYXlhLlNjZW5lKTp2b2lke1xyXG4gICAgICAgIHRoaXMuaSA9IG5ldyBHYW1lRmllbGRVSShzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5pbml0ID0gKCk9Pnt9O1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG5cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3Ioc2NlbmUpe1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuVUlTZXQgPSBzY2VuZS5nZXRDaGlsZEJ5TmFtZShcIlVJU2V0XCIpO1xyXG4gICAgICAgIHRoaXMuU2lkZUJhciA9IHNjZW5lLmdldENoaWxkQnlOYW1lKFwiU2lkZUJhclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2VudHJlID0gbmV3IENlbnRyZUZpZWxkKHNjZW5lKTtcclxuICAgICAgICB0aGlzLl9zaWRlID0gbmV3IFNpZGVGaWVsZChzY2VuZSwgdGhpcy5VSVNldC54ICsgdGhpcy5fY2VudHJlLnJhbmdlLndpZHRoICsgMjApO1xyXG4gICAgICAgIHRoaXMuX3NjZW5lID0gc2NlbmU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NjZW5lOkxheWEuU2NlbmU7XHJcbiAgICBwcml2YXRlIF9zaWRlOlNpZGVGaWVsZDsgICAgICAgIC8v5Zy65pmv5Y+z5L6n55qE5bmy5ZGY6YCJ5qGGXHJcbiAgICBwcml2YXRlIF9jZW50cmU6Q2VudHJlRmllbGQ7ICAgIC8v5Zy65pmv5Lit6Ze055qE5ri45oiP5Zyw5Zu+XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgVUlTZXQ6TGF5YS5TcHJpdGU7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgU2lkZUJhcjpMYXlhLlNwcml0ZTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IENlbnRyZSgpOkNlbnRyZUZpZWxke1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jZW50cmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBTaWRlKCk6U2lkZUZpZWxke1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWRlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKTp2b2lke1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG59IiwiaW1wb3J0IE9wcnQgZnJvbSBcIi4vUGVvcGxlX3N0dWZmL09wcnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wcnRDZW50cmV7XHJcbiAgICBwdWJsaWMgc3RhdGljIGk6T3BydENlbnRyZTtcclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdCgpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5pID0gbmV3IE9wcnRDZW50cmU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfb3BydEdyb3VwOk9wcnRbXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVPcHJ0KHk6bnVtYmVyLCB4Om51bWJlciwgaWQ6c3RyaW5nKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIk5ldyBPcGVyYXRvciBhdCBcIiArIHkgKyBcIl9cIiArIHgpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxufSIsImltcG9ydCBQZW9wbGUgZnJvbSBcIi4vUGVvcGxlXCI7XHJcbmltcG9ydCBEYXRhYmFzZSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L0RhdGFiYXNlXCI7XHJcbmltcG9ydCBFdmVudENlbnRyZSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcbmltcG9ydCBHYW1lRmllbGRVSSBmcm9tIFwiLi4vR2FtZUZpZWxkVUlcIjtcclxuaW1wb3J0IHsgU3RydWMsIEJveCB9IGZyb20gXCIuLi8uLi8uLi9Ub3lib3gvRGF0YVN0cnVjdHVyZVwiO1xyXG5pbXBvcnQgUHJlc2VudCBmcm9tIFwiLi9QcmVzZW50XCI7XHJcbmltcG9ydCBTdGF0ZSBmcm9tIFwiLi9TdGF0ZVwiO1xyXG5pbXBvcnQgTXlNYXRoIGZyb20gXCIuLi8uLi8uLi9Ub3lib3gvbXlNYXRoXCI7XHJcbmltcG9ydCBNYXNzRWZmZWN0LCB7IENvbGlCb3ggfSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L01hc3NFZmZlY3RcIjtcclxuaW1wb3J0IEdsb2JhbCBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L0dsb2JhbFwiO1xyXG5cclxuLyoqXHJcbiAqIOaVjOS6uueahOihqOeOsOexu1xyXG4gKi9cclxuY2xhc3MgRW5lbXlQc3QgZXh0ZW5kcyBQcmVzZW50e1xyXG4gICAgY29uc3RydWN0b3IodXJsOnN0cmluZyl7XHJcbiAgICAgICAgc3VwZXIodXJsKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBwZXJmb3JtKHN0YXRlOkVuZW15U3R0KTp2b2lke1xyXG4gICAgICAgIHRoaXMuX3Nwcml0ZS5wb3Moc3RhdGUueCxzdGF0ZS55KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOaVjOS6uueahOeKtuaAgeexu1xyXG4gKi9cclxuY2xhc3MgRW5lbXlTdHQgZXh0ZW5kcyBTdGF0ZXtcclxuICAgIHByaXZhdGUgX3BhdGg6U3RydWMuUG9pbnRlckxpc3Q8e3g6bnVtYmVyLHk6bnVtYmVyfT47ICAgLy/ot6/lvoTkv6Hmga8g5pWM5Lq65Lya5oyJ6aG65bqP55u057q/6LWw6L+H6Lev5b6E5qCH5Ye655qE5q+P5LiA5Liq54K577yMcG9pbnRlcuihqOekuueOsOWcqOi1sOWIsOWTquS6hlxyXG4gICAgcHJpdmF0ZSBfeFNwZWVkOm51bWJlcjsgICAgICAgICAvL3jovbTpgJ/luqZcclxuICAgIHByaXZhdGUgX3lTcGVlZDpudW1iZXI7ICAgICAgICAgLy956L206YCf5bqmXHJcbiAgICBwcml2YXRlIF9zcGVlZDpudW1iZXI7ICAgICAgICAgIC8v5oC76YCf5bqmICAgIOaAu+mAn+W6pl4yID0geOi9tOmAn+W6pl4yICsgeei9tOmAn+W6pl4yXHJcbiAgICBwdWJsaWMgc3RvcDpib29sZWFuID0gZmFsc2U7ICAgICAvL+i/meS4quaVjOS6uuaYr+WQpui/mOacieS4i+S4gOS4qui3r+W+hOWdkOagh1xyXG5cclxuICAgIHByaXZhdGUgX2JvZHlCb3g6Qm94OyAgICAgICAgICAgLy/ov5nmmK/kuIDkuKrnorDmkp7nrrEgIFxyXG4gICAgcHVibGljIG9sZENvbGxpc2lvbjpCb3hbXSA9IFtdOyAgICAgIC8v6L+Z5piv5LiK5LiA5qyh56Kw5Yiw55qE5Zyw5Zu+6IqC54K5XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6YW55LCBwYXRoSUQ6c3RyaW5nKXtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICBjb25zdCBzaXplOm51bWJlciA9IERhdGFiYXNlLmkuc3ViVW5pdFNpemU7XHJcblxyXG4gICAgICAgIC8v5Yid5aeL5YyW6Lev5b6EXHJcbiAgICAgICAgdGhpcy5fcGF0aCA9IG5ldyBTdHJ1Yy5Qb2ludGVyTGlzdDx7eDpudW1iZXIseTpudW1iZXJ9PigpO1xyXG4gICAgICAgIGxldCByYXdQYXRoOm51bWJlcltdW10gPSBEYXRhYmFzZS5pLmdldFBhdGgocGF0aElEKTtcclxuICAgICAgICByYXdQYXRoLmZvckVhY2goKGVsZSxpbmRleCk9PntcclxuICAgICAgICAgICAgdGhpcy5fcGF0aC5wdXNoKHt4OmVsZVswXSwgeTplbGVbMV19KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL+WIneWni+WMluS9jee9rlxyXG4gICAgICAgIHRoaXMuX3ggPSB0aGlzLl9wYXRoLmZpcnN0Lng7XHJcbiAgICAgICAgdGhpcy5feSA9IHRoaXMuX3BhdGguZmlyc3QueTtcclxuICAgICAgICAvL+WIneWni+WMlumAn+W6plxyXG4gICAgICAgIHRoaXMuX3NwZWVkID0gZGF0YVtcInNwZWVkXCJdO1xyXG4gICAgICAgIC8v5Yid5aeL5YyW6L206YCf5bqmXHJcbiAgICAgICAgdGhpcy5fcmVzZXRBeGlzU3BlZWQoKTtcclxuXHJcbiAgICAgICAgLy/ms6jlhoznorDmkp7nrrFcclxuICAgICAgICB0aGlzLl9ib2R5Qm94ID0gbmV3IEJveCgpLnNpemUoc2l6ZSxzaXplKTtcclxuICAgICAgICB0aGlzLnJlc2V0Qm9keVBvc2l0aW9uKCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5ib2R5Qm94KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhHYW1lRmllbGRVSS5pLkNlbnRyZS5nZXRSZWModGhpcy5fYm9keUJveCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldEJvZHlQb3NpdGlvbigpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5fYm9keUJveC54ID0gdGhpcy5feCArIDE7XHJcbiAgICAgICAgdGhpcy5fYm9keUJveC55ID0gdGhpcy5feSArIDE7XHJcbiAgICAgICAgLy8gdGhpcy5fYm9keUJveC5wb3ModGhpcy5feCwgdGhpcy5feSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVzZXRBeGlzU3BlZWQoKTp2b2lke1xyXG4gICAgICAgIGlmICh0aGlzLl9wYXRoLmF0RW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FuJ3QgcmVzZXQgc3BlZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5leHQ6e3g6bnVtYmVyLHk6bnVtYmVyfSA9IHRoaXMuX3BhdGgubmV4dCgpO1xyXG4gICAgICAgIGNvbnN0IFt4X2RpcywgeV9kaXNdID0gW25leHQueCAtIHRoaXMuX3gsIG5leHQueSAtIHRoaXMuX3ldO1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KHhfZGlzLDIpICsgTWF0aC5wb3coeV9kaXMsMikpO1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSBkaXN0YW5jZS90aGlzLl9zcGVlZDtcclxuICAgICAgICB0aGlzLl94U3BlZWQgPSB4X2Rpcy90aW1lO1xyXG4gICAgICAgIHRoaXMuX3lTcGVlZCA9IHlfZGlzL3RpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFBvc2l0aW9uKHg6bnVtYmVyLCB5Om51bWJlcik6dm9pZHtcclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICB0aGlzLl95ID0geTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmV4dFRhcmdldCgpOnZvaWR7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BhdGguYXRFbmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wYXRoLnN0ZXAoKTtcclxuICAgICAgICB0aGlzLl9yZXNldEF4aXNTcGVlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaXNBcnJpdmVkKCk6Ym9vbGVhbntcclxuICAgICAgICByZXR1cm4gKHRoaXMuX3ggPT09IHRoaXMuX3BhdGgubmV4dCgpLngpICYmICh0aGlzLl95ID09PSB0aGlzLl9wYXRoLm5leHQoKS55KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHgoKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3g7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHkoKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3k7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IHhTcGVlZCgpOm51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5feFNwZWVkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCB5U3BlZWQoKTpudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3lTcGVlZDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgdGFyZ2V0KCk6e3g6bnVtYmVyLCB5Om51bWJlcn0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXRoLm5leHQoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgYm9keUJveCgpOkJveHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYm9keUJveDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOaVjOS6uueahOmAu+i+keexu1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBQZW9wbGV7XHJcbiAgICBwcml2YXRlIF9kYXRhOmFueTtcclxuICAgIHByaXZhdGUgX3BhdGg6U3RydWMuUG9pbnRlckxpc3Q8bnVtYmVyW10+O1xyXG4gICAgcHJpdmF0ZSBfcHJlc2VudDpFbmVteVBzdDtcclxuICAgIHByaXZhdGUgX3N0YXRlOkVuZW15U3R0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaWQg5pWM5Lq6aWTvvIznlKjkuo7ojrflj5bmlYzkurrmlbDmja5cclxuICAgICAqIEBwYXJhbSBwYXRoSUQg6Lev5b6EaWTvvIznlKjkuo7ojrflj5bot6/lvoTmlbDmja5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoaWQ6c3RyaW5nLCBwYXRoSUQ6c3RyaW5nKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIC8v6I635Y+W5pWw5o2u5ZKM6Lev5b6EXHJcbiAgICAgICAgbGV0IGRhdGE6YW55ID0gRGF0YWJhc2UuaS5nZXRFbmVteShpZCk7XHJcbiAgICAgICAgbGV0IHBhdGg6YW55ID0gRGF0YWJhc2UuaS5nZXRQYXRoKHBhdGhJRCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5fcGF0aCA9IG5ldyBTdHJ1Yy5Qb2ludGVyTGlzdDxudW1iZXJbXT4ocGF0aCk7XHJcblxyXG4gICAgICAgIC8v5Yib5bu66KGo546w57G75ZKM5pWw5o2u57G7XHJcbiAgICAgICAgdGhpcy5fcHJlc2VudCA9IG5ldyBFbmVteVBzdChkYXRhW1wiaW1nXCJdKTtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IG5ldyBFbmVteVN0dChkYXRhLCBwYXRoSUQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb21wYXJlQ29saVJlc3VsdChwcmV2aW91czpCb3hbXSwgY3VycmVudDpCb3hbXSk6e2luOkJveFtdLCBvdXQ6Qm94W119e1xyXG4gICAgICAgIGxldCBpbkxpc3Q6Qm94W10gPSBbXTtcclxuICAgICAgICBsZXQgb3V0TGlzdDpCb3hbXSA9IFtdO1xyXG5cclxuICAgICAgICBwcmV2aW91cy5mb3JFYWNoKChlbGUpPT57XHJcbiAgICAgICAgICAgIGxldCB0b0luc2VydDpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgZm9yKGxldCBuID0gMDsgbiA8IGN1cnJlbnQubGVuZ3RoOyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGUgPT09IGN1cnJlbnRbbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0b0luc2VydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0b0luc2VydCkge1xyXG4gICAgICAgICAgICAgICAgb3V0TGlzdC5wdXNoKGVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY3VycmVudC5mb3JFYWNoKChlbGUpPT57XHJcbiAgICAgICAgICAgIGxldCB0b0luc2V0OmJvb2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHByZXZpb3VzLmxlbmd0aDsgbiArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlID09PSBwcmV2aW91c1tuXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvSW5zZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodG9JbnNldCkge1xyXG4gICAgICAgICAgICAgICAgaW5MaXN0LnB1c2goZWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4ge2luOmluTGlzdCwgb3V0Om91dExpc3R9O1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnJhbWVXb3JrKCk6dm9pZHtcclxuICAgICAgICBpZiAodGhpcy5fc3RhdGUuc3RvcCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v6L+b6KGM56e75YqoXHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmlzQXJyaXZlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5uZXh0VGFyZ2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB7eCx5LHhTcGVlZCx5U3BlZWQsdGFyZ2V0fSA9IHRoaXMuX3N0YXRlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLnN0b3AgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IG5ld3g6bnVtYmVyID0gTXlNYXRoLm1vdmVUbyh4LHhTcGVlZCx0YXJnZXQueCk7XHJcbiAgICAgICAgbGV0IG5ld3k6bnVtYmVyID0gTXlNYXRoLm1vdmVUbyh5LHlTcGVlZCx0YXJnZXQueSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3N0YXRlLnNldFBvc2l0aW9uKG5ld3gsbmV3eSk7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUucmVzZXRCb2R5UG9zaXRpb24oKTtcclxuICAgICAgICAvL+WIt+aWsOS9jee9rlxyXG4gICAgICAgIHRoaXMuX3ByZXNlbnQucGVyZm9ybSh0aGlzLl9zdGF0ZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy/norDmkp7mo4DmtYtcclxuICAgICAgICBsZXQgcmVzdWx0OkJveFtdID0gR2FtZUZpZWxkVUkuaS5DZW50cmUuZ2V0UmVjKHRoaXMuX3N0YXRlLmJvZHlCb3gpO1xyXG4gICAgICAgIGxldCBldmVudHMgPSB0aGlzLmNvbXBhcmVDb2xpUmVzdWx0KHRoaXMuX3N0YXRlLm9sZENvbGxpc2lvbiwgcmVzdWx0KTtcclxuICAgICAgICB0aGlzLl9zdGF0ZS5vbGRDb2xsaXNpb24gPSByZXN1bHQ7XHJcblxyXG4gICAgICAgIC8v6L+Y5rKh5YaZ5a6M77yM6L+Y5rKh5Y+R6YCB5LqL5Lu2XHJcblxyXG4gICAgICAgIC8vIEdsb2JhbC5VSVNldF9zdWIuZ3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAvLyBldmVudHMuaW4uZm9yRWFjaCgoZWxlKT0+e1xyXG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhlbGUudW5pdFkgKyBcInxcIiArIGVsZS51bml0WCk7XHJcbiAgICAgICAgLy8gICAgIE15TWF0aC5kcmF3UmVjKEdsb2JhbC5VSVNldF9zdWIsIGVsZSwgXCIjZmYwMDAwXCIpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIC8vIGV2ZW50cy5vdXQuZm9yRWFjaCgoZWxlKT0+e1xyXG4gICAgICAgIC8vICAgICBNeU1hdGguZHJhd1JlYyhHbG9iYWwuVUlTZXRfc3ViLCBlbGUsIFwiIzAwMDBmZlwiKTtcclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgLy8gYWxlcnQoKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbGlCb3ggfSBmcm9tIFwiLi4vLi4vLi4vVG95Ym94L01hc3NFZmZlY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFBlb3BsZXtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQnVmZntcclxuICAgIHByaXZhdGUgcGVybWFuZW50OmJvb2xlYW47XHJcbiAgICBwcml2YXRlIGNvdW50RG93bjpudW1iZXI7XHJcbn1cclxuXHJcblxyXG5jbGFzcyBEYW1hZ2VUeXBle1xyXG4gICAgcHVibGljIHJlYWRvbmx5IFBIWVNJQ0FMOnN0cmluZyA9IFwiUEhZU0lDQUxcIjtcclxuICAgIHB1YmxpYyByZWFkb25seSBNQUdJQ0FMOnN0cmluZyA9IFwiTUFHSUNBTFwiO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IENSSVRJQ0FMOnN0cmluZyA9IFwiQ1JJVElDQUxcIjtcclxufVxyXG5cclxuLyoqXHJcbiAqIERhbWFnZeaYr+S4gOS4quWCqOWtmOS8pOWus+S/oeaBr+eahOexu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhbWFnZXtcclxuICAgIHByaXZhdGUgX3ZhbHVlOm51bWJlcjsgICAgICAvL+WkmumrmOeahOS8pOWus1xyXG4gICAgcHVibGljIGdldCB2YWx1ZSgpOm51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfY3JlYXRvcjpQZW9wbGU7ICAgIC8v6LCB6YCg5oiQ55qE5Lyk5a6zXHJcbiAgICBwdWJsaWMgZ2V0IGNyZWF0b3IoKTpQZW9wbGV7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdHlwZTpzdHJpbmc7ICAgICAgIC8v5Lyk5a6z57G75Z6LKOeJqeS8pOazleS8pOecn+S8pClcclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpOnN0cmluZ3tcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTpudW1iZXIsIGNyZWF0b3I6UGVvcGxlLCB0eXBlOnN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9jcmVhdG9yID0gY3JlYXRvcjtcclxuICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFdlYXBvbuaYr+S4gOS4quWCqOWtmOaUu+WHu+iDveWKm+S/oeaBr+eahOexu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFdlYXBvbntcclxuICAgIHByaXZhdGUgX2JveGVzOkNvbGlCb3hbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfb3JpZ2luWDpudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfb3JpZ2luWTpudW1iZXIgPSAwO1xyXG59IiwiaW1wb3J0IEdhbWVGaWVsZFVJIGZyb20gXCIuLi9HYW1lRmllbGRVSVwiO1xyXG5cclxuLyoqXHJcbiAqIOaJgOacieihqOeOsOexu+eahOWfuuexu1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgUHJlc2VudHtcclxuICAgIHByb3RlY3RlZCBfc3ByaXRlOkxheWEuU3ByaXRlO1xyXG4gICAgY29uc3RydWN0b3IodXJsOnN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5fc3ByaXRlID0gR2FtZUZpZWxkVUkuaS5DZW50cmUuQ3JlYXRlRW5lbXkodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHNwcml0ZSgpOkxheWEuU3ByaXRle1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zcHJpdGU7XHJcbiAgICB9XHJcbn0iLCJcclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU3RhdGUge1xyXG4gICAgcHJvdGVjdGVkIF94Om51bWJlcjtcclxuICAgIHByb3RlY3RlZCBfeTpudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOmFueSkge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHt1aX0gZnJvbSBcIi4uL3VpL2xheWFNYXhVSVwiXHJcbmltcG9ydCBFdmVudENlbnRyZSBmcm9tIFwiLi4vVG95Ym94L0V2ZW50Q2VudHJlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nIGV4dGVuZHMgdWkuTG9hZGluZ1NjZW5lVUl7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKClcclxuICAgICAgICBjb25zdCBnYW1lU2V0OnN0cmluZyA9IFwiLi9EYXRhYmFzZS9HYW1lU2V0Lmpzb25cIixcclxuICAgICAgICBlbmVteURhdGFiYXNlOnN0cmluZyA9IFwiLi9EYXRhYmFzZS9FbmVteURhdGFiYXNlLmpzb25cIixcclxuICAgICAgICBvcGVyYXRvckRhdGFiYXNlOnN0cmluZyA9IFwiLi9EYXRhYmFzZS9PcGVyYXRvckRhdGFiYXNlLmpzb25cIjtcclxuXHJcbiAgICAgICAgLy/liqDovb3muLjmiI/orr7nva7vvIzmlYzkurrmlbDmja7lupPvvIzlubLlkZjmlbDmja7lupNcclxuICAgICAgICBMYXlhLmxvYWRlci5sb2FkKFtnYW1lU2V0LGVuZW15RGF0YWJhc2Usb3BlcmF0b3JEYXRhYmFzZV0sIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkxvYWRlZCksbnVsbCxMYXlhLkxvYWRlci5KU09OKVxyXG4gICAgfVxyXG5cclxuICAgIG9uTG9hZGVkKCl7XHJcbiAgICAgICAgRXZlbnRDZW50cmUuaS5ldmVudChcIkluaXRcIiwgXCJSZWd1bGFyXCIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IE15TWF0aCBmcm9tIFwiLi9teU1hdGhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCb3ggZXh0ZW5kcyBMYXlhLlJlY3RhbmdsZXtcclxuICAgIHB1YmxpYyB1bml0WDpudW1iZXI7XHJcbiAgICBwdWJsaWMgdW5pdFk6bnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoMCwwLDAsMCk7XHJcbiAgICB9XHJcbiAgIFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bCx5piv4oCm4oCm5p2l5LiA57uE77yIMTAw5Liq77yJ6ZqP5py655qE56Kw5pKe566xXHJcbiAgICAgKiBAcGFyYW0geFJhbmdlIFxyXG4gICAgICogQHBhcmFtIHlSYW5nZSBcclxuICAgICAqIEBwYXJhbSB3aWRSYW5nZSBcclxuICAgICAqIEBwYXJhbSBoaWdSYW5nZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHJhbmRvbUJveGVzKHhSYW5nZTpudW1iZXIgPSAxMjAwLCB5UmFuZ2U6bnVtYmVyID0gODAwLCB3aWRSYW5nZTpudW1iZXIgPSAzMDAsIGhpZ1JhbmdlOm51bWJlciA9IDMwMCk6Qm94W117XHJcbiAgICAgICAgY29uc3QgcmFkOkZ1bmN0aW9uID0gTXlNYXRoLnJhbmRvbUludDtcclxuICAgICAgICBsZXQgcmVzdWx0OkJveFtdID0gW107XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDUwOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3IEJveCgpKTtcclxuICAgICAgICAgICAgcmVzdWx0W2ldLnBvcyhyYWQoeFJhbmdlKSwgcmFkKHlSYW5nZSkpLnNpemUocmFkKHdpZFJhbmdlKSwgcmFkKGhpZ1JhbmdlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBvcyh4Om51bWJlciwgeTpudW1iZXIpOkJveHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNpemUod2lkdGg6bnVtYmVyLCBoZWlnaHQ6bnVtYmVyKTpCb3h7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbnRlcnNlY3RzX1gocmVjOkJveCk6Ym9vbGVhbntcclxuICAgICAgICBpZiAodGhpcy54IDwgcmVjLngpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYy5pbnRlcnNlY3RzX1godGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAgKHRoaXMueCA+PSByZWMueCAmJiB0aGlzLnggPD0gcmVjLnJpZ2h0KSB8fFxyXG4gICAgICAgICAgICAgICAgKHRoaXMucmlnaHQgPj0gcmVjLnggJiYgdGhpcy5yaWdodCA8PSByZWMucmlnaHQpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGludGVyc2VjdHNfWShyZWM6Qm94KTpib29sZWFue1xyXG4gICAgICAgIGlmICh0aGlzLnk8cmVjLnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlYy5pbnRlcnNlY3RzX1kodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAgKHRoaXMueSA+PSByZWMueSAmJiB0aGlzLnkgPD0gcmVjLmJvdHRvbSkgfHxcclxuICAgICAgICAgICAgICAgICh0aGlzLmJvdHRvbSA+PSByZWMueSAmJiB0aGlzLmJvdHRvbSA8PSByZWMuYm90dG9tKVxyXG4gICAgfVxyXG59XHJcbiAgICBcclxuY2xhc3MgTWFwTm9kZTxLLFY+e1xyXG4gICAgcHVibGljIGtleTtcclxuICAgIHB1YmxpYyB2YWx1ZTtcclxuICAgIGNvbnN0cnVjdG9yKGtleTpLLCB2YWx1ZTpWKXtcclxuICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE5vZGU8RT57XHJcbiAgICBwdWJsaWMgaXRlbTpFO1xyXG4gICAgcHVibGljIG5leHQ6Tm9kZTxFPjtcclxuICAgIGNvbnN0cnVjdG9yKGl0ZW06RSwgbmV4dDpOb2RlPEU+KXtcclxuICAgICAgICB0aGlzLml0ZW0gPSBpdGVtO1xyXG4gICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBtb2R1bGUgU3RydWN7XHJcbiAgICBleHBvcnQgY2xhc3MgTGlua0xpc3Q8RT57XHJcbiAgICAgICAgcHJpdmF0ZSBfaGVhZDpOb2RlPEU+O1xyXG4gICAgICAgIHByaXZhdGUgX3RhaWw6Tm9kZTxFPjtcclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV3IE5vZGU8RT4obnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBuZXcgTm9kZTxFPihudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5Z+656GA5bGe5oCnXHJcbiAgICAgICAgcHVibGljIGdldCBsZW5ndGgoKTpudW1iZXJ7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnQ6Tm9kZTxFPiA9IHRoaXMuX2hlYWQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50Lm5leHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAxO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldCBpc0VtcHR5KCk6Ym9vbGVhbntcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWQubmV4dCA9PT0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5aKe5Yig5pS55p+lXHJcbiAgICAgICAgLy/lop5cclxuICAgICAgICBwdWJsaWMgcHVzaChpdGVtOkUpOnZvaWR7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Ok5vZGU8RT4gPSBuZXcgTm9kZTxFPihpdGVtLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZC5uZXh0ID0gbGFzdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhaWwubmV4dCA9IGxhc3Q7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsLm5leHQubmV4dCA9IGxhc3Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBsYXN0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHVuc2hpZnQoaXRlbTpFKTp2b2lke1xyXG4gICAgICAgICAgICBsZXQgZmlyc3Q6Tm9kZTxFPiA9IG5ldyBOb2RlPEU+KGl0ZW0sIG51bGwpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBmaXJzdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWQubmV4dCA9IGZpcnN0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QubmV4dCA9IHRoaXMuX2hlYWQubmV4dC5uZXh0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZC5uZXh0ID0gZmlyc3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbnNlcnQoaW5kZXg6bnVtYmVyLCBpdGVtOkUpOmJvb2xlYW57XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aGlzLmxlbmd0aCkgey8v6L+Z5Y+l5LiN5LiA5qC3XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VycmVudDpOb2RlPEU+ID0gdGhpcy5faGVhZDsvL+i/meWPpeWSjOWFtuS7lumBjeWOhuaYr+S4jeS4gOagt+eahO+8jOWboOS4uuimgemAieWPluWIsOmAieWumuS9jee9rueahOWJjemdouS4gOagvFxyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGluZGV4OyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQubmV4dCA9IG5ldyBOb2RlPEU+KGl0ZW0sIGN1cnJlbnQubmV4dCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5YigXHJcbiAgICAgICAgcHVibGljIHJlbW92ZShpbmRleDpudW1iZXIpOkV7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VycmVudDpOb2RlPEU+ID0gdGhpcy5faGVhZC5uZXh0O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGluZGV4OyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBpdGVtOkUgPSBjdXJyZW50Lml0ZW07XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzaGlmdCgpOkV7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX2hlYWQubmV4dC5pdGVtO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFkLm5leHQgPSB0aGlzLl9oZWFkLm5leHQubmV4dDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5pS5XHJcbiAgICAgICAgcHVibGljIHdyaXRlKGluZGV4Om51bWJlciwgaXRlbTpFKTp2b2lke1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50Ok5vZGU8RT4gPSB0aGlzLl9oZWFkLm5leHQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgaW5kZXg7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3VycmVudC5pdGVtID0gaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5p+lXHJcbiAgICAgICAgcHVibGljIHJlYWQoaW5kZXg6bnVtYmVyKTpFe1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50Ok5vZGU8RT4gPSB0aGlzLl9oZWFkLm5leHQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgaW5kZXg7IG4gKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzZWFyY2goaXRlbTpFKTpudW1iZXJbXXtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdDpudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmZvcmVhY2goKGVsZTpFLCBpbmRleDpudW1iZXIpPT57XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlID09PSBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWIpOaWremTvuihqOS4reaYr+WQpuWtmOWcqOafkOS4gOWFg+e0oFxyXG4gICAgICAgICAqIEBwYXJhbSBpdGVtIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBoYXMoaXRlbTogRSk6Ym9vbGVhbntcclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZC5uZXh0O1xyXG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5pdGVtID09IGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v6auY6Zi25Ye95pWwXHJcbiAgICAgICAgcHVibGljIGZvcmVhY2goZjooZWxlOkUsIGluZGV4Om51bWJlciwgbGlzdDpMaW5rTGlzdDxFPik9PnZvaWQpOnZvaWR7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZC5uZXh0O1xyXG4gICAgICAgICAgICBsZXQgbnVtOm51bWJlciA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmKGN1cnJlbnQuaXRlbSwgbnVtLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XHJcbiAgICAgICAgICAgICAgICBudW0gKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6K+35pqC5pe25LiN6KaB5L2/55So6L+Z5Liq5Ye95pWw77yM5Zug5Li65oiR5Lmf5LiN55+l6YGT5a6D5Lya5LiN5Lya54iG54K4XHJcbiAgICAgICAgICog6Zmk6Z2e5L2g6K+76L+H6L+Z5Liq5Ye95pWw55qE5rqQ5Luj56CBXHJcbiAgICAgICAgICogQHBhcmFtIGYg5Yik5pat5YWD57Sg5LyY5YWI57qn55qE5Zue6LCD5Ye95pWwXHJcbiAgICAgICAgICogQHBhcmFtIGluY3JlYXNlIOaYr+WQpuWNh+W6j++8jOm7mOiupOWNh+W6j1xyXG4gICAgICAgICAqIEByZXR1cm5zIOi/lOWbnuS4gOS4quaOkuW6j+eahOmTvuihqFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzb3J0YnkoZjooZWxlOkUpPT5udW1iZXIsIGluY3JlYXNlOmJvb2xlYW4gPSB0cnVlKTpMaW5rTGlzdDxFPntcclxuICAgICAgICAgICAgbGV0IHByaW9yaXR5OkxpbmtMaXN0PG51bWJlcj4gPSBuZXcgTGlua0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgICAgICBsZXQgc29ydGVkOkxpbmtMaXN0PEU+ID0gbmV3IExpbmtMaXN0PEU+KCk7XHJcbiAgICAgICAgICAgIHByaW9yaXR5LnB1c2goLTApO1xyXG4gICAgICAgICAgICBzb3J0ZWQucHVzaChudWxsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb21wYXJlOihhOm51bWJlcixiOm51bWJlcik9PmJvb2xlYW4gPSBpbmNyZWFzZT8oYSxiKT0+e3JldHVybiBhIDwgYjt9OihhLGIpPT57cmV0dXJuIGEgPiBifTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9yZWFjaCgoZWxlKT0+e1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRQcmkgPSBmKGVsZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbm9kZTpOb2RlPEU+ID0gc29ydGVkLl9oZWFkLm5leHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJpTm9kZTpOb2RlPG51bWJlcj4gPSBwcmlvcml0eS5faGVhZC5uZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBmb3VuZFBsYWNlOmJvb2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChub2RlLm5leHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoY3VycmVudFByaSA8IHByaU5vZGUubmV4dC5pdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmUoY3VycmVudFByaSwgcHJpTm9kZS5uZXh0Lml0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmV4dCA9IG5ldyBOb2RlPEU+KGVsZSwgbm9kZS5uZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpTm9kZS5uZXh0ID0gbmV3IE5vZGU8bnVtYmVyPihjdXJyZW50UHJpLCBwcmlOb2RlLm5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFBsYWNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHByaU5vZGUgPSBwcmlOb2RlLm5leHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZFBsYWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkLnB1c2goZWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBwcmlvcml0eS5wdXNoKGN1cnJlbnRQcmkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNvcnRlZC5zaGlmdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gc29ydGVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHVibGljIGJiU29ydEJ5KGY6KGVsZTpFKT0+bnVtYmVyLCBpbmNyZWFzZTpib29sZWFuID0gdHJ1ZSk6TGlua0xpc3Q8RT57XHJcblxyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE1hcDxLLFY+e1xyXG4gICAgICAgIHByaXZhdGUgX2xpc3Q6QXJyYXk8TWFwTm9kZTxLLFY+PlxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3QgPSBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZ2V0KGtleTpLKTpWe1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGUgb2YgdGhpcy5fbGlzdCl7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlLmtleSA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZS52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRLZXlCeVZhbCh2YWw6Vik6S3tcclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlIG9mIHRoaXMuX2xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGUudmFsdWUgPT09IHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGUua2V5XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGtleUV4aXN0KGtleTpLKTpib29sZWFue1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGUgb2YgdGhpcy5fbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZS5rZXkgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBzZXQoa2V5OkssdmFsdWU6Vik6Ym9vbGVhbntcclxuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0aGlzLl9saXN0Lmxlbmd0aDsgbiArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGlzdFtuXS5rZXkgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3Rbbl0udmFsdWUgPSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9saXN0LnB1c2gobmV3IE1hcE5vZGU8SyxWPihrZXksdmFsdWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGJhdGNoU2V0KGtleXM6S1tdLCB2YWx1ZXM6VltdKTpib29sZWFue1xyXG4gICAgICAgICAgICBpZiAoa2V5cy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGtleXMubGVuZ3RoOyBuICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleXNbbl0sIHZhbHVlc1tuXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgcmVtb3ZlKGtleTpLKTpib29sZWFue1xyXG4gICAgICAgICAgICBsZXQgY291bnQ6bnVtYmVyID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgZWxlIG9mIHRoaXMuX2xpc3QpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGUua2V5ID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShjb3VudCwxKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY291bnQgKz0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVibGljIGdldCBsZW5ndGgoKTpudW1iZXJ7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9saXN0Lmxlbmd0aFxyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZm9yZWFjaChmOihrOkssIHY6Vik9PnZvaWQpOnZvaWR7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVsZSBvZiB0aGlzLl9saXN0KSB7XHJcbiAgICAgICAgICAgICAgICBmKGVsZS5rZXksIGVsZS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZmlsdGVyKGY6KGs6Syx2OlYpPT5ib29sZWFuKTpNYXA8SyxWPntcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBNYXA8SyxWPigpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbGUgb2YgdGhpcy5fbGlzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYoZWxlLmtleSwgZWxlLnZhbHVlKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChlbGUua2V5LCBlbGUudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQb2ludGVyTGlzdDxFPntcclxuICAgICAgICBwcml2YXRlIF9saXN0OkFycmF5PEU+ID0gW107XHJcbiAgICAgICAgcHJpdmF0ZSBfcG9pbnRlcjpudW1iZXIgPSAwO1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHNvdXJjZTpBcnJheTxFPiA9IFtdLCBpbml0UG9pbnQ6bnVtYmVyID0gMCl7XHJcbiAgICAgICAgICAgIHNvdXJjZS5mb3JFYWNoKChlbGUpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnB1c2goZWxlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBleGNlZWRpbmcoKTpib29sZWFue1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlciA+PSB0aGlzLl9saXN0Lmxlbmd0aCB8fCB0aGlzLl9wb2ludGVyIDwgMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICDku6XkuIvms6jph4rkuK3vvIzmiormlbDnu4TnnIvkvZzmqKrlkJHmjpLliJfnmoTkuIDns7vliJflhYPntKBcclxuICAgICAgICBpbmRleCA9IDDnmoTlhYPntKDlnKjmnIDlt6bkvqdcclxuICAgICAgICAqL1xyXG5cclxuICAgICAgICByZWFkKCk6RXsvL+afpeeci+W9k+WJjXBvaW50ZXLmiYDmjIfnmoTlhYPntKBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RbdGhpcy5fcG9pbnRlcl1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0ZXAoKTpFey8vcG9pbnRlcuWQkeWPs+enu+S4gOatpVxyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyKz0xO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0byhwbGFjZTpudW1iZXIpOlBvaW50ZXJMaXN0PEU+ey8vcG9pbnRlcuenu+WIsOaMh+WumuS9jee9rlxyXG4gICAgICAgICAgICB0aGlzLl9wb2ludGVyID0gcGxhY2VcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1c2goZGF0YTpFKTpQb2ludGVyTGlzdDxFPnsvL+WcqOaVsOe7hOacq+WwvuWinuWKoOS4gOS4quWFg+e0oFxyXG4gICAgICAgICAgICB0aGlzLl9saXN0LnB1c2goZGF0YSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldChpbmRleDpudW1iZXIsZGF0YTpFKTpQb2ludGVyTGlzdDxFPnsvL+imhuWGmeaVsOe7hOeJueWummluZGV45Lit55qE5YWD57SgXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RbaW5kZXhdID0gZGF0YVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBuZXh0KHNoaWZ0Om51bWJlciA9IDEpOkV7XHJcbiAgICAgICAgICAgIC8v6K+75Y+W5L2N5LqO5b2T5YmNcG9pbnRlcuaJgOaMh+eahOWFg+e0oOWPs+i+ueiLpeW5suagvOeahOWFg+e0oFxyXG4gICAgICAgICAgICAvL3NoaWZ06buY6K6k5Li6Me+8jOWNs+W9k+WJjXBvaW50ZXLlj7Povrnnm7jpgrvnmoTlhYPntKBcclxuICAgICAgICAgICAgLy9zaGlmdOS4uui0n+aVsOaXtuiOt+WPluW3puS+p+eahOWFg+e0oFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFt0aGlzLl9wb2ludGVyK3NoaWZ0XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGxlbmd0aCgpOm51bWJlcnsvL+iOt+WPluaVsOe7hOmVv+W6plxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5sZW5ndGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBsYXN0KCk6RXsvL+iOt+WPluacgOWQjuS4gOmhuVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFt0aGlzLl9saXN0Lmxlbmd0aC0xXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGZpcnN0KCk6RXsvL+iOt+WPlummlumhuVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGlzdFswXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldCBwb2ludGVyKCk6bnVtYmVyey8v6I635Y+WcG9pbnRlclxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0IGF0RW5kKCk6Ym9vbGVhbnsvL+afpeeci+KAnHBvaW50ZXLmjIflkJHmlbDnu4TmnIDlj7PkvqfnmoTlhYPntKDigJ3nmoTnnJ/lgLxcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50ZXIgPT09IHRoaXMuX2xpc3QubGVuZ3RoIC0gMVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7U3RydWN9IGZyb20gXCIuL0RhdGFTdHJ1Y3R1cmVcIlxyXG5cclxuXHJcbmNvbnN0IGdhbWVTZXRfVVJMOnN0cmluZyA9IFwiLi9EYXRhYmFzZS9HYW1lU2V0Lmpzb25cIixcclxuZW5lbXlEYXRhYmFzZV9VUkw6c3RyaW5nID0gXCIuL0RhdGFiYXNlL0VuZW15RGF0YWJhc2UuanNvblwiLFxyXG5vcGVyYXRvckRhdGFiYXNlX1VSTDpzdHJpbmcgPSBcIi4vRGF0YWJhc2UvT3BlcmF0b3JEYXRhYmFzZS5qc29uXCJcclxuXHJcblxyXG5cclxuXHJcbnR5cGUgRW5lbXlFdmVudCA9IHtcclxuICAgIHRpbWU6bnVtYmVyLFxyXG4gICAgdHlwZURhdGE6YW55LFxyXG4gICAgcGF0aDpudW1iZXJbXVtdXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFiYXNle1xyXG5cclxuICAgIC8v5Yid5aeL5YyWIFN0YXJ0XHJcbiAgICBwdWJsaWMgc3RhdGljIGk6RGF0YWJhc2VcclxuICAgIC8v55u05o6lcHVibGljIHN0YXRpYyBpbnN0OkRhdGFiYXNlID0gbmV3IERhdGFiYXNlKCks5piv5ZCm5Y+v5Lul5Zyo57G76KOF6L295pe25bCx5Yib5bu65omA6ZyA55qE5Y2V5L6LP1xyXG4gICAgcHVibGljIHN0YXRpYyBpbml0KCl7XHJcbiAgICAgICAgdGhpcy5pID0gbmV3IERhdGFiYXNlKClcclxuICAgICAgICB0aGlzLmluaXQgPSAoKT0+e31cclxuICAgIH1cclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBMYXlhLmxvYWRlci5sb2FkKFtlbmVteURhdGFiYXNlX1VSTCxvcGVyYXRvckRhdGFiYXNlX1VSTCxnYW1lU2V0X1VSTF0sIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkxvYWRlZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Mb2FkZWQoKTp2b2lke1xyXG4gICAgICAgIHRoaXMuX2VuZW15RGF0YSA9IExheWEubG9hZGVyLmdldFJlcyhlbmVteURhdGFiYXNlX1VSTCk7XHJcbiAgICAgICAgdGhpcy5fb3BlcmF0b3JEYXRhID0gTGF5YS5sb2FkZXIuZ2V0UmVzKG9wZXJhdG9yRGF0YWJhc2VfVVJMKTtcclxuICAgICAgICB0aGlzLl9nYW1lU2V0ID0gTGF5YS5sb2FkZXIuZ2V0UmVzKGdhbWVTZXRfVVJMKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdW5pdFNpemUgPSB0aGlzLl9nYW1lU2V0W1wiZ3JvdW5kXCJdLnNpemU7XHJcbiAgICAgICAgdGhpcy5fc3ViVW5pdFNpemUgPSBNYXRoLmZsb29yKHRoaXMuX3VuaXRTaXplKjQvNSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgLy/liJ3lp4vljJYgRW5kXHJcblxyXG4gICAgcHJpdmF0ZSBfZW5lbXlEYXRhOkpTT047ICAgIC8v5pWM5Lq65pWw5o2uanNvbuaWh+S7tlxyXG4gICAgcHJpdmF0ZSBfb3BlcmF0b3JEYXRhOkpTT047IC8v5bmy5ZGY5pWw5o2uanNvbuaWh+S7tlxyXG4gICAgcHJpdmF0ZSBfZ2FtZVNldDpKU09OOyAgICAgIC8v5ri45oiP6K6+5a6aanNvbuaWh+S7tlxyXG5cclxuICAgIHByaXZhdGUgX3VuaXRTaXplOm51bWJlcjtcclxuICAgIHByaXZhdGUgX3N1YlVuaXRTaXplOm51bWJlcjtcclxuICAgIFxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXRoKHBhdGhOYW1lOnN0cmluZyk6bnVtYmVyW11bXXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2FtZVNldFtcInBhdGhzXCJdW3BhdGhOYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RW5lbXkoZW5lbXlOYW1lOnN0cmluZyk6YW55e1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbmVteURhdGFbZW5lbXlOYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0T3BydChvcGVyYXRvck5hbWU6c3RyaW5nKTphbnl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZXJhdG9yRGF0YVtvcGVyYXRvck5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRHcm91bmQoKTphbnl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dhbWVTZXRbXCJncm91bmRcIl07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFRpbWV0YWJsZSgpOmFueXtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2FtZVNldFtcInRpbWV0YWJsZVwiXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IFVuaXRTaXplKCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91bml0U2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHN1YlVuaXRTaXplKCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJVbml0U2l6ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFN0cnVjIH0gZnJvbSBcIi4vRGF0YVN0cnVjdHVyZVwiO1xyXG5cclxuY2xhc3MgRmllbGROYW1le1xyXG4gICAgcHVibGljIHJlYWRvbmx5IEdMT0JBTDpzdHJpbmcgPSBcIkdMT0JBTFwiO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IFBFT1BMRTpzdHJpbmcgPSBcIlBFT1BMRVwiO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IENSRUFURV9FTkVNWV9TUFJJVEU6c3RyaW5nID0gXCJDUkVBVEVfRU5FTVlfU1BSSVRFXCI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgQ09MTElTSU9OOnN0cmluZyA9IFwiQ09MTElTSU9OXCI7XHJcbn1cclxuXHJcbmNsYXNzIFR5cGVOYW1le1xyXG4gICAgcHVibGljIGdldCBBbnkoKTpzdHJpbmd7XHJcbiAgICAgICAgcmV0dXJuIFwiQW55XCI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50Q2VudHJle1xyXG4gICAgcHVibGljIHN0YXRpYyBpOkV2ZW50Q2VudHJlOy8v6Ieq6Lqr55qE5a6e5L6LXHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXQoKTp2b2lke1xyXG4gICAgICAgIEV2ZW50Q2VudHJlLmkgPSBuZXcgRXZlbnRDZW50cmUoKTtcclxuICAgICAgICB0aGlzLmluaXQgPSAoKT0+e307XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7fTtcclxuXHJcbiAgICBwcml2YXRlIF9ldmVudEZpZWxkczpTdHJ1Yy5NYXA8c3RyaW5nLCBMYXlhLkV2ZW50RGlzcGF0Y2hlcj4gPSBuZXcgU3RydWMuTWFwPHN0cmluZywgTGF5YS5FdmVudERpc3BhdGNoZXI+KCk7XHJcbiAgICAvKipcclxuICAgICAqIOWMuuWIhuS4jeWQjOeahOS6i+S7tuWMuuWfn1xyXG4gICAgICog5LiA5Liq5LqL5Lu25Yy65Z+f55qE5LqL5Lu277yM5LiN6IO96KKr5Y+m5LiA5Liq5LqL5Lu25Yy65Z+f55qE55uR5ZCs5Zmo5b6X55+lXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRmllbGROYW1lOkZpZWxkTmFtZSA9IG5ldyBGaWVsZE5hbWUoKTtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVHlwZU5hbWU6VHlwZU5hbWUgPSBuZXcgVHlwZU5hbWUoKTtcclxuICAgIFxyXG4gICAgcHVibGljIG9uKGZpZWxkOnN0cmluZywgdHlwZTpzdHJpbmcsIGNhbGxlcjphbnksIG1ldGhvZDpGdW5jdGlvbiwgYXJncz86YW55W10pOnZvaWR7Ly/lsLHmr5RFdmVudERpc3BhdGNoZXIub27lpJrkuKrkuovku7bljLrln59cclxuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50RmllbGRzLmtleUV4aXN0KGZpZWxkKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudEZpZWxkcy5zZXQoZmllbGQsIG5ldyBMYXlhLkV2ZW50RGlzcGF0Y2hlcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnRGaWVsZHMuZ2V0KGZpZWxkKS5vbih0eXBlLCBjYWxsZXIsIG1ldGhvZCwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGV2ZW50KGZpZWxkOnN0cmluZywgdHlwZTpzdHJpbmcsIGFyZ3M/OmFueVtdKTp2b2lkey8v5bCx5q+URXZlbnREaXNwYXRjaGVyLmV2ZW505aSa5Liq5LqL5Lu25Yy65Z+fXHJcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudEZpZWxkcy5rZXlFeGlzdChmaWVsZCkpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V2ZW50RmllbGRzLmdldChmaWVsZCkuZXZlbnQodHlwZSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uY2UoZmllbGQ6c3RyaW5nLCB0eXBlOnN0cmluZywgY2FsbGVyOmFueSwgbWV0aG9kOkZ1bmN0aW9uLCBhcmdzPzphbnlbXSk6dm9pZHsvL+WwseavlEV2ZW50RGlzcGF0Y2hlci5vbmNl5aSa5Liq5LqL5Lu25Yy65Z+fXHJcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudEZpZWxkcy5rZXlFeGlzdChmaWVsZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRGaWVsZHMuc2V0KGZpZWxkLCBuZXcgTGF5YS5FdmVudERpc3BhdGNoZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V2ZW50RmllbGRzLmdldChmaWVsZCkub25jZSh0eXBlLCBjYWxsZXIsIG1ldGhvZCwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9mZihmaWVsZDpzdHJpbmcsIHR5cGU6c3RyaW5nLCBjYWxsZXI6YW55LCBmdW5jOkZ1bmN0aW9uKTp2b2lkey8v56e76Zmk5LqL5Lu25L6m5ZCs5ZmoXHJcbiAgICAgICAgdGhpcy5fZXZlbnRGaWVsZHMuZ2V0KGZpZWxkKS5vZmYodHlwZSwgY2FsbGVyLCBmdW5jKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2xvYmFse1xyXG4gICAgcHVibGljIHN0YXRpYyBVSVNldDpMYXlhLlNwcml0ZTsgICAgICAgIC8v5ri45oiP5Zy65pmv6YeM55qE5Lit5b+D5Yy65Z+f5Y6f54K5XHJcbiAgICBwdWJsaWMgc3RhdGljIFVJU2V0X3N1YjpMYXlhLlNwcml0ZTsgICAgLy/kuIrpnaLpgqPkuKpzcHJpdGXnmoTkuIDkuKrlrZDoioLngrnvvIzkuLrkuobkuI3miorlnLDlm77mk6bmjonvvIzlj6/ku6XlnKjov5nkuKroioLngrnph4znu5jlm75cclxuICAgIHB1YmxpYyBzdGF0aWMgTGlzdE9mT3BydDpzdHJpbmdbXSA9IFsvL+S+p+i+ueagj+mcgOimgeeUqOWIsOeahOWPr+mAieW5suWRmOWIl+ihqFxyXG4gICAgICAgIFwiYmlyZFwiLFxyXG4gICAgICAgIFwic2JcIlxyXG4gICAgXTtcclxufSIsIi8qKlxyXG4gKiDomb3nhLbliJflkJHph4/lkozooYzlkJHph4/pg73lsLHmmK/kuKrlrprplb/mlbDnu4RcclxuICog5L2G5oiR6L+Z6YeM6L+Y5piv5b2T5YiX5ZCR6YeP5ZCnXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29sb3VtVmVjdG9ye1xyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tQXJyYXkoYXJyOm51bWJlcltdKTpDb2xvdW1WZWN0b3J7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBDb2xvdW1WZWN0b3IoYXJyLmxlbmd0aCk7XHJcbiAgICAgICAgYXJyLmZvckVhY2goKGVsZSxpbmRleCk9PntcclxuICAgICAgICAgICAgcmVzdWx0LndyaXRlKGluZGV4LCBlbGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWFkb25seSBoZWlnaHQ6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfZGF0YTpudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGhlaWdodDpudW1iZXIpe1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdoaWxlKGhlaWdodCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YS5wdXNoKDApXHJcbiAgICAgICAgICAgIGhlaWdodCAtPSAxO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+WKoOWHj+S5mOmZpOayoeacieWHj+mZpFxyXG4gICAgcHVibGljIHBsdXModzpDb2xvdW1WZWN0b3IpOkNvbG91bVZlY3RvcntcclxuICAgICAgICBpZiAody5oZWlnaHQgIT09IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJOb3QgZnVubnkgZGlkbid0IGxhdWdoXCIsIFwiTm90IEZ1bm55IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQ6Q29sb3VtVmVjdG9yID0gdGhpcy5jbG9uZTtcclxuICAgICAgICB3Ll9kYXRhLmZvckVhY2goKGVsZSxpbmRleCk9PntcclxuICAgICAgICAgICAgcmVzdWx0Ll9kYXRhW2luZGV4XSArPSBlbGU7XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtdWx0aShjOm51bWJlcik6Q29sb3VtVmVjdG9ye1xyXG4gICAgICAgIGxldCByZXN1bHQ6Q29sb3VtVmVjdG9yID0gdGhpcy5jbG9uZTtcclxuICAgICAgICB0aGlzLl9kYXRhLmZvckVhY2goKGVsZSxpbmRleCk9PntcclxuICAgICAgICAgICAgcmVzdWx0Ll9kYXRhW2luZGV4XSA9IGMqZWxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8v5aKe5Yig5pS55p+l5rKh5pyJ5aKe5YigXHJcbiAgICBwdWJsaWMgd3JpdGUoaW5kZXg6bnVtYmVyLCB2YWx1ZTpudW1iZXIpOnZvaWR7XHJcbiAgICAgICAgdGhpcy5fZGF0YVtpbmRleF0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZChpbmRleDpudW1iZXIpOm51bWJlcntcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtpbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNvdmVyKHNvdXJjZTpDb2xvdW1WZWN0b3IpOnZvaWR7XHJcbiAgICAgICAgaWYgKHNvdXJjZS5oZWlnaHQgIT09IHRoaXMuaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oXCJOb3QgZnVubnkgZGlkbid0IGxhdWdoXCIsIFwiTm90IEZ1bm55IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNvdXJjZS5fZGF0YS5mb3JFYWNoKChlbGUsaW5kZXgpPT57XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFbaW5kZXhdID0gZWxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvL+WFtuS7luWHveaVsFxyXG4gICAgcHVibGljIHByaW50KCk6Q29sb3VtVmVjdG9ye1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2RhdGEuam9pbihcIlxcblwiKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjbG9uZSgpOkNvbG91bVZlY3RvcntcclxuICAgICAgICBsZXQgcmVzdWx0OkNvbG91bVZlY3RvciA9IG5ldyBDb2xvdW1WZWN0b3IodGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2RhdGEuZm9yRWFjaCgoZWxlLGluZGV4KT0+e1xyXG4gICAgICAgICAgICByZXN1bHQuX2RhdGFbaW5kZXhdID0gZWxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDomb3nhLbkuIDmjpLliJflkJHph4/lkozkuIDliJfooYzlkJHph4/pg73lj6/ku6XlvZPnn6npmLVcclxuICog5L2G6L+Z6YeM5piv5LiA5o6S5YiX5ZCR6YePXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWF0cml4e1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGhlaWdodDpudW1iZXI7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgd2lkdGg6bnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfZGF0YTpDb2xvdW1WZWN0b3JbXTtcclxuICAgIGNvbnN0cnVjdG9yKGhlaWdodDpudW1iZXIsIHdpZHRoOm51bWJlcil7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHdpZHRoOyBuICs9IDEpIHsvL+mbtuWQkemHj+a7oeS4ilxyXG4gICAgICAgICAgICB0aGlzLl9kYXRhLnB1c2gobmV3IENvbG91bVZlY3RvcihoZWlnaHQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL+WinuWIoOaUueafpeayoeacieWinuWIoFxyXG4gICAgcHVibGljIHdyaXRlQ29sb3VtKGluZGV4Om51bWJlcixjb2xvdW06Q29sb3VtVmVjdG9yKTp2b2lke1xyXG4gICAgICAgIHRoaXMuX2RhdGFbaW5kZXhdLmNvdmVyKGNvbG91bSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHdyaXRlKHJvdzpudW1iZXIsIGNvbDpudW1iZXIsIHZhbHVlOm51bWJlcik6dm9pZHtcclxuICAgICAgICBpZiAocm93ID49IHRoaXMuaGVpZ2h0IHx8IGNvbCA+PSB0aGlzLndpZHRoIHx8IHJvdyA8IDAgfHwgY29sIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFwiTm90IGZ1bm55IGRpZG4ndCBsYXVnaFwiLCBcIk5vdCBGdW5ueSBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RhdGFbY29sXS53cml0ZShyb3csIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZENvbG91bShpbmRleDpudW1iZXIpOkNvbG91bVZlY3RvcntcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtpbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlYWQocm93Om51bWJlciwgY29sOm51bWJlcik6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhW2NvbF0ucmVhZChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5Yqg5YeP5LmY6Zmk5rKh5pyJ5YeP6ZmkXHJcbiAgICBwdWJsaWMgdHJhbnNDb2xWZWN0b3IodjpDb2xvdW1WZWN0b3IpOkNvbG91bVZlY3RvcntcclxuICAgICAgICBpZiAodi5oZWlnaHQgIT09IHRoaXMud2lkdGgpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbihcIk5vdCBmdW5ueSBkaWRuJ3QgbGF1Z2hcIiwgXCJOb3QgRnVubnkgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBDb2xvdW1WZWN0b3IodGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHRoaXMud2lkdGg7IGNvbCArPSAxKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5wbHVzKHRoaXMuX2RhdGFbY29sXS5tdWx0aSh2LnJlYWQoY29sKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8v5YW25LuW5Ye95pWwXHJcbiAgICBwdWJsaWMgc3RyKCk6U3RyaW5ne1xyXG4gICAgICAgIGxldCByZXN1bHQ6U3RyaW5nID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCB0aGlzLmhlaWdodDsgcm93ICs9IDEpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgdGhpcy53aWR0aDsgY29sICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLl9kYXRhW2NvbF0ucmVhZChyb3cpICsgXCJcXHRcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQrPVwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHByaW50KCk6dm9pZHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0cigpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlNYXRoe1xyXG4gICAgLy9MYXlh5qih5Z2XXHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreS4pOS4quefqeW9ouWvueixoeaYr+WQpumHjeWPoFxyXG4gICAgICogQHBhcmFtIHJlYzAg5LiA5Liq55+p5b2iXHJcbiAgICAgKiBAcGFyYW0gcmVjMSDlj6bkuIDkuKrnn6nlvaJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBvdmVybGFwX1JlYyhyZWMwOkxheWEuUmVjdGFuZ2xlLCByZWMxOkxheWEuUmVjdGFuZ2xlKTpib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIHRoaXMub3ZlcmxhcF8yZChyZWMwLngscmVjMS54LHJlYzAud2lkdGgscmVjMS53aWR0aCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxhcF8yZChyZWMwLnkscmVjMS55LHJlYzAuaGVpZ2h0LHJlYzEuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcqOaMh+Wumue7mOWbvuiKgueCueS4ree7mOWItuefqeW9olxyXG4gICAgICogQHBhcmFtIHNwciDnu5jlm77oioLngrlcclxuICAgICAqIEBwYXJhbSByZWMg55+p5b2iXHJcbiAgICAgKiBAcGFyYW0gY29sb3Ig6aKc6ImyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZHJhd1JlYyhzcHI6TGF5YS5TcHJpdGUsIHJlYzpMYXlhLlJlY3RhbmdsZSwgY29sb3I6c3RyaW5nPVwiI2ZmZmZmZlwiKTp2b2lke1xyXG4gICAgICAgIHNwci5ncmFwaGljcy5kcmF3UmVjdChyZWMueCwgcmVjLnksIHJlYy53aWR0aCwgcmVjLmhlaWdodCwgY29sb3IsIFwiIzg4ODg4OFwiLCAyKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIC8vTGF5YeaooeWdl1xyXG5cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5Zyo5pWw6L205LiK5Lik5p2h57q/5piv5ZCm6YeN5Y+gXHJcbiAgICAgKiBAcGFyYW0gcG9pbnQwIOe6v+autTDnmoTlt6bkvqfnq6/ngrlcclxuICAgICAqIEBwYXJhbSBwb2ludDEg57q/5q61MeeahOW3puS+p+err+eCuVxyXG4gICAgICogQHBhcmFtIGxlbmd0aDAg57q/5q61MOeahOmVv+W6plxyXG4gICAgICogQHBhcmFtIGxlbmd0aDEg57q/5q61MeeahOmVv+W6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIG92ZXJsYXBfMmQocG9pbnQwOm51bWJlciwgcG9pbnQxOm51bWJlciwgbGVuZ3RoMDpudW1iZXIsIGxlbmd0aDE6bnVtYmVyKTpib29sZWFue1xyXG4gICAgICAgIHJldHVybiAgTXlNYXRoLmluY2x1ZGVfMmQocG9pbnQwLGxlbmd0aDAscG9pbnQxKSB8fFxyXG4gICAgICAgICAgICAgICAgTXlNYXRoLmluY2x1ZGVfMmQocG9pbnQwLGxlbmd0aDAscG9pbnQxK2xlbmd0aDEpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3lnKjmlbDovbTkuIrkuIDkuKrngrnmmK/lkKblpITkuo7kuIDmnaHnur/mrrXkuIpcclxuICAgICAqIEBwYXJhbSBsb2NhdGUg57q/5q615bem5L6n56uv54K55L2N572uXHJcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIOe6v+autemVv+W6plxyXG4gICAgICogQHBhcmFtIGRvdCDngrnkvY1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBpbmNsdWRlXzJkKGxvY2F0ZTpudW1iZXIsIGxlbmd0aDpudW1iZXIsIGRvdDpudW1iZXIpOmJvb2xlYW57XHJcbiAgICAgICAgcmV0dXJuIGRvdD49bG9jYXRlICYmIGRvdDw9bG9jYXRlK2xlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB1cExpbWl0IOS4iueVjFxyXG4gICAgICogQHBhcmFtIGxvTGltaXQg5LiL55WMXHJcbiAgICAgKiBAcmV0dXJucyDkuIrnlYzkuI7kuIvnlYzkuYvpl7TnmoTpmo/mnLrmlbTmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByYW5kb21JbnQodXBMaW1pdDpudW1iZXIsIGxvTGltaXQ6bnVtYmVyID0gMCk6bnVtYmVye1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkqKHVwTGltaXQtbG9MaW1pdCkgKyBsb0xpbWl0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGZyb250IOWOn+aVsOWtl1xyXG4gICAgICogQHBhcmFtIHNoaWZ0IOWinuWKoOmHj1xyXG4gICAgICogQHBhcmFtIGVuZCDlop7liqDkuIrpmZDvvIjoi6Xlop7liqDph4/kuLrotJ/vvIzliJnkuLrkuIvpmZDvvIlcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIG1vdmVUbyhmcm9udDpudW1iZXIsIHNoaWZ0Om51bWJlciwgZW5kOm51bWJlcik6bnVtYmVyIHtcclxuICAgICAgICBsZXQgcmVzdWx0Om51bWJlciA9IGZyb250ICsgc2hpZnQ7XHJcbiAgICAgICAgaWYgKHNoaWZ0PjAgJiYgcmVzdWx0PmVuZCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBlbmQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzaGlmdDwwICYmIHJlc3VsdDxlbmQpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gZW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YaS5rOh5o6S5bqPXHJcbiAgICAgKiDms6jmhI/ov5nkuKrnrpfms5XkvJrnm7TmjqXkv67mlLnljp/mlbDnu4RcclxuICAgICAqIEBwYXJhbSBzb3VyY2Ug5Y6f5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg5LyY5YWI5YC85Y+W5YC85Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gaW5jcmVhc2Ug5piv5ZCm5Y2H5bqP77yI6buY6K6k5Y2H5bqP77yJIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGJ1YmJsZVNvcnQoc291cmNlOmFueVtdLCB2YWx1ZTpGdW5jdGlvbiwgaW5jcmVhc2U6Ym9vbGVhbiA9IHRydWUpOnZvaWR7XHJcbiAgICAgICAgLy8gbGV0IHRpbWUgPSAwO1xyXG4gICAgICAgIGxldCBjb21wbGV0ZTpib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICBmb3IgKGxldCBuID0gc291cmNlLmxlbmd0aCAtIDE7IG4gPiAwOyBuIC09IDEpIHtcclxuICAgICAgICAgICAgY29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IobGV0IG0gPSAwOyBtIDwgbjsgbSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyOm51bWJlciA9IHZhbHVlKHNvdXJjZVttXSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dDpudW1iZXIgPSB2YWx1ZShzb3VyY2VbbSArIDFdKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmNyZWFzZT8oY3VyPm5leHQpOihjdXI8bmV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RvcmUgPSBzb3VyY2VbbV07XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlW21dID0gc291cmNlW20rMV07XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlW20gKyAxXSA9IHN0b3JlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aW1lICs9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG59XHJcblxyXG5cclxuIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXG5pbXBvcnQgVmlldz1MYXlhLlZpZXc7XHJcbmltcG9ydCBEaWFsb2c9TGF5YS5EaWFsb2c7XHJcbmltcG9ydCBTY2VuZT1MYXlhLlNjZW5lO1xudmFyIFJFRzogRnVuY3Rpb24gPSBMYXlhLkNsYXNzVXRpbHMucmVnQ2xhc3M7XG5leHBvcnQgbW9kdWxlIHVpIHtcclxuICAgIGV4cG9ydCBjbGFzcyBHYW1lU2NlbmVVSSBleHRlbmRzIFNjZW5lIHtcclxuXHRcdHB1YmxpYyBVSVNldDpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgU2lkZUJhcjpMYXlhLlNwcml0ZTtcbiAgICAgICAgY29uc3RydWN0b3IoKXsgc3VwZXIoKX1cclxuICAgICAgICBjcmVhdGVDaGlsZHJlbigpOnZvaWQge1xyXG4gICAgICAgICAgICBzdXBlci5jcmVhdGVDaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRTY2VuZShcIkdhbWVTY2VuZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBSRUcoXCJ1aS5HYW1lU2NlbmVVSVwiLEdhbWVTY2VuZVVJKTtcclxuICAgIGV4cG9ydCBjbGFzcyBMb2FkaW5nU2NlbmVVSSBleHRlbmRzIFNjZW5lIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwiTG9hZGluZ1NjZW5lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLkxvYWRpbmdTY2VuZVVJXCIsTG9hZGluZ1NjZW5lVUkpO1xyXG59XHIiXX0=
