var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Game_1 = require("./SceneScript/Game");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/Game.ts", Game_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1800;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/Game":18,"./SceneScript/Loading":19}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var SceneManager_1 = require("./SceneManager");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        new SceneManager_1.default();
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./SceneManager":17}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var KVPair = /** @class */ (function () {
    function KVPair() {
        this._list = {};
    }
    KVPair.prototype.edit = function (key, value) {
        this._list[key] = value;
    };
    KVPair.prototype.read = function (key) {
        return this._list[key];
    };
    return KVPair;
}());
exports.KVPair = KVPair;
var Node = /** @class */ (function () {
    function Node(item, next) {
        this.item = item;
        this.next = next;
    }
    return Node;
}());
var LinkList = /** @class */ (function () {
    function LinkList() {
        this._length = 0;
        this._head = new Node(null, null);
        this._tail = new Node(null, null);
    }
    Object.defineProperty(LinkList.prototype, "length", {
        //基础属性
        get: function () {
            // let result:number = 0;
            // let current:Node<E> = this._head;
            // while (current.next !== null) {
            //     result += 1;
            //     current = current.next;
            // }
            // return result;
            return this._length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkList.prototype, "isEmpty", {
        get: function () {
            return this._head.next === null;
        },
        enumerable: true,
        configurable: true
    });
    //增删改查
    //增
    LinkList.prototype.push = function (item) {
        var last = new Node(item, null);
        if (this.isEmpty) {
            this._head.next = last;
            this._tail.next = last;
        }
        else {
            this._tail.next.next = last;
            this._tail.next = last;
        }
        this._length += 1;
    };
    LinkList.prototype.unshift = function (item) {
        var first = new Node(item, null);
        if (this.isEmpty) {
            this._tail.next = first;
            this._head.next = first;
        }
        else {
            first.next = this._head.next;
            this._head.next = first;
        }
        this._length += 1;
    };
    LinkList.prototype.insert = function (index, item) {
        if (index < 0 || index > this._length) { //这句不一样
            return false;
        }
        if (index === this.length) {
            this.push(item);
            return true;
        }
        var current = this._head; //这句和其他遍历是不一样的，因为要选取到选定位置的前面一格
        for (var n = 0; n < index; n += 1) {
            current = current.next;
        }
        current.next = new Node(item, current.next);
        this._length += 1;
        return true;
    };
    //删
    LinkList.prototype.remove = function (index) {
        if (index < 0 || index >= this.length) {
            return null;
        }
        var current = this._head.next;
        for (var n = 0; n < index; n += 1) {
            current = current.next;
        }
        var item = current.item;
        current = null;
        this._length -= 1;
        return current.item;
    };
    LinkList.prototype.shift = function () {
        if (this.isEmpty) {
            return null;
        }
        var item = this._head.next.item;
        this._head.next = this._head.next.next;
        if (this.isEmpty) {
            this._tail.next = null;
        }
        this._length -= 1;
        return item;
    };
    //改
    LinkList.prototype.write = function (index, item) {
        if (index < 0 || index >= this.length) {
            return;
        }
        var current = this._head.next;
        for (var n = 0; n < index; n += 1) {
            current = current.next;
        }
        current.item = item;
    };
    //查
    LinkList.prototype.read = function (index) {
        if (index < 0 || index >= this.length) {
            return;
        }
        var current = this._head.next;
        for (var n = 0; n < index; n += 1) {
            current = current.next;
        }
        return current.item;
    };
    LinkList.prototype.search = function (item) {
        var result = [];
        this.foreach(function (ele, index) {
            if (ele === item) {
                result.push(index);
            }
        });
        return result;
    };
    /**
     * 判断链表中是否存在某一元素
     * @param item
     */
    LinkList.prototype.has = function (item) {
        var current = this._head.next;
        while (current != null) {
            if (current.item == item) {
                return true;
            }
            current = current.next;
        }
        return false;
    };
    //高阶函数
    LinkList.prototype.foreach = function (f) {
        var current = this._head.next;
        var num = 0;
        while (current !== null) {
            f(current.item, num, this);
            current = current.next;
            num += 1;
        }
    };
    /**
     * 请暂时不要使用这个函数，因为我也不知道它会不会爆炸
     * 除非你读过这个函数的源代码
     * @param f 判断元素优先级的回调函数
     * @param increase 是否升序，默认升序
     * @returns 返回一个排序的链表
     */
    LinkList.prototype.sortby = function (f, increase) {
        if (increase === void 0) { increase = true; }
        var priority = new LinkList();
        var sorted = new LinkList();
        priority.push(-0);
        sorted.push(null);
        var compare = increase ? function (a, b) { return a < b; } : function (a, b) { return a > b; };
        this.foreach(function (ele) {
            var currentPri = f(ele);
            var node = sorted._head.next;
            var priNode = priority._head.next;
            var foundPlace = false;
            while (node.next !== null) {
                // if (currentPri < priNode.next.item) {
                if (compare(currentPri, priNode.next.item)) {
                    node.next = new Node(ele, node.next);
                    priNode.next = new Node(currentPri, priNode.next);
                    foundPlace = true;
                    break;
                }
                node = node.next;
                priNode = priNode.next;
            }
            if (!foundPlace) {
                sorted.push(ele);
                priority.push(currentPri);
            }
        });
        sorted.shift();
        return sorted;
    };
    return LinkList;
}());
exports.LinkList = LinkList;
var PArray = /** @class */ (function () {
    function PArray(source, initPoint) {
        if (source === void 0) { source = []; }
        if (initPoint === void 0) { initPoint = -1; }
        this.arr = source;
        this.pointer = initPoint;
    }
    PArray.prototype.read = function () {
        return this.arr[this.pointer];
    };
    ;
    PArray.prototype.step = function () {
        this.pointer += 1;
    };
    Object.defineProperty(PArray.prototype, "out", {
        get: function () {
            return this.pointer < 0 || this.pointer >= this.arr.length;
        },
        enumerable: true,
        configurable: true
    });
    return PArray;
}());
exports.PArray = PArray;
var ArrayAlgo = /** @class */ (function () {
    function ArrayAlgo() {
    }
    /**
     * 输入的两个数组的每个index对应元素是否相等
     * @param arr0
     * @param arr1
     */
    ArrayAlgo.strictCompare = function (arr0, arr1) {
        if (arr0.length !== arr1.length) {
            return false;
        }
        for (var i = 0; i < arr0.length; i += 1) {
            if (!arr0[i].equals(arr1[i])) {
                return false;
            }
        }
        return true;
    };
    /**
     * 返回一个集合c，且使得它具有如下性质：
     * 对于每个存在于集合a中的元素，如果它不在集合b中，则它在集合c中
     * 即c=a-b
     * @param a
     * @param b
     */
    ArrayAlgo.findComplementSet = function (a, b) {
        var result = [];
        for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
            var ele = a_1[_i];
            if (ArrayAlgo.findEle(ele, b) === -1) {
                result.push(ele);
            }
        }
        ;
        //求相对补集a-b
        return result;
    };
    ArrayAlgo.findIntersectionSet = function (a, b) {
        //求交集a∩b
    };
    /**
     * 求ele在arr中的index，若未找到则返回-1
     * ele必须实现comparable接口
     * @param ele
     * @param arr
     */
    ArrayAlgo.findEle = function (ele, arr) {
        for (var i = 0; i < arr.length; i += 1) {
            if (ele.equals(arr[i])) {
                return i;
            }
        }
        return -1;
    };
    /**
     * 从arr中移除ele
     * 如果ele不存在则什么都不做
     * @param ele
     * @param arr
     */
    ArrayAlgo.removeEle = function (ele, arr) {
        var i = arr.indexOf(ele);
        if (i !== -1) {
            arr.splice(i, 1);
        }
        return arr;
    };
    return ArrayAlgo;
}());
exports.ArrayAlgo = ArrayAlgo;
// export class Box extends Laya.Rectangle{
//     public unitX:number;
//     public unitY:number;
//     constructor(){
//         super(0,0,0,0);
//     }
//     /**
//      * 就是……来一组（100个）随机的碰撞箱
//      * @param xRange 
//      * @param yRange 
//      * @param widRange 
//      * @param higRange
//      */
//     public static randomBoxes(xRange:number = 1200, yRange:number = 800, widRange:number = 300, higRange:number = 300):Box[]{
//         const rad:Function = MyMath.randomInt;
//         let result:Box[] = [];
//         for(let i = 0; i < 50; i += 1) {
//             result.push(new Box());
//             result[i].pos(rad(xRange), rad(yRange)).size(rad(widRange), rad(higRange));
//         }
//         return result;
//     }
//     public pos(x:number, y:number):Box{
//         this.x = x;
//         this.y = y;
//         return this;
//     }
//     public size(width:number, height:number):Box{
//         this.width = width;
//         this.height = height;
//         return this;
//     }
//     public intersects_X(rec:Box):boolean{
//         if (this.x < rec.x) {
//             return rec.intersects_X(this);
//         }
//         return  (this.x >= rec.x && this.x <= rec.right) ||
//                 (this.right >= rec.x && this.right <= rec.right)
//     }
//     public intersects_Y(rec:Box):boolean{
//         if (this.y<rec.y) {
//             return rec.intersects_Y(this);
//         }
//         return  (this.y >= rec.y && this.y <= rec.bottom) ||
//                 (this.bottom >= rec.y && this.bottom <= rec.bottom)
//     }
// }
// class MapNode<K,V>{
//     public key;
//     public value;
//     constructor(key:K, value:V){
//         this.key = key;
//         this.value = value;
//     }
// }
// export module Struc{
//     export class LinkList<E>{
//         private _head:Node<E>;
//         private _tail:Node<E>;
//         constructor(){
//             this._head = new Node<E>(null, null);
//             this._tail = new Node<E>(null, null);
//         }
//         //基础属性
//         public get length():number{
//             let result:number = 0;
//             let current:Node<E> = this._head;
//             while (current.next !== null) {
//                 result += 1;
//                 current = current.next;
//             }
//             return result;
//         }
//         public get isEmpty():boolean{
//             return this._head.next === null;
//         }
//         //增删改查
//         //增
//         public push(item:E):void{
//             let last:Node<E> = new Node<E>(item, null);
//             if (this.isEmpty) {
//                 this._head.next = last;
//                 this._tail.next = last;
//             } else {
//                 this._tail.next.next = last;
//                 this._tail.next = last;
//             }
//         }
//         public unshift(item:E):void{
//             let first:Node<E> = new Node<E>(item, null);
//             if (this.isEmpty) {
//                 this._tail.next = first;
//                 this._head.next = first;
//             } else {
//                 first.next = this._head.next.next;
//                 this._head.next = first;
//             }
//         }
//         public insert(index:number, item:E):boolean{
//             if (index < 0 || index > this.length) {//这句不一样
//                 return false;
//             }
//             if (index === this.length) {
//                 this.push(item);
//                 return true;
//             }
//             let current:Node<E> = this._head;//这句和其他遍历是不一样的，因为要选取到选定位置的前面一格
//             for (let n = 0; n < index; n += 1) {
//                 current = current.next;
//             }
//             current.next = new Node<E>(item, current.next);
//             return true;
//         }
//         //删
//         public remove(index:number):E{
//             if (index < 0 || index >= this.length) {
//                 return null;
//             }
//             let current:Node<E> = this._head.next;
//             for (let n = 0; n < index; n += 1) {
//                 current = current.next;
//             }
//             let item:E = current.item;
//             current = null;
//             return current.item;
//         }
//         public shift():E{
//             if (this.isEmpty) {
//                 return null;
//             }
//             let item = this._head.next.item;
//             this._head.next = this._head.next.next;
//             if (this.isEmpty) {
//                 this._tail.next = null;
//             }
//             return item;
//         }
//         //改
//         public write(index:number, item:E):void{
//             if (index < 0 || index >= this.length) {
//                 return;
//             }
//             let current:Node<E> = this._head.next;
//             for (let n = 0; n < index; n += 1) {
//                 current = current.next;
//             }
//             current.item = item;
//         }
//         //查
//         public read(index:number):E{
//             if (index < 0 || index >= this.length) {
//                 return;
//             }
//             let current:Node<E> = this._head.next;
//             for (let n = 0; n < index; n += 1) {
//                 current = current.next;
//             }
//             return current.item;
//         }
//         public search(item:E):number[]{
//             let result:number[] = [];
//             this.foreach((ele:E, index:number)=>{
//                 if (ele === item) {
//                     result.push(index);
//                 }
//             });
//             return result;
//         }
//         /**
//          * 判断链表中是否存在某一元素
//          * @param item 
//          */
//         public has(item: E):boolean{
//             let current = this._head.next;
//             while (current != null) {
//                 if (current.item == item) {
//                     return true;
//                 }
//                 current = current.next;
//             }
//             return false;
//         }
//         //高阶函数
//         public foreach(f:(ele:E, index:number, list:LinkList<E>)=>void):void{
//             let current = this._head.next;
//             let num:number = 0;
//             while (current !== null) {
//                 f(current.item, num, this);
//                 current = current.next;
//                 num += 1;
//             }
//         }
//         /**
//          * 请暂时不要使用这个函数，因为我也不知道它会不会爆炸
//          * 除非你读过这个函数的源代码
//          * @param f 判断元素优先级的回调函数
//          * @param increase 是否升序，默认升序
//          * @returns 返回一个排序的链表
//          */
//         public sortby(f:(ele:E)=>number, increase:boolean = true):LinkList<E>{
//             let priority:LinkList<number> = new LinkList<number>();
//             let sorted:LinkList<E> = new LinkList<E>();
//             priority.push(-0);
//             sorted.push(null);
//             let compare:(a:number,b:number)=>boolean = increase?(a,b)=>{return a < b;}:(a,b)=>{return a > b};
//             this.foreach((ele)=>{
//                 let currentPri = f(ele);
//                 let node:Node<E> = sorted._head.next;
//                 let priNode:Node<number> = priority._head.next;
//                 let foundPlace:boolean = false;
//                 while (node.next !== null) {
//                     // if (currentPri < priNode.next.item) {
//                     if (compare(currentPri, priNode.next.item)) {
//                         node.next = new Node<E>(ele, node.next);
//                         priNode.next = new Node<number>(currentPri, priNode.next);
//                         foundPlace = true;
//                         break;
//                     }
//                     node = node.next;
//                     priNode = priNode.next;
//                 }
//                 if (!foundPlace) {
//                     sorted.push(ele);
//                     priority.push(currentPri);
//                 }
//             });
//             sorted.shift();
//             return sorted;
//         }
//         // public bbSortBy(f:(ele:E)=>number, increase:boolean = true):LinkList<E>{
//         // }
//     }
//     export class Map<K,V>{
//         private _list:Array<MapNode<K,V>>
//         constructor(){
//             this._list = []
//         }
//         public get(key:K):V{
//             for (let ele of this._list){
//                 if (ele.key === key) {
//                     return ele.value
//                 }
//             }
//             return null
//         }
//         public getKeyByVal(val:V):K{
//             for (let ele of this._list) {
//                 if (ele.value === val) {
//                     return ele.key
//                 }
//             }
//             return null
//         }
//         public keyExist(key:K):boolean{
//             for (let ele of this._list) {
//                 if (ele.key === key) {
//                     return true
//                 }
//             }
//             return false
//         }
//         public set(key:K,value:V):boolean{
//             for (let n = 0; n < this._list.length; n += 1) {
//                 if (this._list[n].key === key) {
//                     this._list[n].value = value
//                     return false;
//                 }
//             }
//             this._list.push(new MapNode<K,V>(key,value))
//             return true;
//         }
//         public batchSet(keys:K[], values:V[]):boolean{
//             if (keys.length !== values.length) {
//                 return false;
//             }
//             for (let n = 0; n < keys.length; n += 1) {
//                 this.set(keys[n], values[n]);
//             }
//             return true;
//         }
//         public remove(key:K):boolean{
//             let count:number = 0;
//             for (let ele of this._list) {
//                 if (ele.key === key) {
//                     this._list.splice(count,1);
//                     return true
//                 }
//                 count += 1;
//             }
//             return false
//         }
//         public get length():number{
//             return this._list.length
//         }
//         public foreach(f:(k:K, v:V)=>void):void{
//             for (let ele of this._list) {
//                 f(ele.key, ele.value);
//             }
//             return;
//         }
//         public filter(f:(k:K,v:V)=>boolean):Map<K,V>{
//             let result = new Map<K,V>();
//             for (let ele of this._list) {
//                 if (f(ele.key, ele.value)){
//                     result.set(ele.key, ele.value);
//                 }
//             }
//             return result;
//         }
//     }
//     export class PointerList<E>{
//         private _list:Array<E> = [];
//         private _pointer:number = 0;
//         constructor(source:Array<E> = [], initPoint:number = 0){
//             source.forEach((ele)=>{
//                 this._list.push(ele);
//             })
//         }
//         get exceeding():boolean{
//             return this._pointer >= this._list.length || this._pointer < 0
//         }
//         /*
//         以下注释中，把数组看作横向排列的一系列元素
//         index = 0的元素在最左侧
//         */
//         read():E{//查看当前pointer所指的元素
//             return this._list[this._pointer]
//         }
//         step():E{//pointer向右移一步
//             this._pointer+=1;
//             return this.read();
//         }
//         to(place:number):PointerList<E>{//pointer移到指定位置
//             this._pointer = place
//             return this
//         }
//         push(data:E):PointerList<E>{//在数组末尾增加一个元素
//             this._list.push(data)
//             return this
//         }
//         set(index:number,data:E):PointerList<E>{//覆写数组特定index中的元素
//             this._list[index] = data
//             return this
//         }
//         next(shift:number = 1):E{
//             //读取位于当前pointer所指的元素右边若干格的元素
//             //shift默认为1，即当前pointer右边相邻的元素
//             //shift为负数时获取左侧的元素
//             return this._list[this._pointer+shift]
//         }
//         get length():number{//获取数组长度
//             return this._list.length
//         }
//         get last():E{//获取最后一项
//             return this._list[this._list.length-1]
//         }
//         get first():E{//获取首项
//             return this._list[0];
//         }
//         get pointer():number{//获取pointer
//             return this._pointer
//         }
//         get atEnd():boolean{//查看“pointer指向数组最右侧的元素”的真值
//             return this._pointer === this._list.length - 1
//         }
//     }
// }
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//////
var EventCentre = /** @class */ (function () {
    function EventCentre() {
        this._centre = new Laya.EventDispatcher();
    }
    EventCentre.init = function () {
        EventCentre.instance = new EventCentre();
        EventCentre.EType = new EType();
        EventCentre.init = function () { };
    };
    ;
    EventCentre.prototype.on = function (type, caller, listener, args) {
        this._centre.on(type, caller, listener, args);
    };
    EventCentre.prototype.event = function (type, args) {
        this._centre.event(type, args);
    };
    EventCentre.prototype.off = function (type, caller, listener) {
        this._centre.off(type, caller, listener);
    };
    return EventCentre;
}());
exports.EventCentre = EventCentre;
var EType = /** @class */ (function () {
    function EType() {
    }
    EType.prototype.LEAVE = function (pos, identity) {
        return identity + ":COLLISION_EVENT_LEAVE_FROM(" + pos.x + "|" + pos.y + ")";
    };
    EType.prototype.ENTRE = function (pos, identity) {
        return identity + ":COLLISION_EVENT_ENTRE_TO(" + pos.x + "|" + pos.y + ")";
    };
    return EType;
}());
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rec = /** @class */ (function (_super) {
    __extends(Rec, _super);
    function Rec(x, y, width, height) {
        return _super.call(this, x, y, width, height) || this;
    }
    return Rec;
}(Laya.Rectangle));
exports.Rec = Rec;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyMath = /** @class */ (function () {
    function MyMath() {
    }
    /**
     * 返回a/b的整数结果（小数部分舍去)
     * a，b如果不在正整数域，请确保阅读过此函数
     * |————|————|————|————|————|
     *     -1<---0<---1<---
     *      可以理解为在数轴上把结果向左映射
     * @param a
     * @param b
     */
    MyMath.intDivision = function (a, b) {
        return (a - a % b) / b;
    };
    /**
     * 在平面上求从指定出发点到指定终点作一条指定长度的线段，此线段的另一端点的坐标
     * （如果此线段的长度大于等于出发点到终点的距离，则输出终点的坐标）
     * @param from
     * @param end
     * @param movement
     */
    MyMath.moveTo = function (from, end, movement) {
        var xdis = end.x - from.x;
        var ydis = end.y - from.y;
        var distance = Math.sqrt(Math.pow((xdis), 2) + Math.pow((ydis), 2));
        if (movement >= distance) {
            return end;
        }
        var ratio = movement / distance;
        return new Vec2(from.x + xdis * ratio, from.y + ydis * ratio);
    };
    /**
     * MyMath.moveTo函数的另一个版本。这个版本会直接修改(from:Vec2)传入的对象本身，并判断最终from与end两个对象是否重合
     * @param from
     * @param end
     * @param movement
     */
    MyMath.moveToSideEffect = function (from, end, movement) {
        var xdis = end.x - from.x;
        var ydis = end.y - from.y;
        var distance = Math.sqrt(Math.pow((xdis), 2) + Math.pow((ydis), 2));
        if (movement >= distance) {
            from.x = end.x;
            from.y = end.y;
            return true;
        }
        var ratio = movement / distance;
        from.x = from.x + xdis * ratio;
        from.y = from.y + ydis * ratio;
        return false;
    };
    /**
     * MyMath.moveTo函数的另一个版本。返回直线速度在xy两轴上的分量
     * @param from
     * @param end
     * @param movement
     */
    MyMath.moveToComponent = function (from, end, movement) {
        var xdis = end.x - from.x;
        var ydis = end.y - from.y;
        var distance = Math.sqrt(Math.pow((xdis), 2) + Math.pow((ydis), 2));
        var ratio = movement / distance;
        return new Vec2(xdis * ratio, ydis * ratio);
    };
    return MyMath;
}());
exports.MyMath = MyMath;
var Vec2 = /** @class */ (function () {
    function Vec2(x, y) {
        this.x = x;
        this.y = y;
    }
    Vec2.listFromList = function (list) {
        var result = [];
        list.forEach(function (ele) {
            result.push(new Vec2(ele[0], ele[1]));
        });
        return result;
    };
    /**
     * 返回从此点到指定点的距离
     * @param end
     */
    Vec2.prototype.distanceTo = function (end) {
        return Math.pow((Math.pow((end.x - this.x), 2) + Math.pow((end.y - this.y), 2)), 0.5);
    };
    /**
     * 以输入坐标为中心进行顺时针90度旋转
     * （未完成）
     * @param centre
     */
    Vec2.prototype.rotateClockwise = function (centre) {
        return this;
    };
    /**
     * 返回此向量的复制
     */
    Vec2.prototype.clone = function () {
        return new Vec2(this.x, this.y);
    };
    Vec2.prototype.equals = function (ele) {
        return this.x === ele.x && this.y === ele.y;
    };
    return Vec2;
}());
exports.Vec2 = Vec2;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MySymbol = /** @class */ (function () {
    function MySymbol() {
        this._data = MySymbol.count;
        MySymbol.count += 1;
    }
    Object.defineProperty(MySymbol.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    MySymbol.count = 0;
    return MySymbol;
}());
exports.MySymbol = MySymbol;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Position_1 = require("./ActorModules/Position");
var ColiMessage_1 = require("./ActorModules/ColiMessage");
var Profile_1 = require("./ActorModules/Profile");
var Symbol_1 = require("../../../OneFileModules/Symbol");
// import { GridSpace } from "./ActorModules/GridSpace";
var ActorIdentity = /** @class */ (function () {
    function ActorIdentity() {
        this.ACTOR = "ACTOR";
        this.ENEMY = "ENEMY";
        this.OPERATOR = "OPERATOR";
    }
    return ActorIdentity;
}());
exports.ActorIdentity = ActorIdentity;
var Actor = /** @class */ (function () {
    function Actor() {
        this._identity = Actor.Identity.ACTOR; //默认身份为Actor
        this.pos = new Position_1.Pos(); //质点模块
        this.grid = new ColiMessage_1.ColiEmit(0, 0); //碰撞事件发布模块
        this.profile = new Profile_1.Profile(); //基本属性合集
        this.symbol = new Symbol_1.MySymbol();
    }
    Object.defineProperty(Actor.prototype, "identity", {
        get: function () { return this._identity; },
        enumerable: true,
        configurable: true
    });
    Actor.Identity = new ActorIdentity(); //Actor身份enum
    return Actor;
}());
exports.default = Actor;
},{"../../../OneFileModules/Symbol":7,"./ActorModules/ColiMessage":9,"./ActorModules/Position":11,"./ActorModules/Profile":12}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyMath_1 = require("../../../../OneFileModules/MyMath");
var ExtendLaya_1 = require("../../../../OneFileModules/ExtendLaya");
var DataStructure_1 = require("../../../../OneFileModules/DataStructure");
var EventCentre_1 = require("../../../../OneFileModules/EventCentre");
var Actor_1 = require("../Actor");
/**
 * 碰撞消息发布者
 */
var ColiEmit = /** @class */ (function () {
    function ColiEmit(x, y, width, height) {
        if (width === void 0) { width = ColiEmit.GLOBAL_UNIT_SUBWIDTH; }
        if (height === void 0) { height = ColiEmit.GLOBAL_UNIT_SUBHEIGHT; }
        this._pastSet = []; //此方块上一次存在于哪一点
        this._rec = new ExtendLaya_1.Rec(x, y, width, height);
    }
    /**
     * 返回所有目前自身所处的方格
     */
    ColiEmit.prototype.findIntersect = function () {
        var _a = [
            MyMath_1.MyMath.intDivision(this._rec.x, ColiEmit.GLOBAL_UNIT_WIDTH),
            MyMath_1.MyMath.intDivision(this._rec.y, ColiEmit.GLOBAL_UNIT_HEIGHT),
            MyMath_1.MyMath.intDivision(this._rec.right, ColiEmit.GLOBAL_UNIT_WIDTH),
            MyMath_1.MyMath.intDivision(this._rec.bottom, ColiEmit.GLOBAL_UNIT_HEIGHT)
        ], left = _a[0], top = _a[1], right = _a[2], bottom = _a[3];
        var result = [];
        for (var hori = left; hori <= right; hori += 1) {
            for (var verti = top; verti <= bottom; verti += 1) {
                result.push(new MyMath_1.Vec2(hori, verti));
            }
        }
        return result;
    };
    ColiEmit.prototype.pos = function (x, y) {
        this._rec.x = x;
        this._rec.y = y;
        return this;
    };
    ColiEmit.prototype.size = function (width, height) {
        this._rec.width = width;
        this._rec.height = height;
        return this;
    };
    ColiEmit.prototype.event = function (publisher, identity) {
        if (identity === void 0) { identity = Actor_1.default.Identity.ACTOR; }
        var current = this.findIntersect(); //当前碰撞集合
        //this._pastSet//历史碰撞集合
        //离开：处于历史碰撞集合，但不处于当前碰撞集合的元素
        var leave = DataStructure_1.ArrayAlgo.findComplementSet(this._pastSet, current);
        //进入：处于当前碰撞集合，但不处于历史碰撞集合的元素
        var entre = DataStructure_1.ArrayAlgo.findComplementSet(current, this._pastSet);
        //发布事件
        // console.log("离开");
        leave.forEach(function (ele) {
            EventCentre_1.EventCentre.instance.event(EventCentre_1.EventCentre.EType.LEAVE(ele, identity), publisher);
        });
        // console.log("进入");
        entre.forEach(function (ele) {
            EventCentre_1.EventCentre.instance.event(EventCentre_1.EventCentre.EType.ENTRE(ele, identity), publisher);
        });
        this._pastSet = current; //更新历史碰撞集合为当前碰撞集合
    };
    ;
    ColiEmit.GLOBAL_UNIT_WIDTH = 100; //全局单位宽
    ColiEmit.GLOBAL_UNIT_HEIGHT = 100; //全局单位高
    ColiEmit.GLOBAL_UNIT_SUBWIDTH = 90; //全局内部单位宽
    ColiEmit.GLOBAL_UNIT_SUBHEIGHT = 90; //全局内部单位高
    return ColiEmit;
}());
exports.ColiEmit = ColiEmit;
/**
 * 碰撞消息接收者
 * 可以通过setDetection监控指定点，指定Identity的进入和离开事件
 * 可以通过offDetection撤销指定点的监控
 * 这个不能直接用，要继承一层把onLeave和onEntre函数重写之后才能用
 */
var ColiReceiver = /** @class */ (function () {
    function ColiReceiver(width, height) {
        /*
        这里的任何矩阵都可以用键值对替代。x与y两个参数可以生成永不重复的键
    
        */
        this._detectionMatrix = []; //记录哪个坐标已被监控
        this._cancellationMatrix = []; //存放用于取消监听的函数
        this._width = width;
        this._height = height;
        for (var w = 0; w < width; w += 1) {
            this._detectionMatrix[w] = [];
            this._cancellationMatrix[w] = [];
            for (var h = 0; h < height; h += 1) {
                this._detectionMatrix[w][h] = false;
                this._cancellationMatrix[w][h] = [];
            }
        }
    }
    ColiReceiver.prototype.detectionExist = function (position) {
        return this._detectionMatrix[position.x][position.y];
    };
    /**
     * 此方法提供给此类的子类重写
     * 每当此实例监控的进入碰撞事件在已启用监听的坐标发生时，此函数将被调用
     * @param actor
     * @param position
     */
    ColiReceiver.prototype.onEntre = function (actor, position) {
    };
    ////
    /**
     * 此方法提供给此类的子类重写
     * 每当此实例监控的进入碰撞事件在已启用监听的坐标发生时，此函数将被调用
     * @param actor
     * @param position
     */
    ColiReceiver.prototype.onLeave = function (actor, position) {
    };
    /**
     * 在指定坐标上设置监听碰撞事件
     * identity可以在Actor.Identity里选择
     * 那我为什么不写enum呢……
     */
    ColiReceiver.prototype.setDetection = function (position, identity) {
        var _this = this;
        if (this.detectionExist(position)) { //如果在此处已存在监控，则取消监控
            console.log("setDetection函数不能在同一个坐标多次监控，请查看ColiReciever类");
            return;
        }
        if (position.x >= this._width || position.x < 0 ||
            position.y > this._height || position.y < 0) { //如果监控位置超出边界，则取消监控
            return;
        }
        position = position.clone(); //复制位置对象以防止传址问题
        var detector = []; //这是监听函数，存起来准备撤除监听时用
        //设置监听事件
        detector[0] = function (actor) {
            _this.onEntre(actor, position);
        };
        detector[1] = function (actor) {
            _this.onLeave(actor, position);
        };
        EventCentre_1.EventCentre.instance.on(EventCentre_1.EventCentre.EType.ENTRE(position, identity), this, detector[0]);
        EventCentre_1.EventCentre.instance.on(EventCentre_1.EventCentre.EType.LEAVE(position, identity), this, detector[1]);
        //设置监听事件
        this._cancellationMatrix[position.x][position.y].push(function () {
            EventCentre_1.EventCentre.instance.off(EventCentre_1.EventCentre.EType.ENTRE(position, identity), _this, detector[0]);
        }, function () {
            EventCentre_1.EventCentre.instance.off(EventCentre_1.EventCentre.EType.LEAVE(position, identity), _this, detector[1]);
        });
        this._detectionMatrix[position.x][position.y] = true; //将此坐标的状态设为“已被监听”
    };
    /**
     * 移除指定坐标的碰撞事件监听
     * @param position
     */
    ColiReceiver.prototype.offDetection = function (position) {
        this._cancellationMatrix[position.x][position.y].forEach(function (ele) {
            ele();
        });
        this._cancellationMatrix[position.x][position.y] = []; //删除此处的预存函数
        this._detectionMatrix[position.x][position.y] = false; //将此坐标设为未监听
    };
    return ColiReceiver;
}());
exports.ColiReceiver = ColiReceiver;
},{"../../../../OneFileModules/DataStructure":3,"../../../../OneFileModules/EventCentre":4,"../../../../OneFileModules/ExtendLaya":5,"../../../../OneFileModules/MyMath":6,"../Actor":8}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ColiMessage_1 = require("./ColiMessage");
var DataStructure_1 = require("../../../../OneFileModules/DataStructure");
var Actor_1 = require("../Actor");
var StateType;
(function (StateType) {
    StateType["WAIT"] = "WAIT";
    StateType["PREPARE"] = "PREPARE";
    StateType["AFTER_ATK"] = "AFTER_ATK";
})(StateType || (StateType = {}));
var Wait = /** @class */ (function () {
    function Wait() {
        this.time = 0;
    }
    Wait.prototype.reset = function () {
        this.time = 0;
    };
    Wait.prototype.execute = function (machine, seeker, oprt) {
        if (seeker.captureList.length !== 0) { //如果能够找到敌人
            var prepare = machine.stateList.read(StateType.PREPARE);
            prepare.reset();
            //这里以后会修改，是根据enemy到终点的距离选择focus
            prepare.focus = seeker.captureList[0]; //设定prepare阶段所瞄准的敌人
            seeker.focus = prepare.focus; //设定seeker“额外关注”的敌人
            machine.curState = prepare; //切换状态机的当前状态
        }
        else { //如果找不到敌人
            this.time = 0;
        }
        //如果seeker中存在敌人，reset Prepare并跳转到Prepare阶段
    };
    return Wait;
}());
var Prepare = /** @class */ (function () {
    function Prepare() {
        this.time = 0;
    }
    Prepare.prototype.reset = function () {
        this.time = 0;
        this.focus = null;
    };
    Prepare.prototype.execute = function (machine, seeker, oprt) {
        //如果focus一致
        //增添1计数
        //如果计数已满
        //进行攻击并跳转到AfterAtk阶段
        //如果focus不一致
        //如果seeker中仍存在敌人
        //重新回到Prepare阶段
        //如果seeker中没有敌人
        //跳转到Wait阶段
        if (this.focus === seeker.focus) { //focus 一致
            this.time += 1;
            if (this.time >= oprt.profile.PrepTime) {
                console.log("Attack"); //进行攻击
                //进入后摇状态
                var after = machine.stateList.read(StateType.AFTER_ATK);
                after.reset();
                machine.curState = after;
            }
        }
        else { //focus 不一致
            if (seeker.captureList.length !== 0) { //找到新目标
                //重设前摇状态
                this.reset();
                //寻找合适的enemy
                this.focus = seeker.captureList[0];
                seeker.focus = this.focus;
            }
            else { //未找到目标
                //进入等待状态
                var wait = machine.stateList.read(StateType.WAIT);
                wait.reset();
                machine.curState = wait;
            }
        }
    };
    return Prepare;
}());
var After_Atk = /** @class */ (function () {
    function After_Atk() {
        this.time = 0;
    }
    After_Atk.prototype.reset = function () {
        this.time = 0;
    };
    After_Atk.prototype.execute = function (machine, seeker, oprt) {
        this.time += 1; //单纯计个数，满了就返回wait状态
        if (this.time >= oprt.profile.AfterTime) {
            var wait = machine.stateList.read(StateType.WAIT);
            wait.reset();
            machine.curState = wait;
        }
    };
    return After_Atk;
}());
var OprtStateMachine = /** @class */ (function () {
    function OprtStateMachine(seeker) {
        this.stateList = new DataStructure_1.KVPair();
        this.seeker = seeker;
        this.curState = new Wait();
        this.stateList.edit(StateType.WAIT, this.curState);
        this.stateList.edit(StateType.PREPARE, new Prepare());
        this.stateList.edit(StateType.AFTER_ATK, new After_Atk());
    }
    OprtStateMachine.prototype.execute = function (oprt) {
        this.curState.execute(this, this.seeker, oprt);
    };
    return OprtStateMachine;
}());
exports.OprtStateMachine = OprtStateMachine;
var EnemySeeker = /** @class */ (function (_super) {
    __extends(EnemySeeker, _super);
    //这注释真的大坨
    function EnemySeeker(width, height, range) {
        if (width === void 0) { width = 10; }
        if (height === void 0) { height = 10; }
        if (range === void 0) { range = []; }
        var _this = _super.call(this, width, height) || this;
        _this._countList = new DataStructure_1.KVPair(); //记录每一个Enemy的进入次数
        _this._range = range;
        _this._range.forEach(function (ele) {
            _this.setDetection(ele, Actor_1.default.Identity.ENEMY);
        });
        return _this;
    }
    EnemySeeker.prototype.onEntre = function (enemy, position) {
        var count = this._countList.read(enemy.symbol.data);
        if (count === undefined || count <= 0) { //此敌人未被记录
            this.captureList.push(enemy);
            this._countList.edit(enemy.symbol.data, 1);
        }
        else { //此敌人已被记录
            this._countList.edit(enemy.symbol.data, count + 1);
        }
    };
    EnemySeeker.prototype.onLeave = function (enemy, position) {
        var count = this._countList.read(enemy.symbol.data);
        if (count === undefined) {
            //理论上不会有未捕获的敌人还向这里发布离开事件
            //但是还是加个判空以防万一
            return;
        }
        if (count > 1) { //这个目标离开了一个监控中的区域，但还处于至少一个监控区域中
            this._countList.edit(enemy.symbol.data, count - 1);
        }
        else { //这个目标离开了所有监控中的区域
            this._countList.edit(enemy.symbol.data, 0); //进入次数设为0
            DataStructure_1.ArrayAlgo.removeEle(enemy, this.captureList); //从列表里删掉
            if (this.focus === enemy) { //如果这个enemy在被focus就把focus删掉
                this.focus = null;
            }
        }
    };
    /**
     *
     * @param source 全局Enemy分布
     * @param centre 旋转中心
     * @param rotateTimes 要顺时针旋转多少次
     */
    EnemySeeker.prototype.rotateClockwise = function (source, centre, rotateTimes) {
        if (rotateTimes === void 0) { rotateTimes = 1; }
    };
    return EnemySeeker;
}(ColiMessage_1.ColiReceiver));
exports.EnemySeeker = EnemySeeker;
var TTTT = /** @class */ (function () {
    function TTTT() {
        // let list = new KVPair<Oprt, string>();
        // let k = new Oprt();
        // list.edit(k, "ab");
        // console.log(list);
    }
    return TTTT;
}());
exports.TTTT = TTTT;
},{"../../../../OneFileModules/DataStructure":3,"../Actor":8,"./ColiMessage":9}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyMath_1 = require("../../../../OneFileModules/MyMath");
/**
 * Pos类描述位置并提供移动所需的接口
 */
var Pos = /** @class */ (function () {
    function Pos() {
        // public autoSwitchTarget:boolean = true;
        this.data = new MyMath_1.Vec2(0, 0); //位置
        this.target = new MyMath_1.Vec2(0, 0); //目标
        this.speed = 0; //速度
        this.approach = 0; //逼近次数
        this.vecSpeed = new MyMath_1.Vec2(0, 0); //分量速度
        this._arrived = false; //已到达目的地(每次设置新目的地时设为false)
    }
    Object.defineProperty(Pos.prototype, "arrived", {
        get: function () { return this._arrived; } //获取是否已到达的信息
        ,
        enumerable: true,
        configurable: true
    });
    /**
     * 设置目的地并重设分量速度
     * @param target
     */
    Pos.prototype.setTarget = function (target) {
        this.target = target;
        this.aim();
    };
    /**
     * 设置直线速度并重设分量速度
     * @param speed
     */
    Pos.prototype.setSpeed = function (speed) {
        this.speed = speed;
        this.aim();
    };
    /**
     * 计算移动参数,并将_arrived设为false
     * 将会重设分量速度和逼近次数
     */
    Pos.prototype.aim = function () {
        this.vecSpeed = MyMath_1.MyMath.moveToComponent(this.data, this.target, this.speed);
        this.approach = this.data.distanceTo(this.target) / this.speed;
        this._arrived = false;
    };
    /**
     * 向目标点移动一次
     */
    Pos.prototype.move = function () {
        this.approach -= 1;
        if (this.approach <= 0) {
            this.data.x = this.target.x;
            this.data.y = this.target.y;
            this._arrived = true;
            return;
        }
        this.data.x = this.data.x + this.vecSpeed.x;
        this.data.y = this.data.y + this.vecSpeed.y;
        return;
    };
    return Pos;
}());
exports.Pos = Pos;
},{"../../../../OneFileModules/MyMath":6}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Profile = /** @class */ (function () {
    function Profile() {
        this.PrepTime = 10; //前摇时间
        this.AfterTime = 10; //后摇时间
    }
    return Profile;
}());
exports.Profile = Profile;
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Actor_1 = require("./Actor");
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    function Enemy() {
        return _super.call(this) || this;
    }
    return Enemy;
}(Actor_1.default));
exports.Enemy = Enemy;
},{"./Actor":8}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Enemy_1 = require("./Actor/Enemy");
var MyMath_1 = require("../../OneFileModules/MyMath");
var Actor_1 = require("./Actor/Actor");
var DataStructure_1 = require("../../OneFileModules/DataStructure");
var ColiMessage_1 = require("./Actor/ActorModules/ColiMessage");
var EnemyMatrix = /** @class */ (function (_super) {
    __extends(EnemyMatrix, _super);
    function EnemyMatrix(width, height) {
        var _this = _super.call(this, width, height) || this;
        _this._matrix = [];
        for (var w = 0; w < width; w += 1) {
            _this._matrix[w] = [];
            for (var h = 0; h < height; h += 1) {
                _this._matrix[w][h] = [];
                _this.setDetection(new MyMath_1.Vec2(w, h), Actor_1.default.Identity.ENEMY);
            }
        }
        return _this;
    }
    EnemyMatrix.prototype.checkPoint = function (x, y) {
        return this._matrix[x][y];
    };
    /**
     * Overwrite
     */
    EnemyMatrix.prototype.onEntre = function (actor, position) {
        var list = this._matrix[position.x][position.y];
        if (list.indexOf(actor) !== -1) { //如果此Enemy已经存在于这一格，则终止执行
            return;
        }
        list.push(actor);
    };
    /**
     * Overwrite
     *
     */
    EnemyMatrix.prototype.onLeave = function (actor, position) {
        DataStructure_1.ArrayAlgo.removeEle(actor, this._matrix[position.x][position.y]);
    };
    return EnemyMatrix;
}(ColiMessage_1.ColiReceiver));
var PathInfo = /** @class */ (function () {
    function PathInfo() {
        this._collection = {};
    }
    PathInfo.prototype.add = function (name, path) {
        if (this._collection[name] !== undefined) { //this path is already defined
            return false;
        }
        this._collection[name] = path;
    };
    PathInfo.prototype.read = function (name) {
        return this._collection[name];
    };
    return PathInfo;
}());
/**
 * 敌人对象管理中心
 *
 */
var EnemyMgr = /** @class */ (function () {
    function EnemyMgr() {
        this.pathInfo = new PathInfo();
        this.enemyOnStage = []; //已经处于战场上的敌人
        this.enemyOffStage = []; //进入战场前的敌人
        this.enemyDeadZone = []; //已死亡的敌人
        this.pathInfo.add("default", MyMath_1.Vec2.listFromList([
            [500, 500],
            [39, 558],
            [0, 0],
            [300, 400],
            [900, 900],
            [900, 0],
            [400, 114]
        ]));
        this._testLayer = Laya.stage.addChild(new Laya.Sprite());
        var e = new Enemy_1.Enemy();
        e.pos.setSpeed(5);
        this.enemyToStage(e, this.pathInfo.read("default"));
        console.log(e);
        //上面这些都不重要
        this.matrix = new EnemyMatrix(10, 10); //这里应该是两个从数据库中得到的数字
    }
    EnemyMgr.prototype.update = function () {
        this.moveAllEnemy(); //移动所有的enemy
        this.test();
    };
    /**
     * 此函数将一个敌人移入onStage区域
     * @param enemy
     */
    EnemyMgr.prototype.enemyToStage = function (enemy, path) {
        this.enemyOnStage.push(enemy);
        enemy.correspondedPath = path;
        enemy.pathSegCount = 1;
        enemy.pos.data = path[0].clone();
        enemy.pos.setTarget(path[1]);
        // console.log(path[0], enemy.pos.data);
    };
    /**
     * 移动所有在场上的enemy对象
     * 发布移动事件
     */
    EnemyMgr.prototype.moveAllEnemy = function () {
        var enemy = this.enemyOnStage[0];
        enemy.pos.setTarget(new MyMath_1.Vec2(Laya.stage.mouseX, Laya.stage.mouseY));
        enemy.pos.move();
        enemy.grid.pos(enemy.pos.data.x, enemy.pos.data.y);
        enemy.grid.event(enemy, Actor_1.default.Identity.ENEMY);
        if (Math.random() < 10) {
            return;
        }
        for (var _i = 0, _a = this.enemyOnStage; _i < _a.length; _i++) {
            var enemy_1 = _a[_i];
            if (enemy_1.pos.arrived) {
                enemy_1.pathSegCount += 1;
                if (enemy_1.pathSegCount >= enemy_1.correspondedPath.length) {
                    //此敌人已到达终点
                    continue;
                }
                enemy_1.pos.setTarget(enemy_1.correspondedPath[enemy_1.pathSegCount]);
            }
            enemy_1.pos.move();
            enemy_1.grid.pos(enemy_1.pos.data.x, enemy_1.pos.data.y);
            enemy_1.grid.event(enemy_1, Actor_1.default.Identity.ENEMY);
        }
    };
    EnemyMgr.prototype.test = function () {
        var _this = this;
        this._testLayer.graphics.clear();
        this.enemyOnStage.forEach(function (ele) {
            _this._testLayer.graphics.drawRect(ele.pos.data.x, ele.pos.data.y, 10, 10, "#ff0000");
        });
    };
    return EnemyMgr;
}());
exports.default = EnemyMgr;
},{"../../OneFileModules/DataStructure":3,"../../OneFileModules/MyMath":6,"./Actor/Actor":8,"./Actor/ActorModules/ColiMessage":9,"./Actor/Enemy":13}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OprtMgr = /** @class */ (function () {
    function OprtMgr() {
        this._OprtList = [];
    }
    OprtMgr.prototype.update = function () {
        this._OprtList.forEach(function (ele) {
            ele.state.execute(ele);
        });
    };
    return OprtMgr;
}());
exports.default = OprtMgr;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var OprtMgr_1 = require("./Managers/OprtMgr");
var EnemyMgr_1 = require("./Managers/EnemyMgr");
var MyMath_1 = require("../OneFileModules/MyMath");
var Actor_1 = require("./Managers/Actor/Actor");
var EventCentre_1 = require("../OneFileModules/EventCentre");
var ColiMessage_1 = require("./Managers/Actor/ActorModules/ColiMessage");
var DataStructure_1 = require("../OneFileModules/DataStructure");
var ColiReporter = /** @class */ (function (_super) {
    __extends(ColiReporter, _super);
    function ColiReporter() {
        var _this = _super.call(this, 10, 10) || this;
        _this.inList = [];
        _this.layer = new Laya.Sprite();
        for (var w = 0; w < 10; w += 1) {
            for (var h = 0; h < 10; h += 1) {
                _this.setDetection(new MyMath_1.Vec2(w, h), Actor_1.default.Identity.ENEMY);
            }
        }
        Laya.stage.addChild(_this.layer);
        _this.layer.zOrder = -10;
        return _this;
    }
    ColiReporter.prototype.onEntre = function (actor, pos) {
        // console.log("Enter" + pos.x + "|" + pos.y);
        this.inList.push(pos);
        this.render();
    };
    ColiReporter.prototype.onLeave = function (actor, pos) {
        var index = DataStructure_1.ArrayAlgo.findEle(pos, this.inList);
        if (index !== -1) {
            this.inList.splice(index, 1);
        }
        this.render();
        // console.log("Leave" + pos.x + "|" + pos.y);
    };
    ColiReporter.prototype.render = function () {
        var _this = this;
        this.layer.graphics.clear();
        this.inList.forEach(function (ele) {
            _this.layer.graphics.drawRect(ele.x * ColiMessage_1.ColiEmit.GLOBAL_UNIT_WIDTH, ele.y * ColiMessage_1.ColiEmit.GLOBAL_UNIT_HEIGHT, ColiMessage_1.ColiEmit.GLOBAL_UNIT_WIDTH, ColiMessage_1.ColiEmit.GLOBAL_UNIT_HEIGHT, "#ff0000");
        });
    };
    return ColiReporter;
}(ColiMessage_1.ColiReceiver));
/**
 * 这是游戏本体
 * 包含：
 * 敌人对象管理中心
 * 干员对象管理中心
 */
var RhodesGame = /** @class */ (function () {
    function RhodesGame() {
        EventCentre_1.EventCentre.init();
        this.reporter = new ColiReporter();
        console.log(this.reporter);
        //init stage
        this.oprtMgr = new OprtMgr_1.default();
        this.enemyMgr = new EnemyMgr_1.default();
        Laya.timer.loop(20, this, this.update);
        //test 
    }
    RhodesGame.prototype.update = function () {
        this.enemyMgr.update();
    };
    return RhodesGame;
}());
exports.default = RhodesGame;
},{"../OneFileModules/DataStructure":3,"../OneFileModules/EventCentre":4,"../OneFileModules/MyMath":6,"./Managers/Actor/Actor":8,"./Managers/Actor/ActorModules/ColiMessage":9,"./Managers/EnemyMgr":14,"./Managers/OprtMgr":15}],17:[function(require,module,exports){
"use strict";
// import EventCentre from "./Toybox/EventCentre";
// import Database from "./Toybox/Database";
Object.defineProperty(exports, "__esModule", { value: true });
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        // EventCentre.init();
        // Database.init();
        //初始化事件中心和数据库
        this.loadingScene = "LoadingScene.scene";
        this.gameScene = "GameScene.scene";
        // Laya.Scene.open(this.loadingScene);//打开加载场景
        Laya.Scene.open(this.gameScene);
        // EventCentre.instance.once("Init", "Regular", this, ()=>{//监听加载完毕事件
        //     Laya.Scene.open(this.gameScene);
        // });
    }
    return SceneManager;
}());
exports.default = SceneManager;
},{}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var RhodesGame_1 = require("../Rhodes_Game/RhodesGame");
var OprtAtk_1 = require("../Rhodes_Game/Managers/Actor/ActorModules/OprtAtk");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super.call(this) || this;
        _this._pause = false;
        var centre = new Laya.EventDispatcher();
        new OprtAtk_1.TTTT();
        _this.rhodes = new RhodesGame_1.default();
        return _this;
        // Laya.timer.loop(20,this,this.update);
    }
    Game.prototype.update = function () {
        // this.rhodes.update();
    };
    //全局数据（数据库类完成后将被替代）
    Game.frameLength = 20; //帧长度
    return Game;
}(layaMaxUI_1.ui.GameSceneUI));
exports.default = Game;
},{"../Rhodes_Game/Managers/Actor/ActorModules/OprtAtk":10,"../Rhodes_Game/RhodesGame":16,"../ui/layaMaxUI":20}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        //加载游戏设置，敌人数据库，干员数据库
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../ui/layaMaxUI":20}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameSceneUI = /** @class */ (function (_super) {
        __extends(GameSceneUI, _super);
        function GameSceneUI() {
            return _super.call(this) || this;
        }
        GameSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameScene");
        };
        return GameSceneUI;
    }(Scene));
    ui.GameSceneUI = GameSceneUI;
    REG("ui.GameSceneUI", GameSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
