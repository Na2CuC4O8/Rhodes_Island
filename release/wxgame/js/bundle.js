var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Game_1 = require("./SceneScript/Game");
var Loading_1 = require("./SceneScript/Loading");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("SceneScript/Game.ts", Game_1.default);
        reg("SceneScript/Loading.ts", Loading_1.default);
    };
    GameConfig.width = 1800;
    GameConfig.height = 900;
    GameConfig.scaleMode = "noscale";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "LoadingScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./SceneScript/Game":4,"./SceneScript/Loading":14}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var SceneManager_1 = require("./SceneManager");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        new SceneManager_1.default();
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1,"./SceneManager":3}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EventCentre_1 = require("./Toybox/EventCentre");
var Database_1 = require("./Toybox/Database");
var SceneManager = /** @class */ (function () {
    function SceneManager() {
        var _this = this;
        this.loadingScene = "LoadingScene.scene";
        this.gameScene = "GameScene.scene";
        EventCentre_1.default.init();
        Database_1.default.init();
        //初始化事件中心和数据库
        Laya.Scene.open(this.loadingScene); //打开加载场景
        EventCentre_1.default.instance.once("Init", "Regular", this, function () {
            Laya.Scene.open(_this.gameScene);
        });
    }
    return SceneManager;
}());
exports.default = SceneManager;
},{"./Toybox/Database":16,"./Toybox/EventCentre":17}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var EventCentre_1 = require("../Toybox/EventCentre");
var GameFieldUI_1 = require("./GameObj/GameFieldUI");
var EnemyCentre_1 = require("./GameObj/EnemyCentre");
var Global_1 = require("../Toybox/Global");
var OprtCentre_1 = require("./GameObj/OprtCentre");
var Doctor_1 = require("./GameObj/Doctor");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game() {
        var _this = _super.call(this) || this;
        _this._pause = false;
        _this._time = 0;
        Doctor_1.default.instance.movein(_this.UISet);
        // Laya.stage.on(Laya.Event.MOUSE_DOWN, this, ()=>{console.log("hi")});
        // let m:Matrix = new Matrix(5,6);
        // m.write(0,0,1);
        // m.print();
        // m.rotateClock().print();
        // m.rotateClock().rotateClock().print();
        // m.rotateClock().rotateClock().rotateClock().print();
        // if (Math.random() > -1) {
        //     return;
        // }
        Game.UISet = _this.UISet;
        Game.stage = _this.stage;
        var spr = new Laya.Sprite();
        _this.UISet.addChild(spr);
        Global_1.default.UISet_sub = spr;
        GameFieldUI_1.default.init(_this.scene); //ui初始化
        OprtCentre_1.default.init(); //干员管理类初始化
        EnemyCentre_1.default.init(); //敌人管理类初始化
        // MassEffect.init(this);//物理类初始化
        // MassEffect.i.test();//物理类进行测试 可移除
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.PAUSE, _this, function () {
            if (_this._pause) {
                _this._pause = false;
                Laya.timer.resume();
            }
            else {
                _this._pause = true;
                Laya.timer.pause();
            }
        });
        Laya.timer.loop(17, _this, _this.update); //开始帧循环
        return _this;
    }
    //这个变量代表游戏从开始到现在运行了多少帧
    Game.prototype.update = function () {
        EnemyCentre_1.default.i.update(this._time);
        OprtCentre_1.default.i.update();
        GameFieldUI_1.default.i.update();
        this._time += 1;
    };
    return Game;
}(layaMaxUI_1.ui.GameSceneUI));
exports.default = Game;
},{"../Toybox/EventCentre":17,"../Toybox/Global":18,"../ui/layaMaxUI":20,"./GameObj/Doctor":5,"./GameObj/EnemyCentre":6,"./GameObj/GameFieldUI":7,"./GameObj/OprtCentre":8}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Doctor = /** @class */ (function () {
    function Doctor() {
        this._sprite = new Laya.Sprite();
        this._life = 2;
    }
    Doctor.prototype.movein = function (spr) {
        spr.addChild(this._sprite);
        this._sprite.pos(0, 570);
        this._sprite.graphics.fillText("从左侧狗头人头像将狗头拖拽到场地上，松开鼠标并再次单击鼠标选择方向以部署", 0, 0, "20px Arial", "#ffffff", "left");
        this._sprite.graphics.fillText("这个demo其实不但简陋还有挺多bug的", 0, 22, "20px Arial", "#ffffff", "left");
        this._sprite.graphics.fillText("但我实在是肝不动了，先发个大概吧。项目代码也基本上被糟蹋得无法维护了（反正也要重构）", 0, 44, "20px Arial", "#ffffff", "left");
    };
    Doctor.prototype.note = function () {
        this._sprite.graphics.clear();
        if (this._life >= 0) {
            this._sprite.graphics.fillText("博士 [手撕筷子] 技能点剩余:" + this._life, 0, 0, "20px Arial", "#ffffff", "left");
        }
        else {
            this._sprite.graphics.fillText("筷子吃掉了宁的脑子", 0, 0, "20px Arial", "#ff0000", "left");
        }
    };
    Doctor.prototype.damage = function () {
        this._life -= 1;
        this.note();
    };
    Doctor.instance = new Doctor();
    return Doctor;
}());
exports.default = Doctor;
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Enemy_1 = require("./People_stuff/Enemy");
var DataStructure_1 = require("../../Toybox/DataStructure");
var Database_1 = require("../../Toybox/Database");
var EventCentre_1 = require("../../Toybox/EventCentre");
var EnemyCentre = /** @class */ (function () {
    function EnemyCentre() {
        this._enemyGroup = [];
        //Start
        //初始化时间轴
        var timeData = Database_1.default.i.getTimetable();
        this._timetable = new DataStructure_1.Struc.PointerList(timeData);
        //初始化时间轴
        //End
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.ENEMY_DEAD, this, this.onEnemyDead);
    }
    EnemyCentre.init = function () {
        this.i = new EnemyCentre();
        this.init = function () { };
    };
    EnemyCentre.prototype.update = function (time) {
        /*
        这个函数是EnemyCentre类每帧所做的事情
        time是此次游戏自游戏开始至这个函数运行之时已经经过的帧数
        在预期中，这个数值会从0开始，每帧+1
        */
        //2019/11/18
        //下面这个判断条件的==改成了>=,还没测试过，记得测试
        if (!this._timetable.exceeding && time >= this._timetable.read()["time"]) {
            //空值检查 && 当前时间与时间表上的时间一致
            var data = this._timetable.read();
            this.createEnemy(data["type"], data["path"]);
            this._timetable.step();
        }
        this._enemyGroup.forEach(function (enemy) {
            enemy.update();
        });
    };
    EnemyCentre.prototype.onEnemyDead = function (enemy) {
        for (var i = 0; i < this._enemyGroup.length; i += 1) {
            if (this._enemyGroup[i] === enemy) {
                this._enemyGroup.splice(i, 1);
                break;
            }
        }
    };
    EnemyCentre.prototype.createEnemy = function (enemyID, pathID) {
        var enemy = new Enemy_1.default(enemyID, pathID);
        this._enemyGroup.push(enemy);
    };
    return EnemyCentre;
}());
exports.default = EnemyCentre;
},{"../../Toybox/DataStructure":15,"../../Toybox/Database":16,"../../Toybox/EventCentre":17,"./People_stuff/Enemy":9}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Database_1 = require("../../Toybox/Database");
var EventCentre_1 = require("../../Toybox/EventCentre");
var DataStructure_1 = require("../../Toybox/DataStructure");
var People_1 = require("./People_stuff/People");
var Global_1 = require("../../Toybox/Global");
var Game_1 = require("../Game");
var OprtCentre_1 = require("./OprtCentre");
var Present_1 = require("./People_stuff/Present");
var TempPst = /** @class */ (function (_super) {
    __extends(TempPst, _super);
    function TempPst() {
        return _super.call(this, null) || this;
    }
    TempPst.prototype.removeHealthBar = function () {
        this._sprite.graphics.clear();
    };
    return TempPst;
}(Present_1.default));
/**
 * 干员栏的一个单元
 */
var OprtProfile = /** @class */ (function () {
    function OprtProfile(id) {
        //获取资料
        this.id = id;
        var data = Database_1.default.i.getOprt(id);
        this.img = data["img"];
        //创建sprite
        this.sprite = Laya.Sprite.fromImage(data["img"]);
        //监听点击事件
        this.sprite.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
    }
    OprtProfile.prototype.onMouseDown = function () {
        var spr = Laya.Sprite.fromImage(this.img); //创建并调整拖动图标
        spr.size(Database_1.default.i.UnitSize, Database_1.default.i.UnitSize);
        //绘制方块
        var pst = new TempPst();
        pst.removeHealthBar();
        // let weapon:Weapon = new Weapon(2,0,5);
        // pst.drawAttackRange(weapon);
        //绘制方块
        GameFieldUI.i.UISet.addChild(spr);
        Laya.timer.loop(20, this, this.onLoop, [spr, GameFieldUI.i.Centre.range, pst]); //拖动图标开始跟随鼠标
        this.sprite.stage.once(Laya.Event.MOUSE_UP, this, this.onMouseUp, [spr, GameFieldUI.i.Centre.range, pst]); //监听鼠标抬起事件
    };
    OprtProfile.prototype.onLoop = function (spr, range, pst) {
        var x = Game_1.default.UISet.mouseX;
        var y = Game_1.default.UISet.mouseY;
        if ((x > 0 && x < range.right) && (y > 0 && y < range.bottom)) {
            var size = Database_1.default.i.UnitSize;
            x = x - x % size;
            y = y - y % size;
            spr.pos(x, y);
            pst.clearAttackRange();
            pst.drawAttackRange(new People_1.Weapon(Math.floor(y / size), Math.floor(x / size), 5));
            return;
        }
        spr.pos(x - spr.width / 2, y - spr.height / 2);
    };
    OprtProfile.prototype.onMouseUp = function (spr, range, pst) {
        var _this = this;
        Laya.timer.clear(this, this.onLoop); //停止跟随循环
        var x = Game_1.default.UISet.mouseX;
        var y = Game_1.default.UISet.mouseY;
        if ((x > 0 && x < range.right) && (y > 0 && y < range.bottom)) { //鼠标处于地图范围内
            var size_1 = Database_1.default.i.UnitSize;
            x = (x - x % size_1) / size_1; //计算单位位置
            y = (y - y % size_1) / size_1;
            var xMan_1 = x * size_1;
            var yEs_1 = y * size_1;
            //Looooooooooooooooooooooooooooooop
            var dirNum_1 = 0;
            var direct_1 = function () {
                var currentX = Game_1.default.UISet.mouseX;
                var currentY = Game_1.default.UISet.mouseY;
                if (currentX > xMan_1 && currentY > yEs_1 && currentY < yEs_1 + size_1) {
                    console.log("right");
                    dirNum_1 = 0;
                    pst.clearAttackRange();
                    pst.drawAttackRange(new People_1.Weapon(y, x, 5));
                }
                else if (currentX < xMan_1 && currentY > yEs_1 && currentY < yEs_1 + size_1) {
                    console.log("left");
                    dirNum_1 = 2;
                    pst.clearAttackRange();
                    pst.drawAttackRange(new People_1.Weapon(y, x, 5).rotateClock().rotateClock());
                }
                else if (currentY < yEs_1 && currentX > xMan_1 && currentX < xMan_1 + size_1) {
                    console.log("up");
                    dirNum_1 = 3;
                    pst.clearAttackRange();
                    pst.drawAttackRange(new People_1.Weapon(y, x, 5).rotateClock().rotateClock().rotateClock());
                }
                else if (currentY > yEs_1 && currentX > xMan_1 && currentX < xMan_1 + size_1) {
                    console.log("down");
                    dirNum_1 = 1;
                    pst.clearAttackRange();
                    pst.drawAttackRange(new People_1.Weapon(y, x, 5).rotateClock());
                }
            };
            Laya.timer.loop(20, this, direct_1);
            Laya.stage.once(Laya.Event.MOUSE_DOWN, this, function () {
                pst.clearAttackRange();
                Laya.timer.clear(_this, direct_1);
                OprtCentre_1.default.i.createOprt(y, x, _this.id, dirNum_1);
                spr.destroy(); //消除拖动图标
            });
        }
        else { //鼠标处于地图范围外
            //其实没什么要做的
        }
    };
    return OprtProfile;
}());
/**
 * 侧边栏UI类
 * 也就是干员栏
 */
var SideField = /** @class */ (function () {
    function SideField(scene, rightShift) {
        var _this = this;
        this._pixWidth = 100; //宽度
        this._pixHeight = 500; //高度
        this._profiles = [];
        //获取原点
        this._origin = scene.getChildByName("SideBar");
        //移动原点到CentreField的右边30px处
        this._origin.pos(rightShift, this._origin.y);
        //绘制方框
        this._origin.graphics.drawRect(0, 0, 100, 500, "#fa1566");
        //根据可选干员列表生成待选干员栏
        var list = Global_1.default.ListOfOprt; //Global.ListOfOprt仅在开发时采用，后续将会通过制定标准规定干员列表的来源
        list.forEach(function (ele, index) {
            var currentOprt = new OprtProfile(ele);
            currentOprt.sprite.pos(0, 80 * index).size(80, 80);
            _this._origin.addChild(currentOprt.sprite);
            _this._profiles[index] = currentOprt;
        });
        console.log(this);
    }
    return SideField;
}());
/**
 * 中央区域UI类
 */
var CentreField = /** @class */ (function () {
    function CentreField(scene) {
        this._subLayer = new Laya.Sprite(); //测试用图层
        this._topLayer = new Laya.Sprite(); //上层图层
        this._enemyDistribution = []; //敌人所处的区域
        //获取数据
        var data = Database_1.default.i.getGround();
        var _a = [data["width"], data["height"], data["size"]], width = _a[0], hight = _a[1], size = _a[2];
        this._size = size;
        this._width = width;
        this._height = hight;
        this._scene = scene;
        this._origin = scene.getChildByName("UISet");
        this._origin.addChild(this._subLayer);
        this._origin.parent.addChild(this._topLayer);
        this._topLayer.pos(this._origin.x, this._origin.y);
        this._topLayer.zOrder = 100;
        //创建CentreField区域数据
        this.range = new DataStructure_1.Box();
        this.range.size(width * size, hight * size);
        //Start
        //创建地图方格 和对应的Box
        this._blocks = [];
        this._recs = [];
        for (var y = 0; y < hight; y += 1) {
            this._blocks[y] = [];
            this._recs[y] = [];
            for (var x = 0; x < width; x += 1) {
                console.log(Database_1.default.i.getGround());
                var pngNum = Database_1.default.i.getGround()["matrix"][y][x];
                var block = Laya.Sprite.fromImage("Basic/" + pngNum + ".png");
                this._origin.addChild(block);
                block.size(size, size).pos(x * size, y * size);
                this._blocks[y][x] = block;
                this._recs[y][x] = new DataStructure_1.Box();
                this._recs[y][x].pos(x * size, y * size).size(size, size);
                this._recs[y][x].unitX = x;
                this._recs[y][x].unitY = y;
            }
        }
        //创建地图方格
        //End
        //监控敌人位置
        for (var row = 0; row < hight; row += 1) {
            this._enemyDistribution[row] = [];
            for (var col = 0; col < width; col += 1) {
                console.log("run");
                this._enemyDistribution[row][col] = [];
                EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.IN(row, col), this, this._onEnemyEntre, [row, col]);
                EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.OUT(row, col), this, this._onEnemyLeave, [row, col]);
            }
        }
        console.log(this._enemyDistribution);
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.EFFECT, this, this.onAttackOccur);
        EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.EFFECT, [500, 500, "2"]);
    }
    /**
     * 此函数仅在29日重构前使用
     */
    CentreField.prototype.attackEffect = function (fromX, fromY, toX, toY) {
        var _this = this;
        var sprite = new Laya.Sprite();
        this._topLayer.addChild(sprite);
        sprite.zOrder = 10000;
        sprite.graphics.drawRect(fromX, fromY, 10, 10, "#ff0000");
        var count = 0;
        var max = 30;
        var func = function () {
            sprite.graphics.drawRect(fromX + (toX - fromX) * count / max, fromY + (toY - fromY) * count / max, 5, 5, "#ff0040");
            count += 1;
            if (count <= max) {
                Laya.timer.once(10, _this, func);
            }
            else {
                sprite.graphics.drawRect(toX, toY, 10, 10, "#ff0040");
                Laya.timer.once(1500, _this, function () {
                    _this._topLayer.removeChild(sprite);
                });
            }
        };
        func();
    };
    /**
     * 这个也只在demo里使用
     */
    CentreField.prototype.onAttackOccur = function (x, y, color) {
        var _this = this;
        x += Math.random() * 20 - 10;
        y += Math.random() * 20 - 10;
        var spr = new Laya.Sprite;
        this._topLayer.addChild(spr);
        var time = 0;
        var scale = 0.7;
        var size = Database_1.default.i.UnitSize;
        var scaleIncreaseRate = 0.4;
        var scaleIncreaseRateIncreaseRate = -0.06;
        var ok = function () {
            var currentSize = size * scale;
            var locate = (size - currentSize) / 2;
            // console.log(color);
            spr.graphics.clear();
            spr.graphics.drawRect(x + locate, y + locate, currentSize, 4, color);
            spr.graphics.drawRect(x + locate, y + locate, 4, currentSize, color);
            spr.graphics.drawRect(x + locate + currentSize, y + locate, 4, currentSize, color);
            spr.graphics.drawRect(x + locate, y + locate + currentSize, currentSize, 4, color);
            scale = scale + scaleIncreaseRate;
            scaleIncreaseRate = Math.max(0.01, scaleIncreaseRate + scaleIncreaseRateIncreaseRate);
            time += 1;
            if (time < 20) {
                Laya.timer.once(20, _this, ok);
            }
            else {
                spr.parent.removeChild(spr);
            }
        };
        ok();
    };
    /**
     * 查看特定坐标中是否包含输入的enemy对象
     */
    CentreField.prototype.searchPoint = function (row, col, enemy) {
        if (row < 0 || col < 0 || row >= this._height || col >= this._width) { //超出边界直接false
            return false;
        }
        var arr = this._enemyDistribution[row][col];
        for (var i = 0; i < arr.length; i += 1) {
            if (arr[i] === enemy) {
                return true;
            }
        }
        return false;
    };
    /**
     * 将所有存在enemy的地图节点绘制为紫色
     */
    CentreField.prototype._paint = function () {
        var _this = this;
        if (!Global_1.default.LINE_EFFECT_ON) {
            return;
        }
        this._subLayer.graphics.clear();
        this._enemyDistribution.forEach(function (row, y) {
            row.forEach(function (ele, x) {
                if (ele.length !== 0) {
                    _this._subLayer.graphics.drawRect(x * Database_1.default.i.UnitSize, y * Database_1.default.i.UnitSize, Database_1.default.i.UnitSize, Database_1.default.i.UnitSize, "#ff00ff");
                }
            });
        });
    };
    CentreField.prototype._onEnemyEntre = function (row, col, enemy) {
        // console.log("Entre:" + row + "|" + col);
        // console.log(this._enemyDistribution[row][col]);
        this._enemyDistribution[row][col].push(enemy);
        this._paint();
    };
    CentreField.prototype._onEnemyLeave = function (row, col, enemy) {
        // console.log("Leave:" + row + "|" + col);
        var length = this._enemyDistribution[row][col].length;
        for (var i = 0; i < length; i += 1) {
            if (this._enemyDistribution[row][col][i] === enemy) {
                this._enemyDistribution[row][col].splice(i, 1);
                break;
            }
        }
        this._paint();
    };
    CentreField.prototype.CreateSprite = function (imgURL, x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        var sprite = Laya.Sprite.fromImage(imgURL); //创建sprite
        this._scene.getChildByName("UISet").addChild(sprite); //插入中心区域
        sprite.size(Database_1.default.i.UnitSize, Database_1.default.i.UnitSize); //根据数据库提供的常量设置大小
        sprite.pos(x, y); //确定位置
        return sprite;
    };
    /**
     * 输入一个方格，输出与其交叠的地图方格
     */
    CentreField.prototype.collision = function (from) {
        var origin_x = this.round(from.x, this._size);
        var origin_y = this.round(from.y, this._size);
        var bottom = this.round(from.bottom, this._size);
        var right = this.round(from.right, this._size);
        if (origin_x >= this._width || origin_y >= this._height) {
            return [];
        }
        origin_x = origin_x < 0 ? 0 : origin_x; //origin_x is at least 0
        origin_y = origin_y < 0 ? 0 : origin_y; //origin_y is at least 0
        bottom = bottom >= this._height ? this._height - 1 : bottom; //bottom is at most this._height
        right = right >= this._width ? this._width - 1 : right; //right is at most this._right
        var result = [];
        for (var hei = origin_y; hei <= bottom; hei += 1) {
            for (var wid = origin_x; wid <= right; wid += 1) {
                result.push(this._recs[hei][wid]);
            }
        }
        return result;
    };
    /**
     * 求c = a / b
     * 返回c在数轴上向0移动时经过的第一个整数值
     * @param a
     * @param b
     */
    CentreField.prototype.round = function (a, b) {
        return (a - a % b) / b;
    };
    return CentreField;
}());
/**
 * 整个主要场景的UI类
 */
var GameFieldUI = /** @class */ (function () {
    function GameFieldUI(scene) {
        this.UISet = scene.getChildByName("UISet");
        this.SideBar = scene.getChildByName("SideBar");
        this._centre = new CentreField(scene);
        this._side = new SideField(scene, this.UISet.x + this._centre.range.width + 20);
        this._scene = scene;
        //弄个暂停键凑合用
        var pauseButton = new Laya.Sprite();
        pauseButton.size(50, 50).pos(0, 0);
        pauseButton.graphics.drawRect(0, 0, 50, 50, "#ff0000");
        this._scene.addChild(pauseButton);
        pauseButton.on(Laya.Event.MOUSE_DOWN, this, function () {
            EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.PAUSE);
        });
        console.log(this);
    }
    GameFieldUI.init = function (scene) {
        this.i = new GameFieldUI(scene);
        this.init = function () { };
    };
    Object.defineProperty(GameFieldUI.prototype, "Centre", {
        get: function () {
            return this._centre;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GameFieldUI.prototype, "Side", {
        get: function () {
            return this._side;
        },
        enumerable: true,
        configurable: true
    });
    GameFieldUI.prototype.update = function () {
    };
    return GameFieldUI;
}());
exports.default = GameFieldUI;
},{"../../Toybox/DataStructure":15,"../../Toybox/Database":16,"../../Toybox/EventCentre":17,"../../Toybox/Global":18,"../Game":4,"./OprtCentre":8,"./People_stuff/People":11,"./People_stuff/Present":12}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Oprt_1 = require("./People_stuff/Oprt");
var EventCentre_1 = require("../../Toybox/EventCentre");
var OprtCentre = /** @class */ (function () {
    function OprtCentre() {
        this._oprtGroup = [];
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.OPRT_DEAD, this, this.onOprtDead);
    }
    OprtCentre.init = function () {
        this.i = new OprtCentre;
    };
    OprtCentre.prototype.onOprtDead = function (oprt) {
        for (var i = 0; i < this._oprtGroup.length; i += 1) {
            if (this._oprtGroup[i] === oprt) {
                this._oprtGroup.splice(i, 1);
                break;
            }
        }
    };
    OprtCentre.prototype.createOprt = function (unitY, unitX, id, rotate) {
        if (rotate === void 0) { rotate = 0; }
        var oprt = new Oprt_1.default(unitY, unitX, id, rotate);
        this._oprtGroup.push(oprt);
        console.log("New Operator at " + unitY + "_" + unitX);
    };
    OprtCentre.prototype.update = function () {
        this._oprtGroup.forEach(function (ele) {
            ele.update();
        });
    };
    return OprtCentre;
}());
exports.default = OprtCentre;
},{"../../Toybox/EventCentre":17,"./People_stuff/Oprt":10}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var Database_1 = require("../../../Toybox/Database");
var EventCentre_1 = require("../../../Toybox/EventCentre");
var GameFieldUI_1 = require("../GameFieldUI");
var DataStructure_1 = require("../../../Toybox/DataStructure");
var Present_1 = require("./Present");
var State_1 = require("./State");
var myMath_1 = require("../../../Toybox/myMath");
var Doctor_1 = require("../Doctor");
/**
 * 敌人的表现类
 */
var EnemyPst = /** @class */ (function (_super) {
    __extends(EnemyPst, _super);
    function EnemyPst(url) {
        return _super.call(this, url, true) || this;
    }
    return EnemyPst;
}(Present_1.default));
/**
 * 敌人的状态类
 */
var EnemyStt = /** @class */ (function (_super) {
    __extends(EnemyStt, _super);
    function EnemyStt(data, pathID) {
        var _this = _super.call(this, data) || this;
        _this.isOut = false; //这个敌人是否还有下一个路径坐标
        _this.isStop = false; //这个敌人是否在移动
        _this.oldCollision = []; //这是上一次碰到的地图节点
        _this.weapon = new People_1.EnemyWeapon();
        var size = Database_1.default.i.subUnitSize;
        //初始化路径
        _this._path = new DataStructure_1.Struc.PointerList();
        var rawPath = Database_1.default.i.getPath(pathID);
        rawPath.forEach(function (ele, index) {
            _this._path.push({ x: ele[0], y: ele[1] });
        });
        //初始化位置
        _this._x = _this._path.first.x;
        _this._y = _this._path.first.y;
        //初始化速度
        _this._speed = data["speed"];
        //初始化轴速度
        _this._resetAxisSpeed();
        //初始化基础属性
        _this.health = data['HP']; //血量
        _this.fullHealth = _this.health;
        //注册碰撞箱
        _this._bodyBox = new DataStructure_1.Box().size(size, size);
        _this.resetBodyPosition();
        return _this;
    }
    EnemyStt.prototype.resetBodyPosition = function () {
        this._bodyBox.x = this._x + 1; //记得修改这个常数
        this._bodyBox.y = this._y + 1;
        // this._bodyBox.pos(this._x, this._y);
    };
    EnemyStt.prototype._resetAxisSpeed = function () {
        if (this._path.atEnd) {
            console.log("Can't reset speed");
            return;
        }
        var next = this._path.next();
        var _a = [next.x - this._x, next.y - this._y], x_dis = _a[0], y_dis = _a[1];
        var distance = Math.sqrt(Math.pow(x_dis, 2) + Math.pow(y_dis, 2));
        var time = distance / this._speed;
        this._xSpeed = x_dis / time;
        this._ySpeed = y_dis / time;
    };
    EnemyStt.prototype.setPosition = function (x, y) {
        this._x = x;
        this._y = y;
    };
    EnemyStt.prototype.nextTarget = function () {
        if (this._path.atEnd) {
            return;
        }
        this._path.step();
        this._resetAxisSpeed();
    };
    Object.defineProperty(EnemyStt.prototype, "isArrived", {
        get: function () {
            return (this._x === this._path.next().x) && (this._y === this._path.next().y);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "xSpeed", {
        get: function () {
            return this._xSpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "ySpeed", {
        get: function () {
            return this._ySpeed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "target", {
        get: function () {
            return this._path.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnemyStt.prototype, "bodyBox", {
        get: function () {
            return this._bodyBox;
        },
        enumerable: true,
        configurable: true
    });
    return EnemyStt;
}(State_1.default));
/**
 * 敌人的逻辑类
 */
var Enemy = /** @class */ (function (_super) {
    __extends(Enemy, _super);
    /**
     *
     * @param id 敌人id，用于获取敌人数据
     * @param pathID 路径id，用于获取路径数据
     */
    function Enemy(id, pathID) {
        var _this = _super.call(this) || this;
        //获取数据和路径
        var data = Database_1.default.i.getEnemy(id);
        var path = Database_1.default.i.getPath(pathID);
        _this._data = data;
        _this._path = new DataStructure_1.Struc.PointerList(path);
        //创建表现类和数据类
        _this._present = new EnemyPst(data["img"]);
        _this._present.relatedPeople = _this;
        _this._state = new EnemyStt(data, pathID);
        //初始化动作条
        _this._present.drawActionBar(0, 1, 2);
        console.log(_this);
        return _this;
    }
    Enemy.prototype.tryAttack = function (oprt) {
        this._state.weapon.count(oprt);
        var stage = this._state.weapon.stage;
        this._present.drawActionBar(stage.stageATK, stage.beforeATK, stage.completeATK);
    };
    /**
     * 对传入的伤害进行处理
     * @param damage
     */
    Enemy.prototype.handleDamage = function (damage) {
        this._state.health -= damage.value;
        this._present.drawHealthBar(this._state.health, this._state.fullHealth);
        if (this._state.health <= 0) {
            this._dead();
        }
    };
    /**
     * 这个函数真是乱到一定程度了……
     */
    Enemy.prototype.clearActionBar = function () {
        this._present.drawActionBar(0, 1, 2);
    };
    /**
     * 死亡函数
     */
    Enemy.prototype._dead = function () {
        var _this = this;
        this.update = function () {
            console.log("invalid update");
        };
        this._present.hide();
        EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.ENEMY_DEAD, [this]);
        this._state.oldCollision.forEach(function (ele) {
            EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.OUT(ele.unitY, ele.unitX), [_this]);
        });
    };
    /**
     * 对比两次先后碰撞的结果，输出他们的差异
     * @param previous 上一次的碰撞结果
     * @param current 这一次的碰撞结果
     */
    Enemy.prototype.compareColiResult = function (previous, current) {
        var inList = [];
        var outList = [];
        previous.forEach(function (ele) {
            var toInsert = true;
            for (var n = 0; n < current.length; n += 1) {
                if (ele === current[n]) {
                    toInsert = false;
                    break;
                }
            }
            if (toInsert) {
                outList.push(ele);
            }
        });
        current.forEach(function (ele) {
            var toInset = true;
            for (var n = 0; n < previous.length; n += 1) {
                if (ele === previous[n]) {
                    toInset = false;
                    break;
                }
            }
            if (toInset) {
                inList.push(ele);
            }
        });
        return { in: inList, out: outList };
    };
    Object.defineProperty(Enemy.prototype, "NumX", {
        get: function () {
            return this._state.x;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Enemy.prototype, "NumY", {
        get: function () {
            return this._state.y;
        },
        enumerable: true,
        configurable: true
    });
    //供外部调用的方法集
    Enemy.prototype.stop = function () {
        this._state.isStop = true;
    };
    Enemy.prototype.unstop = function () {
        this._state.isStop = false;
    };
    // public get UnitX():number{
    //     return GameFieldUI.i.Centre.
    // }
    Enemy.prototype.update = function () {
        var _this = this;
        if (this._state.isOut || this._state.isStop) {
            return;
        }
        //进行移动
        if (this._state.isArrived) {
            this._state.nextTarget();
        }
        var _a = this._state, x = _a.x, y = _a.y, xSpeed = _a.xSpeed, ySpeed = _a.ySpeed, target = _a.target;
        if (target === undefined) {
            this._state.isOut = true;
            this.handleDamage(new People_1.Damage(114514, this, People_1.DamageType.PHYSICAL));
            Doctor_1.default.instance.damage();
            return;
        }
        var newx = myMath_1.default.moveTo(x, xSpeed, target.x);
        var newy = myMath_1.default.moveTo(y, ySpeed, target.y);
        this._state.setPosition(newx, newy);
        this._state.resetBodyPosition();
        //刷新位置
        this._present.perform(this._state);
        //碰撞检测
        var result = GameFieldUI_1.default.i.Centre.collision(this._state.bodyBox); //获取当前与自身有所重叠的所有方块
        var events = this.compareColiResult(this._state.oldCollision, result); //对比当前与上一帧的重叠方块异同
        this._state.oldCollision = result; //更新碰撞结果
        //发送事件
        events.in.forEach(function (ele) {
            // const unitX:number = (ele.x-ele.x%Database.i.UnitSize)/Database.i.UnitSize;
            // const unitY:number = (ele.y-ele.y%Database.i.UnitSize)/Database.i.UnitSize;
            // console.log(unitX === ele.unitX && unitY === ele.unitY);
            // EventCentre.i.event(EventCentre.FieldName.COLLISION, `IN${unitY+""+unitX}`, [this]);
            EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.COLLISION, "IN" + (ele.unitY + "" + ele.unitX), [_this]);
        });
        events.out.forEach(function (ele) {
            // const unitX:number = (ele.x-ele.x%Database.i.UnitSize)/Database.i.UnitSize;
            // const unitY:number = (ele.y-ele.y%Database.i.UnitSize)/Database.i.UnitSize;
            // EventCentre.i.event(EventCentre.FieldName.COLLISION, `OUT${unitY+""+unitX}`, [this]);
            EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.COLLISION, "OUT" + (ele.unitY + "" + ele.unitX), [_this]);
        });
    };
    return Enemy;
}(People_1.default));
exports.default = Enemy;
},{"../../../Toybox/DataStructure":15,"../../../Toybox/Database":16,"../../../Toybox/EventCentre":17,"../../../Toybox/myMath":19,"../Doctor":5,"../GameFieldUI":7,"./People":11,"./Present":12,"./State":13}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var People_1 = require("./People");
var State_1 = require("./State");
var Present_1 = require("./Present");
var Database_1 = require("../../../Toybox/Database");
var EventCentre_1 = require("../../../Toybox/EventCentre");
var OprtPst = /** @class */ (function (_super) {
    __extends(OprtPst, _super);
    function OprtPst(url) {
        return _super.call(this, url) || this;
    }
    return OprtPst;
}(Present_1.default));
var OprtStt = /** @class */ (function (_super) {
    __extends(OprtStt, _super);
    function OprtStt(data) {
        var _this = _super.call(this, data) || this;
        _this.capture = [];
        _this.stopping = null;
        return _this;
    }
    Object.defineProperty(OprtStt.prototype, "x", {
        get: function () {
            return this.unitX * Database_1.default.i.UnitSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OprtStt.prototype, "y", {
        get: function () {
            return this.unitY * Database_1.default.i.UnitSize;
        },
        enumerable: true,
        configurable: true
    });
    return OprtStt;
}(State_1.default));
var Oprt = /** @class */ (function (_super) {
    __extends(Oprt, _super);
    function Oprt(unitY, unitX, id, rotate) {
        if (rotate === void 0) { rotate = 0; }
        var _this = _super.call(this) || this;
        //获取数据
        var size = Database_1.default.i.UnitSize;
        var data = Database_1.default.i.getOprt(id);
        //新建表现类和状态类
        _this._state = new OprtStt(data);
        _this._present = new OprtPst(data["small"]);
        _this._present.relatedPeople = _this;
        //确定血量
        _this._state.fullHealth = data["HP"];
        _this._state.health = _this._state.fullHealth;
        _this._state.unitX = unitX;
        _this._state.unitY = unitY;
        _this._state.weapon = new People_1.Weapon(_this._state.unitY, _this._state.unitX, 5);
        for (var i = 0; i < rotate; i += 1) {
            _this._state.weapon.rotateClock();
        }
        _this._present.perform(_this._state);
        // console.log(this._state.weapon.getIndexLocations());//
        //监听事件
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.COLLISION, "IN" + (unitY + "" + unitX), _this, _this.onCaptureEnemy);
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.COLLISION, "OUT" + (unitY + "" + unitX), _this, _this.onReleaseEnemy);
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.SHOW_RANGE, _this, _this.showRange);
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.HIDE_RANGE, _this, _this.hideRange);
        return _this;
    }
    Oprt.prototype.showRange = function (present) {
        if (this._present !== present) {
            return;
        }
        this._present.drawAttackRange(this._state.weapon);
    };
    Oprt.prototype.hideRange = function (present) {
        if (this._present !== present) {
            return;
        }
        this._present.clearAttackRange();
    };
    Oprt.prototype.handleDamage = function (damage) {
        this._state.health -= damage.value;
        this._present.drawHealthBar(this._state.health, this._state.fullHealth);
        if (this._state.health <= 0) {
            this.dead();
        }
    };
    Oprt.prototype.dead = function () {
        this._present.sprite.parent.removeChild(this._present.sprite);
        if (this._state.stopping !== null) {
            this._state.stopping.clearActionBar();
            this.onReleaseEnemy(this._state.stopping);
        }
        EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.OPRT_DEAD, [this]);
        this.update = function () {
            console.log("invalid update");
        };
    };
    Oprt.prototype.onCaptureEnemy = function (enemy) {
        if (this._state.stopping === null) {
            enemy.stop();
            this._state.stopping = enemy;
        }
    };
    Oprt.prototype.onReleaseEnemy = function (enemy) {
        enemy.unstop();
        this._state.stopping = null;
    };
    Oprt.prototype.update = function () {
        /*
         * 按照原作的逻辑，干员在攻击时会锁定一个敌人，开始前摇。
         * 如果此敌人不再是攻击目标，将会重新进行前摇。
         * 但这里的逻辑是“只要范围内有敌人，就进行前摇和攻击”。
         */
        if (this._state.weapon.captureList.length !== 0) {
            this._state.weapon.stage.update();
            // console.log("EnemyFound");
            if (this._state.weapon.stage.atkReady) {
                this._state.weapon.attack();
                // console.log("Attack");
            }
        }
        else {
            this._state.weapon.stage.reset();
            // console.log("Enemy lost, Attack reset");
        }
        if (this._state.stopping !== null) {
            this._state.stopping.tryAttack(this);
        }
        this._present.drawActionBar(this._state.weapon.stage.stageATK, this._state.weapon.stage.beforeATK, this._state.weapon.stage.completeATK);
    };
    return Oprt;
}(People_1.default));
exports.default = Oprt;
},{"../../../Toybox/Database":16,"../../../Toybox/EventCentre":17,"./People":11,"./Present":12,"./State":13}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var myMath_1 = require("../../../Toybox/myMath");
var EventCentre_1 = require("../../../Toybox/EventCentre");
var GameFieldUI_1 = require("../GameFieldUI");
var Database_1 = require("../../../Toybox/Database");
var People = /** @class */ (function () {
    function People() {
    }
    Object.defineProperty(People.prototype, "UnitX", {
        get: function () {
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(People.prototype, "UnitY", {
        get: function () {
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(People.prototype, "NumX", {
        get: function () {
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(People.prototype, "NumY", {
        get: function () {
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    People.prototype.handleDamage = function (damage) {
    };
    ;
    return People;
}());
exports.default = People;
var Buff = /** @class */ (function () {
    function Buff() {
    }
    return Buff;
}());
exports.Buff = Buff;
var DamageType = /** @class */ (function () {
    function DamageType() {
    }
    DamageType.PHYSICAL = "PHYSICAL";
    DamageType.MAGICAL = "MAGICAL";
    DamageType.CRITICAL = "CRITICAL";
    return DamageType;
}());
exports.DamageType = DamageType;
/**
 * Damage是一个储存伤害信息的类
 */
var Damage = /** @class */ (function () {
    function Damage(value, creator, type) {
        this._value = value;
        this._creator = creator;
        this._type = type;
    }
    Object.defineProperty(Damage.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Damage.prototype, "creator", {
        get: function () {
            return this._creator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Damage.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    return Damage;
}());
exports.Damage = Damage;
/**
 * 由Weapon独有的一个数据类
 * 存储前摇/后摇时间信息
 * 帮助判断何时进行攻击
 * 提供修改这些信息的API
 */
var ATKstage = /** @class */ (function () {
    /**
     *
     * @param before 设定前摇时间
     * @param complete 设定攻击完成周期（前摇与后摇时间之和）
     */
    function ATKstage(before, complete) {
        this._beforeATK = 10; // 前摇时间/帧
        this._completeATK = 20; // 攻击完成周期(前摇与后摇时间之和)/帧
        this._hadAttacked = false; //在当前周期中已进行过攻击
        this._stageATK = 0; // 已经经历的攻击时间
        this._beforeATK = before;
        this._completeATK = complete;
    }
    Object.defineProperty(ATKstage.prototype, "beforeATK", {
        get: function () {
            return this._beforeATK;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ATKstage.prototype, "completeATK", {
        get: function () {
            return this._completeATK;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ATKstage.prototype, "stageATK", {
        get: function () {
            return this._stageATK;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 记录一帧预备攻击状态
     */
    ATKstage.prototype.update = function () {
        this._stageATK += 1;
        if (this._stageATK > this._completeATK) {
            this._stageATK = 0; //周期计数归零
            this._hadAttacked = false; //重设攻击记录
        }
    };
    Object.defineProperty(ATKstage.prototype, "atkReady", {
        /**
         * 返回“已准备好进行攻击”的真值
         */
        get: function () {
            return (this._stageATK >= this._beforeATK) && (!this._hadAttacked); //前摇阶段已结束，且此次循环中还未攻击过
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 进行攻击
     * 将“此次循环中已攻击过”设为真
     * 每次进行攻击时必须调用此函数
     */
    ATKstage.prototype.attackRecord = function () {
        this._hadAttacked = true;
    };
    /**
     * 重置攻击状态
     */
    ATKstage.prototype.reset = function () {
        this._stageATK = 0;
        this._hadAttacked = false;
    };
    return ATKstage;
}());
/**
 * EnemyWeapon是一个储存敌人攻击能力信息的类
 * 这些Weapon类等重构之后都得重写……
 *
 */
var EnemyWeapon = /** @class */ (function () {
    function EnemyWeapon() {
        this._power = 3;
        this.stage = new ATKstage(60, 180);
    }
    EnemyWeapon.prototype.count = function (oprt) {
        if (oprt === this._target) {
            this.stage.update();
            if (this.stage.atkReady) {
                this.stage.attackRecord();
                oprt.handleDamage(new Damage(this._power, null, DamageType.PHYSICAL));
            }
        }
        else {
            this.stage.reset();
            this._target = oprt;
        }
    };
    return EnemyWeapon;
}());
exports.EnemyWeapon = EnemyWeapon;
/**
 * Weapon是一个储存干员攻击能力信息的类
 */
var Weapon = /** @class */ (function () {
    /**
     * 创建一个weapon
     *
     * @param originY 单位纵轴坐标（不是精确坐标）
     * @param originX 单位横轴坐标（不是精确坐标）
     * @param size 仅奇数可用
     */
    function Weapon(originY, originX, size) {
        this._originX = 0; //x轴中心点
        this._originY = 0; //y轴中心点
        this._centre = 0; //矩阵中心坐标
        this._shiftX = 0; //x轴坐标系偏移值
        this._shiftY = 0; //y轴坐标系偏移值
        this._blockList = []; //正在阻挡的敌人
        this._captureList = []; //攻击范围中的敌人
        this.power = 2; //攻击力
        this._matrix = new myMath_1.Matrix(size, size);
        this._originX = originX;
        this._originY = originY;
        this._centre = (size - 1) / 2;
        this._shiftX = this._originX - this._centre;
        this._shiftY = this._originY - this._centre;
        this._size = size;
        /**
         *      0   1   2   3   4   5
         * 0                        |
         * 1                        |
         * 2        S   1   2   3   4
         * 3        1               |
         * 4        2       C       |
         * 5        3               |
         * 6    -   4   -   -   -   -
         *
         * 图例：在(4,3)生成一个size为5的weapon，其中心点在绝对坐标系中为C(4,3)
         * 其_centre值为(5-1)/2 = 2, centre值是矩阵中心点C的相对坐标
         * 其_shift值为S(2,1),这是矩阵在绝对坐标系中的位置
         *
         * 通过把矩阵中的一些0改为1，可以监控绝对坐标系中相应位置的碰撞事件
         *
         */
        //预设内容
        this._matrix.write(this._centre, this._centre, 1); //中心位置设为1
        this._matrix.write(this._centre, this._centre + 1, 1);
        this._matrix.write(this._centre, this._centre + 2, 1);
        this._resetEvent();
        this.stage = new ATKstage(50, 120);
    }
    Object.defineProperty(Weapon.prototype, "captureList", {
        get: function () {
            return this._captureList;
        },
        enumerable: true,
        configurable: true
    });
    Weapon.prototype.rotateClock = function () {
        this._clearEvent();
        this._matrix = this._matrix.rotateClock();
        this._resetEvent();
        return this;
    };
    /**
     * [[x,y], [x,y], [x,y]]
     */
    Weapon.prototype.getIndexLocations = function () {
        var result = [];
        var xStart = this._shiftX;
        var yStart = this._shiftY;
        for (var row = 0; row < this._size; row += 1) {
            for (var col = 0; col < this._size; col += 1) {
                if (this._matrix.read(row, col) === 1) {
                    result.push([xStart + col, yStart + row]);
                }
            }
        }
        return result;
    };
    /**
     * 开炮！
     * 目前attack会对处于攻击范围内的所有敌人进行攻击
     * 伤害数值就是weapon的power数值
     * 更多选择目标逻辑和伤害类型、buff加成将在后续版本实现
     * 此方法应由一个Oprt实例调用
     */
    Weapon.prototype.attack = function () {
        var _this = this;
        var blockLength = Database_1.default.i.UnitSize;
        var twelve = function () {
            return Math.random() * 24 - 12;
        };
        this._captureList.forEach(function (ele) {
            var damage = new Damage(_this.power, null, DamageType.PHYSICAL);
            ele.handleDamage(damage);
            // GameFieldUI.i.Centre.attackEffect(
            //     (this._originX)*blockLength + blockLength/2 + twelve(),
            //     (this._originY)*blockLength + blockLength/2 + twelve(),
            //     ele.NumX + twelve() + blockLength/2,
            //     ele.NumY + twelve() + blockLength/2
            // )
            EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.EFFECT, [ele.NumX, ele.NumY, "#99ccff"]);
        });
        this.stage.attackRecord();
        // const shift:number = (this._size-1)/2;
    };
    /**
     * 1.解除所有的进入/离开攻击范围事件的监听
     * 2.重新设置进入/离开攻击范围事件监听
     */
    Weapon.prototype._resetEvent = function () {
        //第一件事先不做，等需要实现了再弄，先重设
        for (var row = 0; row < this._matrix.height; row += 1) {
            for (var col = 0; col < this._matrix.width; col += 1) {
                if (this._matrix.read(row, col) === 1) {
                    //为矩阵上每一个值为1的点设置监听事件
                    EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.IN(row + this._shiftY, col + this._shiftX), this, this._onEnemyEntre);
                    EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.OUT(row + this._shiftY, col + this._shiftX), this, this._onEnemyLeave);
                }
            }
        }
    };
    Weapon.prototype._clearEvent = function () {
        for (var row = 0; row < this._matrix.height; row += 1) {
            for (var col = 0; col < this._matrix.width; col += 1) {
                if (this._matrix.read(row, col) === 1) {
                    //为矩阵上每一个值为1的点设置监听事件
                    EventCentre_1.default.instance.off(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.IN(row + this._shiftY, col + this._shiftX), this, this._onEnemyEntre);
                    EventCentre_1.default.instance.off(EventCentre_1.default.FieldName.COLLISION, EventCentre_1.default.TypeName.OUT(row + this._shiftY, col + this._shiftX), this, this._onEnemyLeave);
                }
            }
        }
    };
    Weapon.prototype._onEnemyEntre = function (enemy) {
        for (var i = 0; i < this._captureList.length; i += 1) {
            if (this._captureList[i] === enemy) {
                return; //如果已经捕捉此Enemy，则忽略事件
            }
        }
        this._captureList.push(enemy);
        console.log("Enemy captured");
        console.log(this._captureList);
    };
    Weapon.prototype._onEnemyLeave = function (enemy) {
        //查看该敌人是否仍处于攻击范围的其他格子中，如果是，则不删除该敌人
        //该逻辑有待优化
        var found = false;
        for (var row = 0; row < this._size; row += 1) {
            for (var col = 0; col < this._size; col += 1) {
                console.log;
                var positionStatus = this._matrix.read(row, col);
                if (positionStatus !== 0) {
                    // console.log((this._shiftY + row)+"|"+ (this._shiftX + col));
                    // console.log(GameFieldUI.i.Centre.searchPoint(this._shiftY + row, this._shiftX + col, enemy));
                    found = GameFieldUI_1.default.i.Centre.searchPoint(this._shiftY + row, this._shiftX + col, enemy);
                    if (found) {
                        // console.log("Enemy remove failed")
                        return;
                    }
                }
            }
        }
        //如果未查找到该敌人（函数未return），将此敌人从捕捉列表中移除
        for (var i = 0; i < this._captureList.length; i += 1) {
            if (this._captureList[i] === enemy) {
                // console.log("Enemy removed");
                this._captureList.splice(i, 1);
            }
        }
    };
    return Weapon;
}());
exports.Weapon = Weapon;
},{"../../../Toybox/Database":16,"../../../Toybox/EventCentre":17,"../../../Toybox/myMath":19,"../GameFieldUI":7}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameFieldUI_1 = require("../GameFieldUI");
var Database_1 = require("../../../Toybox/Database");
var EventCentre_1 = require("../../../Toybox/EventCentre");
/**
 * 所有表现类的基类
 */
var Present = /** @class */ (function () {
    function Present(url, fuck) {
        if (fuck === void 0) { fuck = false; }
        var _this = this;
        this._actionBar = new Laya.Sprite();
        this._atkRangeOn = false;
        this._atkRange = new Laya.Sprite();
        this.dead = false; //反正我也不维护这些东西了
        this._sprite = GameFieldUI_1.default.i.Centre.CreateSprite(url);
        var fuckLoad1 = function () {
            _this._sprite.loadImage("Basic/兵蚁奔跑1.png");
            if (!_this.dead) {
                Laya.timer.once(300, _this, fuckLoad2);
            }
        };
        var fuckLoad2 = function () {
            _this._sprite.loadImage("Basic/兵蚁奔跑2.png");
            if (!_this.dead) {
                Laya.timer.once(300, _this, fuckLoad1);
            }
        };
        if (fuck) {
            fuckLoad1();
        }
        EventCentre_1.default.instance.on(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.ENEMY_DEAD, this, function (people) {
            if (people === _this._relatedPeople) {
                _this.dead = true;
            }
        });
        this._sprite.addChild(this._actionBar);
        this._sprite.parent.addChild(this._atkRange);
        this.drawHealthBar(1, 1);
        this._sprite.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        this._sprite.on(Laya.Event.MOUSE_OVER, this, this.onHover);
        this._sprite.on(Laya.Event.MOUSE_OUT, this, this.onMouseLeave);
    }
    Present.prototype.onMouseDown = function () {
        console.log(this._relatedPeople);
    };
    Object.defineProperty(Present.prototype, "relatedPeople", {
        set: function (people) {
            this._relatedPeople = people;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Present.prototype, "sprite", {
        get: function () {
            return this._sprite;
        },
        enumerable: true,
        configurable: true
    });
    Present.prototype.drawActionBar = function (current, atkPoint, full) {
        this._actionBar.graphics.clear();
        var percent = current / full;
        var fullLength = Database_1.default.i.UnitSize;
        this._actionBar.graphics.drawRect(-1, -19, fullLength + 2, 6, "#444444"); //背景条
        this._actionBar.graphics.drawRect(0, -18, fullLength * percent, 4, "ffff00"); //后摇条
        this._actionBar.graphics.drawRect(0, -18, fullLength * Math.min(percent, atkPoint / full), 4, "#40ff00"); //前摇条
        //画个逐渐缩小的框表示进度
        if (current <= atkPoint && current !== 0) {
            var gap = (fullLength * current / atkPoint) / 2;
            var leg = fullLength - 2 * gap;
            var reach = fullLength - gap;
            var wid = 4;
            var color = "#4da6ff";
            this._actionBar.graphics.drawRect(gap, gap, leg, wid, color);
            this._actionBar.graphics.drawRect(reach, gap, wid, leg, color);
            this._actionBar.graphics.drawRect(gap, reach, leg + 4, wid, color);
            this._actionBar.graphics.drawRect(gap, gap, wid, leg, color);
        }
    };
    Present.prototype.drawHealthBar = function (current, full) {
        var percent = current / full;
        var barLength = Database_1.default.i.UnitSize * percent;
        this._sprite.graphics.clear();
        this._sprite.graphics.drawRect(-1, -11, Database_1.default.i.UnitSize + 2, 6, "#444444"); //背景条
        this._sprite.graphics.drawRect(0, -10, barLength, 4, "#cc0000"); //血条
    };
    Present.prototype.perform = function (state) {
        this._sprite.pos(state.x, state.y);
    };
    Present.prototype.hide = function () {
        this.sprite.parent.removeChild(this._sprite);
    };
    Present.prototype.onHover = function () {
        // console.log("hover");
        EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.SHOW_RANGE, [this]);
    };
    Present.prototype.onMouseLeave = function () {
        // console.log("out");
        EventCentre_1.default.instance.event(EventCentre_1.default.FieldName.GLOBAL, EventCentre_1.default.TypeName.HIDE_RANGE, [this]);
    };
    Present.prototype.drawAttackRange = function (weapon) {
        var _this = this;
        var location = weapon.getIndexLocations();
        var unit = Database_1.default.i.UnitSize;
        // console.log(location);
        location.forEach(function (ele) {
            // console.log(ele);
            var spr = Laya.Sprite.fromImage("./Basic/visa.png");
            // console.log(spr);
            spr.size(unit, unit);
            spr.pos(ele[0] * unit, ele[1] * unit);
            _this._atkRange.addChild(spr);
            // this._atkRange.graphics.drawRect(ele[0]*unit, ele[1]*unit, unit,unit,"#0088ff");
        });
        // console.log("drawRange");
    };
    Present.prototype.clearAttackRange = function () {
        // console.log("clearRange");
        this._atkRange.parent.removeChild(this._atkRange);
        this._atkRange = new Laya.Sprite();
        this._sprite.parent.addChild(this._atkRange);
    };
    return Present;
}());
exports.default = Present;
},{"../../../Toybox/Database":16,"../../../Toybox/EventCentre":17,"../GameFieldUI":7}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var State = /** @class */ (function () {
    function State(data) {
    }
    Object.defineProperty(State.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(State.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    return State;
}());
exports.default = State;
},{}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var EventCentre_1 = require("../Toybox/EventCentre");
var Loading = /** @class */ (function (_super) {
    __extends(Loading, _super);
    function Loading() {
        var _this = _super.call(this) || this;
        var gameSet = "./Database/GameSet.json", enemyDatabase = "./Database/EnemyDatabase.json", operatorDatabase = "./Database/OperatorDatabase.json";
        //加载游戏设置，敌人数据库，干员数据库
        Laya.loader.load([gameSet, enemyDatabase, operatorDatabase], Laya.Handler.create(_this, _this.onLoaded), null, Laya.Loader.JSON);
        return _this;
    }
    Loading.prototype.onLoaded = function () {
        EventCentre_1.default.instance.event("Init", "Regular");
    };
    return Loading;
}(layaMaxUI_1.ui.LoadingSceneUI));
exports.default = Loading;
},{"../Toybox/EventCentre":17,"../ui/layaMaxUI":20}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var myMath_1 = require("./myMath");
var Box = /** @class */ (function (_super) {
    __extends(Box, _super);
    function Box() {
        return _super.call(this, 0, 0, 0, 0) || this;
    }
    /**
     * 就是……来一组（100个）随机的碰撞箱
     * @param xRange
     * @param yRange
     * @param widRange
     * @param higRange
     */
    Box.randomBoxes = function (xRange, yRange, widRange, higRange) {
        if (xRange === void 0) { xRange = 1200; }
        if (yRange === void 0) { yRange = 800; }
        if (widRange === void 0) { widRange = 300; }
        if (higRange === void 0) { higRange = 300; }
        var rad = myMath_1.default.randomInt;
        var result = [];
        for (var i = 0; i < 50; i += 1) {
            result.push(new Box());
            result[i].pos(rad(xRange), rad(yRange)).size(rad(widRange), rad(higRange));
        }
        return result;
    };
    Box.prototype.pos = function (x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Box.prototype.size = function (width, height) {
        this.width = width;
        this.height = height;
        return this;
    };
    Box.prototype.intersects_X = function (rec) {
        if (this.x < rec.x) {
            return rec.intersects_X(this);
        }
        return (this.x >= rec.x && this.x <= rec.right) ||
            (this.right >= rec.x && this.right <= rec.right);
    };
    Box.prototype.intersects_Y = function (rec) {
        if (this.y < rec.y) {
            return rec.intersects_Y(this);
        }
        return (this.y >= rec.y && this.y <= rec.bottom) ||
            (this.bottom >= rec.y && this.bottom <= rec.bottom);
    };
    return Box;
}(Laya.Rectangle));
exports.Box = Box;
var MapNode = /** @class */ (function () {
    function MapNode(key, value) {
        this.key = key;
        this.value = value;
    }
    return MapNode;
}());
var Node = /** @class */ (function () {
    function Node(item, next) {
        this.item = item;
        this.next = next;
    }
    return Node;
}());
var Struc;
(function (Struc) {
    var LinkList = /** @class */ (function () {
        function LinkList() {
            this._head = new Node(null, null);
            this._tail = new Node(null, null);
        }
        Object.defineProperty(LinkList.prototype, "length", {
            //基础属性
            get: function () {
                var result = 0;
                var current = this._head;
                while (current.next !== null) {
                    result += 1;
                    current = current.next;
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LinkList.prototype, "isEmpty", {
            get: function () {
                return this._head.next === null;
            },
            enumerable: true,
            configurable: true
        });
        //增删改查
        //增
        LinkList.prototype.push = function (item) {
            var last = new Node(item, null);
            if (this.isEmpty) {
                this._head.next = last;
                this._tail.next = last;
            }
            else {
                this._tail.next.next = last;
                this._tail.next = last;
            }
        };
        LinkList.prototype.unshift = function (item) {
            var first = new Node(item, null);
            if (this.isEmpty) {
                this._tail.next = first;
                this._head.next = first;
            }
            else {
                first.next = this._head.next.next;
                this._head.next = first;
            }
        };
        LinkList.prototype.insert = function (index, item) {
            if (index < 0 || index > this.length) { //这句不一样
                return false;
            }
            if (index === this.length) {
                this.push(item);
                return true;
            }
            var current = this._head; //这句和其他遍历是不一样的，因为要选取到选定位置的前面一格
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.next = new Node(item, current.next);
            return true;
        };
        //删
        LinkList.prototype.remove = function (index) {
            if (index < 0 || index >= this.length) {
                return null;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            var item = current.item;
            current = null;
            return current.item;
        };
        LinkList.prototype.shift = function () {
            if (this.isEmpty) {
                return null;
            }
            var item = this._head.next.item;
            this._head.next = this._head.next.next;
            if (this.isEmpty) {
                this._tail.next = null;
            }
            return item;
        };
        //改
        LinkList.prototype.write = function (index, item) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            current.item = item;
        };
        //查
        LinkList.prototype.read = function (index) {
            if (index < 0 || index >= this.length) {
                return;
            }
            var current = this._head.next;
            for (var n = 0; n < index; n += 1) {
                current = current.next;
            }
            return current.item;
        };
        LinkList.prototype.search = function (item) {
            var result = [];
            this.foreach(function (ele, index) {
                if (ele === item) {
                    result.push(index);
                }
            });
            return result;
        };
        /**
         * 判断链表中是否存在某一元素
         * @param item
         */
        LinkList.prototype.has = function (item) {
            var current = this._head.next;
            while (current != null) {
                if (current.item == item) {
                    return true;
                }
                current = current.next;
            }
            return false;
        };
        //高阶函数
        LinkList.prototype.foreach = function (f) {
            var current = this._head.next;
            var num = 0;
            while (current !== null) {
                f(current.item, num, this);
                current = current.next;
                num += 1;
            }
        };
        /**
         * 请暂时不要使用这个函数，因为我也不知道它会不会爆炸
         * 除非你读过这个函数的源代码
         * @param f 判断元素优先级的回调函数
         * @param increase 是否升序，默认升序
         * @returns 返回一个排序的链表
         */
        LinkList.prototype.sortby = function (f, increase) {
            if (increase === void 0) { increase = true; }
            var priority = new LinkList();
            var sorted = new LinkList();
            priority.push(-0);
            sorted.push(null);
            var compare = increase ? function (a, b) { return a < b; } : function (a, b) { return a > b; };
            this.foreach(function (ele) {
                var currentPri = f(ele);
                var node = sorted._head.next;
                var priNode = priority._head.next;
                var foundPlace = false;
                while (node.next !== null) {
                    // if (currentPri < priNode.next.item) {
                    if (compare(currentPri, priNode.next.item)) {
                        node.next = new Node(ele, node.next);
                        priNode.next = new Node(currentPri, priNode.next);
                        foundPlace = true;
                        break;
                    }
                    node = node.next;
                    priNode = priNode.next;
                }
                if (!foundPlace) {
                    sorted.push(ele);
                    priority.push(currentPri);
                }
            });
            sorted.shift();
            return sorted;
        };
        return LinkList;
    }());
    Struc.LinkList = LinkList;
    var Map = /** @class */ (function () {
        function Map() {
            this._list = [];
        }
        Map.prototype.get = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return ele.value;
                }
            }
            return null;
        };
        Map.prototype.getKeyByVal = function (val) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.value === val) {
                    return ele.key;
                }
            }
            return null;
        };
        Map.prototype.keyExist = function (key) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    return true;
                }
            }
            return false;
        };
        Map.prototype.set = function (key, value) {
            for (var n = 0; n < this._list.length; n += 1) {
                if (this._list[n].key === key) {
                    this._list[n].value = value;
                    return false;
                }
            }
            this._list.push(new MapNode(key, value));
            return true;
        };
        Map.prototype.batchSet = function (keys, values) {
            if (keys.length !== values.length) {
                return false;
            }
            for (var n = 0; n < keys.length; n += 1) {
                this.set(keys[n], values[n]);
            }
            return true;
        };
        Map.prototype.remove = function (key) {
            var count = 0;
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (ele.key === key) {
                    this._list.splice(count, 1);
                    return true;
                }
                count += 1;
            }
            return false;
        };
        Object.defineProperty(Map.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Map.prototype.foreach = function (f) {
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                f(ele.key, ele.value);
            }
            return;
        };
        Map.prototype.filter = function (f) {
            var result = new Map();
            for (var _i = 0, _a = this._list; _i < _a.length; _i++) {
                var ele = _a[_i];
                if (f(ele.key, ele.value)) {
                    result.set(ele.key, ele.value);
                }
            }
            return result;
        };
        return Map;
    }());
    Struc.Map = Map;
    var PointerList = /** @class */ (function () {
        function PointerList(source, initPoint) {
            if (source === void 0) { source = []; }
            if (initPoint === void 0) { initPoint = 0; }
            var _this = this;
            this._list = [];
            this._pointer = 0;
            source.forEach(function (ele) {
                _this._list.push(ele);
            });
        }
        Object.defineProperty(PointerList.prototype, "exceeding", {
            get: function () {
                return this._pointer >= this._list.length || this._pointer < 0;
            },
            enumerable: true,
            configurable: true
        });
        /*
        以下注释中，把数组看作横向排列的一系列元素
        index = 0的元素在最左侧
        */
        PointerList.prototype.read = function () {
            return this._list[this._pointer];
        };
        PointerList.prototype.step = function () {
            this._pointer += 1;
            return this.read();
        };
        PointerList.prototype.to = function (place) {
            this._pointer = place;
            return this;
        };
        PointerList.prototype.push = function (data) {
            this._list.push(data);
            return this;
        };
        PointerList.prototype.set = function (index, data) {
            this._list[index] = data;
            return this;
        };
        PointerList.prototype.next = function (shift) {
            if (shift === void 0) { shift = 1; }
            //读取位于当前pointer所指的元素右边若干格的元素
            //shift默认为1，即当前pointer右边相邻的元素
            //shift为负数时获取左侧的元素
            return this._list[this._pointer + shift];
        };
        Object.defineProperty(PointerList.prototype, "length", {
            get: function () {
                return this._list.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "last", {
            get: function () {
                return this._list[this._list.length - 1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "first", {
            get: function () {
                return this._list[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "pointer", {
            get: function () {
                return this._pointer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PointerList.prototype, "atEnd", {
            get: function () {
                return this._pointer === this._list.length - 1;
            },
            enumerable: true,
            configurable: true
        });
        return PointerList;
    }());
    Struc.PointerList = PointerList;
})(Struc = exports.Struc || (exports.Struc = {}));
},{"./myMath":19}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var gameSet_URL = "./Database/GameSet.json", enemyDatabase_URL = "./Database/EnemyDatabase.json", operatorDatabase_URL = "./Database/OperatorDatabase.json";
var Database = /** @class */ (function () {
    function Database() {
        Laya.loader.load([enemyDatabase_URL, operatorDatabase_URL, gameSet_URL], Laya.Handler.create(this, this.onLoaded));
    }
    //直接public static inst:Database = new Database(),是否可以在类装载时就创建所需的单例?
    Database.init = function () {
        this.i = new Database();
        this.init = function () { };
    };
    Database.prototype.onLoaded = function () {
        this._enemyData = Laya.loader.getRes(enemyDatabase_URL);
        this._operatorData = Laya.loader.getRes(operatorDatabase_URL);
        this._gameSet = Laya.loader.getRes(gameSet_URL);
        this._unitSize = this._gameSet["ground"].size;
        this._subUnitSize = Math.floor(this._unitSize * 4 / 5);
        console.log(this);
    };
    Database.prototype.getPath = function (pathName) {
        return this._gameSet["paths"][pathName];
    };
    Database.prototype.getEnemy = function (enemyName) {
        return this._enemyData[enemyName];
    };
    Database.prototype.getOprt = function (operatorName) {
        return this._operatorData[operatorName];
    };
    Database.prototype.getGround = function () {
        return this._gameSet["ground"];
    };
    Database.prototype.getTimetable = function () {
        return this._gameSet["timetable"];
    };
    Object.defineProperty(Database.prototype, "UnitSize", {
        get: function () {
            return this._unitSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Database.prototype, "subUnitSize", {
        get: function () {
            return this._subUnitSize;
        },
        enumerable: true,
        configurable: true
    });
    return Database;
}());
exports.default = Database;
},{}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DataStructure_1 = require("./DataStructure");
var FieldName = /** @class */ (function () {
    function FieldName() {
        this.GLOBAL = "GLOBAL";
        this.PEOPLE = "PEOPLE";
        this.CREATE_ENEMY_SPRITE = "CREATE_ENEMY_SPRITE";
        this.COLLISION = "COLLISION";
    }
    return FieldName;
}());
var TypeName = /** @class */ (function () {
    function TypeName() {
        this.PAUSE = "PAUSE";
        this.ENEMY_DEAD = "ENEMY_DEAD";
        this.EFFECT = "EFFECT";
        this.OPRT_DEAD = "OPRT_DEAD";
        this.SHOW_RANGE = "SHOW_RANGE";
        this.HIDE_RANGE = "HIDE_RANGE";
    }
    Object.defineProperty(TypeName.prototype, "Any", {
        get: function () {
            return "Any";
        },
        enumerable: true,
        configurable: true
    });
    //生成进入事件字符串
    TypeName.prototype.IN = function (row, col) {
        return "IN" + (row + "" + col);
    };
    TypeName.prototype.OUT = function (row, col) {
        return "OUT" + (row + "" + col);
    };
    return TypeName;
}());
var EventCentre = /** @class */ (function () {
    function EventCentre() {
        this._eventFields = new DataStructure_1.Struc.Map();
    }
    EventCentre.init = function () {
        EventCentre.instance = new EventCentre();
        this.init = function () { };
    };
    ;
    EventCentre.prototype.on = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).on(type, caller, method, args);
    };
    EventCentre.prototype.event = function (field, type, args) {
        if (!this._eventFields.keyExist(field)) {
            return;
        }
        this._eventFields.get(field).event(type, args);
    };
    EventCentre.prototype.once = function (field, type, caller, method, args) {
        if (!this._eventFields.keyExist(field)) {
            this._eventFields.set(field, new Laya.EventDispatcher());
        }
        this._eventFields.get(field).once(type, caller, method, args);
    };
    EventCentre.prototype.off = function (field, type, caller, func) {
        this._eventFields.get(field).off(type, caller, func);
    };
    /**
     * 区分不同的事件区域
     * 一个事件区域的事件，不能被另一个事件区域的监听器得知
     */
    EventCentre.FieldName = new FieldName();
    EventCentre.TypeName = new TypeName();
    return EventCentre;
}());
exports.default = EventCentre;
},{"./DataStructure":15}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyGlobal = /** @class */ (function () {
    function MyGlobal() {
    }
    MyGlobal.ListOfOprt = [
        "bird"
    ];
    MyGlobal.LINE_EFFECT_ON = false;
    return MyGlobal;
}());
exports.default = MyGlobal;
},{}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 虽然列向量和行向量都就是个定长数组
 * 但我这里还是当列向量吧
 */
var ColoumVector = /** @class */ (function () {
    function ColoumVector(height) {
        this._data = [];
        this.height = height;
        while (height > 0) {
            this._data.push(0);
            height -= 1;
        }
    }
    ColoumVector.fromArray = function (arr) {
        var result = new ColoumVector(arr.length);
        arr.forEach(function (ele, index) {
            result.write(index, ele);
        });
        return result;
    };
    //加减乘除没有减除
    ColoumVector.prototype.plus = function (w) {
        if (w.height !== this.height) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        var result = this.clone;
        w._data.forEach(function (ele, index) {
            result._data[index] += ele;
        });
        return result;
    };
    ColoumVector.prototype.multi = function (c) {
        var result = this.clone;
        this._data.forEach(function (ele, index) {
            result._data[index] = c * ele;
        });
        return result;
    };
    //增删改查没有增删
    ColoumVector.prototype.write = function (index, value) {
        this._data[index] = value;
    };
    ColoumVector.prototype.read = function (index) {
        return this._data[index];
    };
    ColoumVector.prototype.cover = function (source) {
        var _this = this;
        if (source.height !== this.height) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        source._data.forEach(function (ele, index) {
            _this._data[index] = ele;
        });
    };
    //其他函数
    ColoumVector.prototype.print = function () {
        console.log(this._data.join("\n"));
        return this;
    };
    Object.defineProperty(ColoumVector.prototype, "clone", {
        get: function () {
            var result = new ColoumVector(this.height);
            this._data.forEach(function (ele, index) {
                result._data[index] = ele;
            });
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return ColoumVector;
}());
exports.ColoumVector = ColoumVector;
/**
 * 虽然一排列向量和一列行向量都可以当矩阵
 * 但这里是一排列向量
 */
var Matrix = /** @class */ (function () {
    function Matrix(height, width) {
        this.height = height;
        this.width = width;
        this._data = [];
        for (var n = 0; n < width; n += 1) { //零向量满上
            this._data.push(new ColoumVector(height));
        }
    }
    //增删改查没有增删
    Matrix.prototype.writeColoum = function (index, coloum) {
        this._data[index].cover(coloum);
    };
    Matrix.prototype.write = function (row, col, value) {
        // console.log(row +"|" + col);
        if (row >= this.height || col >= this.width || row < 0 || col < 0) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        this._data[col].write(row, value);
    };
    Matrix.prototype.readColoum = function (index) {
        return this._data[index];
    };
    Matrix.prototype.read = function (row, col) {
        return this._data[col].read(row);
    };
    //加减乘除没有减除
    Matrix.prototype.transColVector = function (v) {
        if (v.height !== this.width) {
            throw new DOMException("Not funny didn't laugh", "Not Funny Exception");
        }
        var result = new ColoumVector(this.height);
        for (var col = 0; col < this.width; col += 1) {
            result = result.plus(this._data[col].multi(v.read(col)));
        }
        return result;
    };
    //旋转
    Matrix.prototype.rotateClock = function () {
        var result = new Matrix(this.width, this.height);
        for (var down = 0; down < result.height; down += 1) {
            for (var right = 0; right < result.width; right += 1) {
                var from = this.read(this.height - 1 - right, down);
                result.write(down, right, from);
            }
        }
        return result;
    };
    //其他函数
    Matrix.prototype.str = function () {
        var result = "";
        for (var row = 0; row < this.height; row += 1) {
            for (var col = 0; col < this.width; col += 1) {
                result += this._data[col].read(row) + "\t";
            }
            result += "\n";
        }
        return result;
    };
    Matrix.prototype.print = function () {
        console.log(this.str());
    };
    return Matrix;
}());
exports.Matrix = Matrix;
var MyMath = /** @class */ (function () {
    function MyMath() {
    }
    //Laya模块
    /**
     * 判断两个矩形对象是否重叠
     * @param rec0 一个矩形
     * @param rec1 另一个矩形
     */
    MyMath.overlap_Rec = function (rec0, rec1) {
        return this.overlap_2d(rec0.x, rec1.x, rec0.width, rec1.width) &&
            this.overlap_2d(rec0.y, rec1.y, rec0.height, rec1.height);
    };
    /**
     * 在指定绘图节点中绘制矩形
     * @param spr 绘图节点
     * @param rec 矩形
     * @param color 颜色
     */
    MyMath.drawRec = function (spr, rec, color) {
        if (color === void 0) { color = "#ffffff"; }
        spr.graphics.drawRect(rec.x, rec.y, rec.width, rec.height, color, "#888888", 2);
    };
    //Laya模块
    /**
     * 判断在数轴上两条线是否重叠
     * @param point0 线段0的左侧端点
     * @param point1 线段1的左侧端点
     * @param length0 线段0的长度
     * @param length1 线段1的长度
     */
    MyMath.overlap_2d = function (point0, point1, length0, length1) {
        return MyMath.include_2d(point0, length0, point1) ||
            MyMath.include_2d(point0, length0, point1 + length1);
    };
    /**
     * 判断在数轴上一个点是否处于一条线段上
     * @param locate 线段左侧端点位置
     * @param length 线段长度
     * @param dot 点位
     */
    MyMath.include_2d = function (locate, length, dot) {
        return dot >= locate && dot <= locate + length;
    };
    /**
     * @param upLimit 上界
     * @param loLimit 下界
     * @returns 上界与下界之间的随机整数
     */
    MyMath.randomInt = function (upLimit, loLimit) {
        if (loLimit === void 0) { loLimit = 0; }
        return Math.round(Math.random() * (upLimit - loLimit) + loLimit);
    };
    /**
     *
     * @param front 原数字
     * @param shift 增加量
     * @param end 增加上限（若增加量为负，则为下限）
     *
     */
    MyMath.moveTo = function (front, shift, end) {
        var result = front + shift;
        if (shift > 0 && result > end) {
            result = end;
        }
        else if (shift < 0 && result < end) {
            result = end;
        }
        return result;
    };
    /**
     * 冒泡排序
     * 注意这个算法会直接修改原数组
     * @param source 原数组
     * @param value 优先值取值函数
     * @param increase 是否升序（默认升序）
     */
    MyMath.bubbleSort = function (source, value, increase) {
        if (increase === void 0) { increase = true; }
        // let time = 0;
        var complete = true;
        for (var n = source.length - 1; n > 0; n -= 1) {
            complete = true;
            for (var m = 0; m < n; m += 1) {
                var cur = value(source[m]);
                var next = value(source[m + 1]);
                if (increase ? (cur > next) : (cur < next)) {
                    var store = source[m];
                    source[m] = source[m + 1];
                    source[m + 1] = store;
                    complete = false;
                }
                // time += 1;
            }
            if (complete) {
                break;
            }
        }
    };
    return MyMath;
}());
exports.default = MyMath;
},{}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var GameSceneUI = /** @class */ (function (_super) {
        __extends(GameSceneUI, _super);
        function GameSceneUI() {
            return _super.call(this) || this;
        }
        GameSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("GameScene");
        };
        return GameSceneUI;
    }(Scene));
    ui.GameSceneUI = GameSceneUI;
    REG("ui.GameSceneUI", GameSceneUI);
    var LoadingSceneUI = /** @class */ (function (_super) {
        __extends(LoadingSceneUI, _super);
        function LoadingSceneUI() {
            return _super.call(this) || this;
        }
        LoadingSceneUI.prototype.createChildren = function () {
            _super.prototype.createChildren.call(this);
            this.loadScene("LoadingScene");
        };
        return LoadingSceneUI;
    }(Scene));
    ui.LoadingSceneUI = LoadingSceneUI;
    REG("ui.LoadingSceneUI", LoadingSceneUI);
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
